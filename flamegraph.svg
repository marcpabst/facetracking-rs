<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="18555"><g><title>CoreFoundation`CFStringCompare (3 samples, 0.02%)</title><rect x="0.0269%" y="357" width="0.0162%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="3"/><text x="0.2769%" y="367.50"></text></g><g><title>CarbonCore`MPTaskIsPreemptive (2 samples, 0.01%)</title><rect x="0.0647%" y="341" width="0.0108%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="2"/><text x="0.3147%" y="351.50"></text></g><g><title>HIToolbox`GetCurrentEventQueue (5 samples, 0.03%)</title><rect x="0.0539%" y="357" width="0.0269%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="5"/><text x="0.3039%" y="367.50"></text></g><g><title>CoreFoundation`CFRunLoopGetCurrent (2 samples, 0.01%)</title><rect x="0.0862%" y="341" width="0.0108%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="2"/><text x="0.3362%" y="351.50"></text></g><g><title>CoreFoundation`CFRunLoopRunInMode (4 samples, 0.02%)</title><rect x="0.0970%" y="341" width="0.0216%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="4"/><text x="0.3470%" y="351.50"></text></g><g><title>CoreFoundation`CFEqual (10 samples, 0.05%)</title><rect x="0.1563%" y="277" width="0.0539%" height="15" fill="rgb(232,128,0)" fg:x="29" fg:w="10"/><text x="0.4063%" y="287.50"></text></g><g><title>CoreFoundation`CFBasicHashFindBucket (18 samples, 0.10%)</title><rect x="0.1347%" y="293" width="0.0970%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="18"/><text x="0.3847%" y="303.50"></text></g><g><title>CoreFoundation`__CFStringEqual (3 samples, 0.02%)</title><rect x="0.2156%" y="277" width="0.0162%" height="15" fill="rgb(228,23,34)" fg:x="40" fg:w="3"/><text x="0.4656%" y="287.50"></text></g><g><title>CoreFoundation`CFEqual (2 samples, 0.01%)</title><rect x="0.2317%" y="293" width="0.0108%" height="15" fill="rgb(218,30,26)" fg:x="43" fg:w="2"/><text x="0.4817%" y="303.50"></text></g><g><title>CoreFoundation`CFSetGetValue (27 samples, 0.15%)</title><rect x="0.1347%" y="309" width="0.1455%" height="15" fill="rgb(220,122,19)" fg:x="25" fg:w="27"/><text x="0.3847%" y="319.50"></text></g><g><title>CoreFoundation`__CFStringHash (7 samples, 0.04%)</title><rect x="0.2425%" y="293" width="0.0377%" height="15" fill="rgb(250,228,42)" fg:x="45" fg:w="7"/><text x="0.4925%" y="303.50"></text></g><g><title>CoreFoundation`__CFRunLoopCopyMode (31 samples, 0.17%)</title><rect x="0.1240%" y="325" width="0.1671%" height="15" fill="rgb(240,193,28)" fg:x="23" fg:w="31"/><text x="0.3740%" y="335.50"></text></g><g><title>rust-eyetracking`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_user_events (2 samples, 0.01%)</title><rect x="0.2910%" y="229" width="0.0108%" height="15" fill="rgb(216,20,37)" fg:x="54" fg:w="2"/><text x="0.5410%" y="239.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::run::_{{closure}} (2 samples, 0.01%)</title><rect x="0.2910%" y="213" width="0.0108%" height="15" fill="rgb(206,188,39)" fg:x="54" fg:w="2"/><text x="0.5410%" y="223.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::handle_event (2 samples, 0.01%)</title><rect x="0.2910%" y="197" width="0.0108%" height="15" fill="rgb(217,207,13)" fg:x="54" fg:w="2"/><text x="0.5410%" y="207.50"></text></g><g><title>rust-eyetracking`core::ops::function::FnOnce::call_once{{vtable.shim}} (2 samples, 0.01%)</title><rect x="0.2910%" y="181" width="0.0108%" height="15" fill="rgb(231,73,38)" fg:x="54" fg:w="2"/><text x="0.5410%" y="191.50"></text></g><g><title>rust-eyetracking`show_image::backend::window::WindowHandle::set_image (2 samples, 0.01%)</title><rect x="0.2910%" y="165" width="0.0108%" height="15" fill="rgb(225,20,46)" fg:x="54" fg:w="2"/><text x="0.5410%" y="175.50"></text></g><g><title>rust-eyetracking`show_image::backend::util::gpu_image::GpuImage::from_data (2 samples, 0.01%)</title><rect x="0.2910%" y="149" width="0.0108%" height="15" fill="rgb(210,31,41)" fg:x="54" fg:w="2"/><text x="0.5410%" y="159.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (2 samples, 0.01%)</title><rect x="0.2910%" y="133" width="0.0108%" height="15" fill="rgb(221,200,47)" fg:x="54" fg:w="2"/><text x="0.5410%" y="143.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (4 samples, 0.02%)</title><rect x="0.2910%" y="309" width="0.0216%" height="15" fill="rgb(226,26,5)" fg:x="54" fg:w="4"/><text x="0.5410%" y="319.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (4 samples, 0.02%)</title><rect x="0.2910%" y="293" width="0.0216%" height="15" fill="rgb(249,33,26)" fg:x="54" fg:w="4"/><text x="0.5410%" y="303.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::observer::control_flow_end_handler (4 samples, 0.02%)</title><rect x="0.2910%" y="277" width="0.0216%" height="15" fill="rgb(235,183,28)" fg:x="54" fg:w="4"/><text x="0.5410%" y="287.50"></text></g><g><title>rust-eyetracking`std::panicking::try (4 samples, 0.02%)</title><rect x="0.2910%" y="261" width="0.0216%" height="15" fill="rgb(221,5,38)" fg:x="54" fg:w="4"/><text x="0.5410%" y="271.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app_state::AppState::cleared (4 samples, 0.02%)</title><rect x="0.2910%" y="245" width="0.0216%" height="15" fill="rgb(247,18,42)" fg:x="54" fg:w="4"/><text x="0.5410%" y="255.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (2 samples, 0.01%)</title><rect x="0.3018%" y="229" width="0.0108%" height="15" fill="rgb(241,131,45)" fg:x="56" fg:w="2"/><text x="0.5518%" y="239.50"></text></g><g><title>rust-eyetracking`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event (2 samples, 0.01%)</title><rect x="0.3018%" y="213" width="0.0108%" height="15" fill="rgb(249,31,29)" fg:x="56" fg:w="2"/><text x="0.5518%" y="223.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::run::_{{closure}} (2 samples, 0.01%)</title><rect x="0.3018%" y="197" width="0.0108%" height="15" fill="rgb(225,111,53)" fg:x="56" fg:w="2"/><text x="0.5518%" y="207.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::handle_event (2 samples, 0.01%)</title><rect x="0.3018%" y="181" width="0.0108%" height="15" fill="rgb(238,160,17)" fg:x="56" fg:w="2"/><text x="0.5518%" y="191.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (7 samples, 0.04%)</title><rect x="0.2910%" y="325" width="0.0377%" height="15" fill="rgb(214,148,48)" fg:x="54" fg:w="7"/><text x="0.5410%" y="335.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoSource1 (3 samples, 0.02%)</title><rect x="0.3126%" y="309" width="0.0162%" height="15" fill="rgb(232,36,49)" fg:x="58" fg:w="3"/><text x="0.5626%" y="319.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ (3 samples, 0.02%)</title><rect x="0.3126%" y="293" width="0.0162%" height="15" fill="rgb(209,103,24)" fg:x="58" fg:w="3"/><text x="0.5626%" y="303.50"></text></g><g><title>HIServices`mshMIGPerform (3 samples, 0.02%)</title><rect x="0.3126%" y="277" width="0.0162%" height="15" fill="rgb(229,88,8)" fg:x="58" fg:w="3"/><text x="0.5626%" y="287.50"></text></g><g><title>HIServices`_XCopyElementAtPosition (2 samples, 0.01%)</title><rect x="0.3180%" y="261" width="0.0108%" height="15" fill="rgb(213,181,19)" fg:x="59" fg:w="2"/><text x="0.5680%" y="271.50"></text></g><g><title>HIServices`_AXXMIGCopyElementAtPosition (2 samples, 0.01%)</title><rect x="0.3180%" y="245" width="0.0108%" height="15" fill="rgb(254,191,54)" fg:x="59" fg:w="2"/><text x="0.5680%" y="255.50"></text></g><g><title>CoreFoundation`__CFStringEqual (2 samples, 0.01%)</title><rect x="0.3288%" y="325" width="0.0108%" height="15" fill="rgb(241,83,37)" fg:x="61" fg:w="2"/><text x="0.5788%" y="335.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (43 samples, 0.23%)</title><rect x="0.1186%" y="341" width="0.2317%" height="15" fill="rgb(233,36,39)" fg:x="22" fg:w="43"/><text x="0.3686%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (2 samples, 0.01%)</title><rect x="0.3395%" y="325" width="0.0108%" height="15" fill="rgb(226,3,54)" fg:x="63" fg:w="2"/><text x="0.5895%" y="335.50"></text></g><g><title>CoreFoundation`CFStringCompareWithOptionsAndLocale (6 samples, 0.03%)</title><rect x="0.3503%" y="341" width="0.0323%" height="15" fill="rgb(245,192,40)" fg:x="65" fg:w="6"/><text x="0.6003%" y="351.50"></text></g><g><title>CoreFoundation`_CFStringGetCStringPtrInternal (3 samples, 0.02%)</title><rect x="0.3665%" y="325" width="0.0162%" height="15" fill="rgb(238,167,29)" fg:x="68" fg:w="3"/><text x="0.6165%" y="335.50"></text></g><g><title>CoreFoundation`CFStringGetLength (3 samples, 0.02%)</title><rect x="0.3826%" y="341" width="0.0162%" height="15" fill="rgb(232,182,51)" fg:x="71" fg:w="3"/><text x="0.6326%" y="351.50"></text></g><g><title>CarbonCore`DYLD-STUB$$pthread_self (2 samples, 0.01%)</title><rect x="0.4473%" y="325" width="0.0108%" height="15" fill="rgb(231,60,39)" fg:x="83" fg:w="2"/><text x="0.6973%" y="335.50"></text></g><g><title>CarbonCore`MPTaskIsPreemptive (2 samples, 0.01%)</title><rect x="0.4581%" y="325" width="0.0108%" height="15" fill="rgb(208,69,12)" fg:x="85" fg:w="2"/><text x="0.7081%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_self (2 samples, 0.01%)</title><rect x="0.4581%" y="309" width="0.0108%" height="15" fill="rgb(235,93,37)" fg:x="85" fg:w="2"/><text x="0.7081%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.02%)</title><rect x="0.4850%" y="293" width="0.0162%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="3"/><text x="0.7350%" y="303.50"></text></g><g><title>HIToolbox`Convert1CGEvent(unsigned char) (5 samples, 0.03%)</title><rect x="0.4797%" y="309" width="0.0269%" height="15" fill="rgb(222,207,29)" fg:x="89" fg:w="5"/><text x="0.7297%" y="319.50"></text></g><g><title>HIToolbox`GetCurrentEventLoop (2 samples, 0.01%)</title><rect x="0.5120%" y="309" width="0.0108%" height="15" fill="rgb(206,96,30)" fg:x="95" fg:w="2"/><text x="0.7620%" y="319.50"></text></g><g><title>HIToolbox`MainLoopObserver(unsigned int, OpaqueEventRef*, void*) (11 samples, 0.06%)</title><rect x="0.4743%" y="325" width="0.0593%" height="15" fill="rgb(218,138,4)" fg:x="88" fg:w="11"/><text x="0.7243%" y="335.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (86 samples, 0.46%)</title><rect x="0.0808%" y="357" width="0.4635%" height="15" fill="rgb(250,191,14)" fg:x="15" fg:w="86"/><text x="0.3308%" y="367.50"></text></g><g><title>HIToolbox`_NotifyEventLoopObservers (20 samples, 0.11%)</title><rect x="0.4365%" y="341" width="0.1078%" height="15" fill="rgb(239,60,40)" fg:x="81" fg:w="20"/><text x="0.6865%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (2 samples, 0.01%)</title><rect x="0.5335%" y="325" width="0.0108%" height="15" fill="rgb(206,27,48)" fg:x="99" fg:w="2"/><text x="0.7835%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.02%)</title><rect x="0.5443%" y="357" width="0.0162%" height="15" fill="rgb(225,35,8)" fg:x="101" fg:w="3"/><text x="0.7943%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.02%)</title><rect x="0.5605%" y="357" width="0.0216%" height="15" fill="rgb(250,213,24)" fg:x="104" fg:w="4"/><text x="0.8105%" y="367.50"></text></g><g><title>AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (107 samples, 0.58%)</title><rect x="0.0108%" y="421" width="0.5767%" height="15" fill="rgb(247,123,22)" fg:x="2" fg:w="107"/><text x="0.2608%" y="431.50"></text></g><g><title>AppKit`_DPSNextEvent (107 samples, 0.58%)</title><rect x="0.0108%" y="405" width="0.5767%" height="15" fill="rgb(231,138,38)" fg:x="2" fg:w="107"/><text x="0.2608%" y="415.50"></text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (107 samples, 0.58%)</title><rect x="0.0108%" y="389" width="0.5767%" height="15" fill="rgb(231,145,46)" fg:x="2" fg:w="107"/><text x="0.2608%" y="399.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (105 samples, 0.57%)</title><rect x="0.0216%" y="373" width="0.5659%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="105"/><text x="0.2716%" y="383.50"></text></g><g><title>AppKit`-[NSControl mouseDown:] (108 samples, 0.58%)</title><rect x="0.0108%" y="517" width="0.5821%" height="15" fill="rgb(217,147,25)" fg:x="2" fg:w="108"/><text x="0.2608%" y="527.50"></text></g><g><title>AppKit`-[NSButtonCell trackMouse:inRect:ofView:untilMouseUp:] (108 samples, 0.58%)</title><rect x="0.0108%" y="501" width="0.5821%" height="15" fill="rgb(247,81,37)" fg:x="2" fg:w="108"/><text x="0.2608%" y="511.50"></text></g><g><title>AppKit`-[NSCell trackMouse:inRect:ofView:untilMouseUp:] (108 samples, 0.58%)</title><rect x="0.0108%" y="485" width="0.5821%" height="15" fill="rgb(209,12,38)" fg:x="2" fg:w="108"/><text x="0.2608%" y="495.50"></text></g><g><title>AppKit`NSControlTrackMouse (108 samples, 0.58%)</title><rect x="0.0108%" y="469" width="0.5821%" height="15" fill="rgb(227,1,9)" fg:x="2" fg:w="108"/><text x="0.2608%" y="479.50"></text></g><g><title>AppKit`-[NSDragEventTracker trackEvent:usingHandler:] (108 samples, 0.58%)</title><rect x="0.0108%" y="453" width="0.5821%" height="15" fill="rgb(248,47,43)" fg:x="2" fg:w="108"/><text x="0.2608%" y="463.50"></text></g><g><title>AppKit`-[NSWindow(NSEventRouting) trackEventsMatchingMask:timeout:mode:handler:] (108 samples, 0.58%)</title><rect x="0.0108%" y="437" width="0.5821%" height="15" fill="rgb(221,10,30)" fg:x="2" fg:w="108"/><text x="0.2608%" y="447.50"></text></g><g><title>AppKit`-[NSWindow(NSEventRouting) sendEvent:] (109 samples, 0.59%)</title><rect x="0.0108%" y="565" width="0.5874%" height="15" fill="rgb(210,229,1)" fg:x="2" fg:w="109"/><text x="0.2608%" y="575.50"></text></g><g><title>AppKit`-[NSWindow(NSEventRouting) _reallySendEvent:isDelayedEvent:] (109 samples, 0.59%)</title><rect x="0.0108%" y="549" width="0.5874%" height="15" fill="rgb(222,148,37)" fg:x="2" fg:w="109"/><text x="0.2608%" y="559.50"></text></g><g><title>AppKit`-[NSWindow(NSEventRouting) _handleMouseDownEvent:isDelayedEvent:] (109 samples, 0.59%)</title><rect x="0.0108%" y="533" width="0.5874%" height="15" fill="rgb(234,67,33)" fg:x="2" fg:w="109"/><text x="0.2608%" y="543.50"></text></g><g><title>AppKit`-[NSApplication _handleEvent:] (112 samples, 0.60%)</title><rect x="0.0054%" y="661" width="0.6036%" height="15" fill="rgb(247,98,35)" fg:x="1" fg:w="112"/><text x="0.2554%" y="671.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app::send_event (112 samples, 0.60%)</title><rect x="0.0054%" y="645" width="0.6036%" height="15" fill="rgb(247,138,52)" fg:x="1" fg:w="112"/><text x="0.2554%" y="655.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_super_unverified (112 samples, 0.60%)</title><rect x="0.0054%" y="629" width="0.6036%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="112"/><text x="0.2554%" y="639.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (112 samples, 0.60%)</title><rect x="0.0054%" y="613" width="0.6036%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="112"/><text x="0.2554%" y="623.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (112 samples, 0.60%)</title><rect x="0.0054%" y="597" width="0.6036%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="112"/><text x="0.2554%" y="607.50"></text></g><g><title>AppKit`-[NSApplication(NSEvent) sendEvent:] (112 samples, 0.60%)</title><rect x="0.0054%" y="581" width="0.6036%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="112"/><text x="0.2554%" y="591.50"></text></g><g><title>AppKit`routeMouseMovedEvent (2 samples, 0.01%)</title><rect x="0.5982%" y="565" width="0.0108%" height="15" fill="rgb(244,35,45)" fg:x="111" fg:w="2"/><text x="0.8482%" y="575.50"></text></g><g><title>AppKit`-[NSWindow(NSEventRouting) sendEvent:] (2 samples, 0.01%)</title><rect x="0.5982%" y="549" width="0.0108%" height="15" fill="rgb(251,115,12)" fg:x="111" fg:w="2"/><text x="0.8482%" y="559.50"></text></g><g><title>AppKit`-[NSWindow(NSEventRouting) _reallySendEvent:isDelayedEvent:] (2 samples, 0.01%)</title><rect x="0.5982%" y="533" width="0.0108%" height="15" fill="rgb(240,54,50)" fg:x="111" fg:w="2"/><text x="0.8482%" y="543.50"></text></g><g><title>AppKit`_routeMouseMovedEvent (2 samples, 0.01%)</title><rect x="0.5982%" y="517" width="0.0108%" height="15" fill="rgb(233,84,52)" fg:x="111" fg:w="2"/><text x="0.8482%" y="527.50"></text></g><g><title>AppKit`-[_NSTrackingAreaAKManager mouseMoved:] (2 samples, 0.01%)</title><rect x="0.5982%" y="501" width="0.0108%" height="15" fill="rgb(207,117,47)" fg:x="111" fg:w="2"/><text x="0.8482%" y="511.50"></text></g><g><title>AppKit`-[_NSTrackingAreaAKManager _updateActiveTrackingAreasForWindowLocation:modifierFlags:] (2 samples, 0.01%)</title><rect x="0.5982%" y="485" width="0.0108%" height="15" fill="rgb(249,43,39)" fg:x="111" fg:w="2"/><text x="0.8482%" y="495.50"></text></g><g><title>HIToolbox`AEProcessAppleEvent (3 samples, 0.02%)</title><rect x="0.6198%" y="629" width="0.0162%" height="15" fill="rgb(209,38,44)" fg:x="115" fg:w="3"/><text x="0.8698%" y="639.50"></text></g><g><title>AE`aeProcessAppleEvent (3 samples, 0.02%)</title><rect x="0.6198%" y="613" width="0.0162%" height="15" fill="rgb(236,212,23)" fg:x="115" fg:w="3"/><text x="0.8698%" y="623.50"></text></g><g><title>AE`0x00000001a4764e18 (3 samples, 0.02%)</title><rect x="0.6198%" y="597" width="0.0162%" height="15" fill="rgb(242,79,21)" fg:x="115" fg:w="3"/><text x="0.8698%" y="607.50"></text></g><g><title>AE`0x00000001a4764ec4 (3 samples, 0.02%)</title><rect x="0.6198%" y="581" width="0.0162%" height="15" fill="rgb(211,96,35)" fg:x="115" fg:w="3"/><text x="0.8698%" y="591.50"></text></g><g><title>Foundation`_NSAppleEventManagerGenericHandler (3 samples, 0.02%)</title><rect x="0.6198%" y="565" width="0.0162%" height="15" fill="rgb(253,215,40)" fg:x="115" fg:w="3"/><text x="0.8698%" y="575.50"></text></g><g><title>Foundation`-[NSAppleEventManager dispatchRawAppleEvent:withRawReply:handlerRefCon:] (3 samples, 0.02%)</title><rect x="0.6198%" y="549" width="0.0162%" height="15" fill="rgb(211,81,21)" fg:x="115" fg:w="3"/><text x="0.8698%" y="559.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleCoreEvent:withReplyEvent:] (3 samples, 0.02%)</title><rect x="0.6198%" y="533" width="0.0162%" height="15" fill="rgb(208,190,38)" fg:x="115" fg:w="3"/><text x="0.8698%" y="543.50"></text></g><g><title>AppKit`-[NSApplication(NSAppleEventHandling) _handleAEOpenEvent:] (3 samples, 0.02%)</title><rect x="0.6198%" y="517" width="0.0162%" height="15" fill="rgb(235,213,38)" fg:x="115" fg:w="3"/><text x="0.8698%" y="527.50"></text></g><g><title>AppKit`-[NSApplication _sendFinishLaunchingNotification] (3 samples, 0.02%)</title><rect x="0.6198%" y="501" width="0.0162%" height="15" fill="rgb(237,122,38)" fg:x="115" fg:w="3"/><text x="0.8698%" y="511.50"></text></g><g><title>AppKit`-[NSApplication _postDidFinishNotification] (3 samples, 0.02%)</title><rect x="0.6198%" y="485" width="0.0162%" height="15" fill="rgb(244,218,35)" fg:x="115" fg:w="3"/><text x="0.8698%" y="495.50"></text></g><g><title>Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] (3 samples, 0.02%)</title><rect x="0.6198%" y="469" width="0.0162%" height="15" fill="rgb(240,68,47)" fg:x="115" fg:w="3"/><text x="0.8698%" y="479.50"></text></g><g><title>CoreFoundation`_CFXNotificationPost (3 samples, 0.02%)</title><rect x="0.6198%" y="453" width="0.0162%" height="15" fill="rgb(210,16,53)" fg:x="115" fg:w="3"/><text x="0.8698%" y="463.50"></text></g><g><title>CoreFoundation`_CFXRegistrationPost (3 samples, 0.02%)</title><rect x="0.6198%" y="437" width="0.0162%" height="15" fill="rgb(235,124,12)" fg:x="115" fg:w="3"/><text x="0.8698%" y="447.50"></text></g><g><title>CoreFoundation`___CFXRegistrationPost_block_invoke (3 samples, 0.02%)</title><rect x="0.6198%" y="421" width="0.0162%" height="15" fill="rgb(224,169,11)" fg:x="115" fg:w="3"/><text x="0.8698%" y="431.50"></text></g><g><title>CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ (3 samples, 0.02%)</title><rect x="0.6198%" y="405" width="0.0162%" height="15" fill="rgb(250,166,2)" fg:x="115" fg:w="3"/><text x="0.8698%" y="415.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app_delegate::did_finish_launching (3 samples, 0.02%)</title><rect x="0.6198%" y="389" width="0.0162%" height="15" fill="rgb(242,216,29)" fg:x="115" fg:w="3"/><text x="0.8698%" y="399.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app_state::AppState::launched (3 samples, 0.02%)</title><rect x="0.6198%" y="373" width="0.0162%" height="15" fill="rgb(230,116,27)" fg:x="115" fg:w="3"/><text x="0.8698%" y="383.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (3 samples, 0.02%)</title><rect x="0.6198%" y="357" width="0.0162%" height="15" fill="rgb(228,99,48)" fg:x="115" fg:w="3"/><text x="0.8698%" y="367.50"></text></g><g><title>rust-eyetracking`&lt;*mut objc::runtime::Object as cocoa::appkit::NSMenu&gt;::addItem_ (2 samples, 0.01%)</title><rect x="0.6252%" y="341" width="0.0108%" height="15" fill="rgb(253,11,6)" fg:x="116" fg:w="2"/><text x="0.8752%" y="351.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="0.6252%" y="325" width="0.0108%" height="15" fill="rgb(247,143,39)" fg:x="116" fg:w="2"/><text x="0.8752%" y="335.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (2 samples, 0.01%)</title><rect x="0.6252%" y="309" width="0.0108%" height="15" fill="rgb(236,97,10)" fg:x="116" fg:w="2"/><text x="0.8752%" y="319.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (2 samples, 0.01%)</title><rect x="0.6252%" y="293" width="0.0108%" height="15" fill="rgb(233,208,19)" fg:x="116" fg:w="2"/><text x="0.8752%" y="303.50"></text></g><g><title>AppKit`-[NSMenu insertItem:atIndex:] (2 samples, 0.01%)</title><rect x="0.6252%" y="277" width="0.0108%" height="15" fill="rgb(216,164,2)" fg:x="116" fg:w="2"/><text x="0.8752%" y="287.50"></text></g><g><title>Foundation`-[NSNotificationCenter postNotificationName:object:userInfo:] (2 samples, 0.01%)</title><rect x="0.6252%" y="261" width="0.0108%" height="15" fill="rgb(220,129,5)" fg:x="116" fg:w="2"/><text x="0.8752%" y="271.50"></text></g><g><title>CoreFoundation`_CFXNotificationPost (2 samples, 0.01%)</title><rect x="0.6252%" y="245" width="0.0108%" height="15" fill="rgb(242,17,10)" fg:x="116" fg:w="2"/><text x="0.8752%" y="255.50"></text></g><g><title>CoreFoundation`_CFXRegistrationPost (2 samples, 0.01%)</title><rect x="0.6252%" y="229" width="0.0108%" height="15" fill="rgb(242,107,0)" fg:x="116" fg:w="2"/><text x="0.8752%" y="239.50"></text></g><g><title>CoreFoundation`___CFXRegistrationPost_block_invoke (2 samples, 0.01%)</title><rect x="0.6252%" y="213" width="0.0108%" height="15" fill="rgb(251,28,31)" fg:x="116" fg:w="2"/><text x="0.8752%" y="223.50"></text></g><g><title>CoreFoundation`__CFNOTIFICATIONCENTER_IS_CALLING_OUT_TO_AN_OBSERVER__ (2 samples, 0.01%)</title><rect x="0.6252%" y="197" width="0.0108%" height="15" fill="rgb(233,223,10)" fg:x="116" fg:w="2"/><text x="0.8752%" y="207.50"></text></g><g><title>AppKit`___NSMenuUpdateKeyboardAwareShortcuts_block_invoke_3 (2 samples, 0.01%)</title><rect x="0.6252%" y="181" width="0.0108%" height="15" fill="rgb(215,21,27)" fg:x="116" fg:w="2"/><text x="0.8752%" y="191.50"></text></g><g><title>AppKit`-[NSMenuItem(NSLocalizedKeyboardShortcuts) shouldMenuItemBeUpdatedDueToNotification] (2 samples, 0.01%)</title><rect x="0.6252%" y="165" width="0.0108%" height="15" fill="rgb(232,23,21)" fg:x="116" fg:w="2"/><text x="0.8752%" y="175.50"></text></g><g><title>AppKit`-[NSMenuItem(NSLocalizedKeyboardShortcuts) menuItemOrSubmenuNeedsShortcutLocalization] (2 samples, 0.01%)</title><rect x="0.6252%" y="149" width="0.0108%" height="15" fill="rgb(244,5,23)" fg:x="116" fg:w="2"/><text x="0.8752%" y="159.50"></text></g><g><title>Foundation`_NSFaultInObject (2 samples, 0.01%)</title><rect x="0.6252%" y="133" width="0.0108%" height="15" fill="rgb(226,81,46)" fg:x="116" fg:w="2"/><text x="0.8752%" y="143.50"></text></g><g><title>AppKit`-[NSExtraMIData init] (2 samples, 0.01%)</title><rect x="0.6252%" y="117" width="0.0108%" height="15" fill="rgb(247,70,30)" fg:x="116" fg:w="2"/><text x="0.8752%" y="127.50"></text></g><g><title>AppKit`+[NSImage imageNamed:] (2 samples, 0.01%)</title><rect x="0.6252%" y="101" width="0.0108%" height="15" fill="rgb(212,68,19)" fg:x="116" fg:w="2"/><text x="0.8752%" y="111.50"></text></g><g><title>AppKit`+[NSImage _systemImageNamed:] (2 samples, 0.01%)</title><rect x="0.6252%" y="85" width="0.0108%" height="15" fill="rgb(240,187,13)" fg:x="116" fg:w="2"/><text x="0.8752%" y="95.50"></text></g><g><title>HIToolbox`AcquireEventFromQueue (3 samples, 0.02%)</title><rect x="0.6359%" y="597" width="0.0162%" height="15" fill="rgb(223,113,26)" fg:x="118" fg:w="3"/><text x="0.8859%" y="607.50"></text></g><g><title>HIToolbox`_NotifyEventLoopObservers (3 samples, 0.02%)</title><rect x="0.6359%" y="581" width="0.0162%" height="15" fill="rgb(206,192,2)" fg:x="118" fg:w="3"/><text x="0.8859%" y="591.50"></text></g><g><title>HIToolbox`HIApplication::EventObserver (3 samples, 0.02%)</title><rect x="0.6359%" y="565" width="0.0162%" height="15" fill="rgb(241,108,4)" fg:x="118" fg:w="3"/><text x="0.8859%" y="575.50"></text></g><g><title>HIToolbox`HIApplication::HandleActivated (3 samples, 0.02%)</title><rect x="0.6359%" y="549" width="0.0162%" height="15" fill="rgb(247,173,49)" fg:x="118" fg:w="3"/><text x="0.8859%" y="559.50"></text></g><g><title>HIToolbox`SetMenuBarObscured (3 samples, 0.02%)</title><rect x="0.6359%" y="533" width="0.0162%" height="15" fill="rgb(224,114,35)" fg:x="118" fg:w="3"/><text x="0.8859%" y="543.50"></text></g><g><title>HIToolbox`MenuBarInstance::Show (3 samples, 0.02%)</title><rect x="0.6359%" y="517" width="0.0162%" height="15" fill="rgb(245,159,27)" fg:x="118" fg:w="3"/><text x="0.8859%" y="527.50"></text></g><g><title>HIToolbox`MenuBarInstance::SetBoundsAndUpdateResolution (3 samples, 0.02%)</title><rect x="0.6359%" y="501" width="0.0162%" height="15" fill="rgb(245,172,44)" fg:x="118" fg:w="3"/><text x="0.8859%" y="511.50"></text></g><g><title>HIToolbox`MenuBarInstance::ForEachWindowDo(unsigned char, bool  (3 samples, 0.02%)</title><rect x="0.6359%" y="485" width="0.0162%" height="15" fill="rgb(236,23,11)" fg:x="118" fg:w="3"/><text x="0.8859%" y="495.50"></text></g><g><title>HIToolbox`MBWindows::GetWindowOnDisplay (3 samples, 0.02%)</title><rect x="0.6359%" y="469" width="0.0162%" height="15" fill="rgb(205,117,38)" fg:x="118" fg:w="3"/><text x="0.8859%" y="479.50"></text></g><g><title>HIToolbox`ShowHide (3 samples, 0.02%)</title><rect x="0.6359%" y="453" width="0.0162%" height="15" fill="rgb(237,72,25)" fg:x="118" fg:w="3"/><text x="0.8859%" y="463.50"></text></g><g><title>HIToolbox`_ShowHideWindows (3 samples, 0.02%)</title><rect x="0.6359%" y="437" width="0.0162%" height="15" fill="rgb(244,70,9)" fg:x="118" fg:w="3"/><text x="0.8859%" y="447.50"></text></g><g><title>HIToolbox`WindowData::PrepareForVisibility (3 samples, 0.02%)</title><rect x="0.6359%" y="421" width="0.0162%" height="15" fill="rgb(217,125,39)" fg:x="118" fg:w="3"/><text x="0.8859%" y="431.50"></text></g><g><title>HIToolbox`HIView::DrawComposited (3 samples, 0.02%)</title><rect x="0.6359%" y="405" width="0.0162%" height="15" fill="rgb(235,36,10)" fg:x="118" fg:w="3"/><text x="0.8859%" y="415.50"></text></g><g><title>HIToolbox`HIView::RecursiveDrawComposited (3 samples, 0.02%)</title><rect x="0.6359%" y="389" width="0.0162%" height="15" fill="rgb(251,123,47)" fg:x="118" fg:w="3"/><text x="0.8859%" y="399.50"></text></g><g><title>HIToolbox`HIView::RecursiveDrawComposited (3 samples, 0.02%)</title><rect x="0.6359%" y="373" width="0.0162%" height="15" fill="rgb(221,13,13)" fg:x="118" fg:w="3"/><text x="0.8859%" y="383.50"></text></g><g><title>HIToolbox`HIView::SendDraw (3 samples, 0.02%)</title><rect x="0.6359%" y="357" width="0.0162%" height="15" fill="rgb(238,131,9)" fg:x="118" fg:w="3"/><text x="0.8859%" y="367.50"></text></g><g><title>HIToolbox`SendEventToEventTargetWithOptions (3 samples, 0.02%)</title><rect x="0.6359%" y="341" width="0.0162%" height="15" fill="rgb(211,50,8)" fg:x="118" fg:w="3"/><text x="0.8859%" y="351.50"></text></g><g><title>HIToolbox`SendEventToEventTargetInternal(OpaqueEventRef*, OpaqueEventTargetRef*, HandlerCallRec*) (3 samples, 0.02%)</title><rect x="0.6359%" y="325" width="0.0162%" height="15" fill="rgb(245,182,24)" fg:x="118" fg:w="3"/><text x="0.8859%" y="335.50"></text></g><g><title>HIToolbox`DispatchEventToHandlers(EventTargetRec*, OpaqueEventRef*, HandlerCallRec*) (3 samples, 0.02%)</title><rect x="0.6359%" y="309" width="0.0162%" height="15" fill="rgb(242,14,37)" fg:x="118" fg:w="3"/><text x="0.8859%" y="319.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawingDelegateHandler (3 samples, 0.02%)</title><rect x="0.6359%" y="293" width="0.0162%" height="15" fill="rgb(246,228,12)" fg:x="118" fg:w="3"/><text x="0.8859%" y="303.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawSelf (3 samples, 0.02%)</title><rect x="0.6359%" y="277" width="0.0162%" height="15" fill="rgb(213,55,15)" fg:x="118" fg:w="3"/><text x="0.8859%" y="287.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawIntoWindow (3 samples, 0.02%)</title><rect x="0.6359%" y="261" width="0.0162%" height="15" fill="rgb(209,9,3)" fg:x="118" fg:w="3"/><text x="0.8859%" y="271.50"></text></g><g><title>HIToolbox`HIMenuBarView::DrawOnce (3 samples, 0.02%)</title><rect x="0.6359%" y="245" width="0.0162%" height="15" fill="rgb(230,59,30)" fg:x="118" fg:w="3"/><text x="0.8859%" y="255.50"></text></g><g><title>HIToolbox`HIMenuBarView::EnsureBarLayout (2 samples, 0.01%)</title><rect x="0.6413%" y="229" width="0.0108%" height="15" fill="rgb(209,121,21)" fg:x="119" fg:w="2"/><text x="0.8913%" y="239.50"></text></g><g><title>HIToolbox`HIMenuBarView::MeasureTitleWidths (2 samples, 0.01%)</title><rect x="0.6413%" y="213" width="0.0108%" height="15" fill="rgb(220,109,13)" fg:x="119" fg:w="2"/><text x="0.8913%" y="223.50"></text></g><g><title>HIToolbox`HIMenuBarView::Measure1Title (2 samples, 0.01%)</title><rect x="0.6413%" y="197" width="0.0108%" height="15" fill="rgb(232,18,1)" fg:x="119" fg:w="2"/><text x="0.8913%" y="207.50"></text></g><g><title>HIToolbox`HIThemeGetTextDimensions (2 samples, 0.01%)</title><rect x="0.6413%" y="181" width="0.0108%" height="15" fill="rgb(215,41,42)" fg:x="119" fg:w="2"/><text x="0.8913%" y="191.50"></text></g><g><title>HIToolbox`DataEngine::GetTextDimensions (2 samples, 0.01%)</title><rect x="0.6413%" y="165" width="0.0108%" height="15" fill="rgb(224,123,36)" fg:x="119" fg:w="2"/><text x="0.8913%" y="175.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoBlocks (2 samples, 0.01%)</title><rect x="0.6575%" y="549" width="0.0108%" height="15" fill="rgb(240,125,3)" fg:x="122" fg:w="2"/><text x="0.9075%" y="559.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ (2 samples, 0.01%)</title><rect x="0.6575%" y="533" width="0.0108%" height="15" fill="rgb(205,98,50)" fg:x="122" fg:w="2"/><text x="0.9075%" y="543.50"></text></g><g><title>AppKit`__35-[_NSMenuShortcutUpdater schedule:]_block_invoke (2 samples, 0.01%)</title><rect x="0.6575%" y="517" width="0.0108%" height="15" fill="rgb(205,185,37)" fg:x="122" fg:w="2"/><text x="0.9075%" y="527.50"></text></g><g><title>AppKit`UpdateKeyboardAwareShortcutsForCurrentInputSource (2 samples, 0.01%)</title><rect x="0.6575%" y="501" width="0.0108%" height="15" fill="rgb(238,207,15)" fg:x="122" fg:w="2"/><text x="0.9075%" y="511.50"></text></g><g><title>QuartzCore`CA::Layer::commit_if_needed(CA::Transaction*, void  (2 samples, 0.01%)</title><rect x="0.6791%" y="453" width="0.0108%" height="15" fill="rgb(213,199,42)" fg:x="126" fg:w="2"/><text x="0.9291%" y="463.50"></text></g><g><title>QuartzCore`CA::Layer::commit_if_needed(CA::Transaction*, void  (2 samples, 0.01%)</title><rect x="0.6791%" y="437" width="0.0108%" height="15" fill="rgb(235,201,11)" fg:x="126" fg:w="2"/><text x="0.9291%" y="447.50"></text></g><g><title>QuartzCore`CA::Layer::commit_if_needed(CA::Transaction*, void  (2 samples, 0.01%)</title><rect x="0.6791%" y="421" width="0.0108%" height="15" fill="rgb(207,46,11)" fg:x="126" fg:w="2"/><text x="0.9291%" y="431.50"></text></g><g><title>QuartzCore`CA::Layer::commit_if_needed(CA::Transaction*, void  (2 samples, 0.01%)</title><rect x="0.6791%" y="405" width="0.0108%" height="15" fill="rgb(241,35,35)" fg:x="126" fg:w="2"/><text x="0.9291%" y="415.50"></text></g><g><title>QuartzCore`CA::Layer::commit_if_needed(CA::Transaction*, void  (2 samples, 0.01%)</title><rect x="0.6791%" y="389" width="0.0108%" height="15" fill="rgb(243,32,47)" fg:x="126" fg:w="2"/><text x="0.9291%" y="399.50"></text></g><g><title>QuartzCore`CA::Layer::display_if_needed (2 samples, 0.01%)</title><rect x="0.6898%" y="453" width="0.0108%" height="15" fill="rgb(247,202,23)" fg:x="128" fg:w="2"/><text x="0.9398%" y="463.50"></text></g><g><title>QuartzCore`CA::Context::commit_transaction (5 samples, 0.03%)</title><rect x="0.6791%" y="469" width="0.0269%" height="15" fill="rgb(219,102,11)" fg:x="126" fg:w="5"/><text x="0.9291%" y="479.50"></text></g><g><title>AppKit`___NSRunLoopObserverCreateWithHandler_block_invoke (9 samples, 0.05%)</title><rect x="0.6737%" y="517" width="0.0485%" height="15" fill="rgb(243,110,44)" fg:x="125" fg:w="9"/><text x="0.9237%" y="527.50"></text></g><g><title>AppKit`__62+[CATransaction(NSCATransaction) NS_setFlushesWithDisplayLink]_block_invoke (8 samples, 0.04%)</title><rect x="0.6791%" y="501" width="0.0431%" height="15" fill="rgb(222,74,54)" fg:x="126" fg:w="8"/><text x="0.9291%" y="511.50"></text></g><g><title>QuartzCore`CA::Transaction::commit (8 samples, 0.04%)</title><rect x="0.6791%" y="485" width="0.0431%" height="15" fill="rgb(216,99,12)" fg:x="126" fg:w="8"/><text x="0.9291%" y="495.50"></text></g><g><title>QuartzCore`CA::Transaction::run_commit_handlers (3 samples, 0.02%)</title><rect x="0.7060%" y="469" width="0.0162%" height="15" fill="rgb(226,22,26)" fg:x="131" fg:w="3"/><text x="0.9560%" y="479.50"></text></g><g><title>AppKit`NSDisplayCycleFlush (3 samples, 0.02%)</title><rect x="0.7060%" y="453" width="0.0162%" height="15" fill="rgb(217,163,10)" fg:x="131" fg:w="3"/><text x="0.9560%" y="463.50"></text></g><g><title>AppKit`NSDisplayCycleObserverInvoke (3 samples, 0.02%)</title><rect x="0.7060%" y="437" width="0.0162%" height="15" fill="rgb(213,25,53)" fg:x="131" fg:w="3"/><text x="0.9560%" y="447.50"></text></g><g><title>AppKit`__NSWindowGetDisplayCycleObserverForUpdateStructuralRegions_block_invoke (2 samples, 0.01%)</title><rect x="0.7114%" y="421" width="0.0108%" height="15" fill="rgb(252,105,26)" fg:x="132" fg:w="2"/><text x="0.9614%" y="431.50"></text></g><g><title>AppKit`-[_NSTrackingAreaAKManager displayCycleUpdateStructuralRegions] (2 samples, 0.01%)</title><rect x="0.7114%" y="405" width="0.0108%" height="15" fill="rgb(220,39,43)" fg:x="132" fg:w="2"/><text x="0.9614%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (33 samples, 0.18%)</title><rect x="0.7330%" y="405" width="0.1778%" height="15" fill="rgb(229,68,48)" fg:x="136" fg:w="33"/><text x="0.9830%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (33 samples, 0.18%)</title><rect x="0.7330%" y="389" width="0.1778%" height="15" fill="rgb(252,8,32)" fg:x="136" fg:w="33"/><text x="0.9830%" y="399.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::GpuContext::new (2 samples, 0.01%)</title><rect x="0.9162%" y="389" width="0.0108%" height="15" fill="rgb(223,20,43)" fg:x="170" fg:w="2"/><text x="1.1662%" y="399.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateTitleProperties:animated:] (3 samples, 0.02%)</title><rect x="0.9378%" y="197" width="0.0162%" height="15" fill="rgb(229,81,49)" fg:x="174" fg:w="3"/><text x="1.1878%" y="207.50"></text></g><g><title>AppKit`-[NSThemeFrame setRepresentedURL:] (2 samples, 0.01%)</title><rect x="0.9431%" y="181" width="0.0108%" height="15" fill="rgb(236,28,36)" fg:x="175" fg:w="2"/><text x="1.1931%" y="191.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (2 samples, 0.01%)</title><rect x="0.9431%" y="165" width="0.0108%" height="15" fill="rgb(249,185,26)" fg:x="175" fg:w="2"/><text x="1.1931%" y="175.50"></text></g><g><title>AppKit`-[NSWindow showsFullScreenButton] (2 samples, 0.01%)</title><rect x="0.9431%" y="149" width="0.0108%" height="15" fill="rgb(249,174,33)" fg:x="175" fg:w="2"/><text x="1.1931%" y="159.50"></text></g><g><title>AppKit`-[NSWindow(NSFullScreen) canEnterFullScreenMode] (2 samples, 0.01%)</title><rect x="0.9431%" y="133" width="0.0108%" height="15" fill="rgb(233,201,37)" fg:x="175" fg:w="2"/><text x="1.1931%" y="143.50"></text></g><g><title>AppKit`-[NSWindow _effectiveCollectionBehavior] (2 samples, 0.01%)</title><rect x="0.9431%" y="117" width="0.0108%" height="15" fill="rgb(221,78,26)" fg:x="175" fg:w="2"/><text x="1.1931%" y="127.50"></text></g><g><title>AppKit`-[NSWindow _cacheAndSetPropertiesForCollectionBehavior:] (2 samples, 0.01%)</title><rect x="0.9431%" y="101" width="0.0108%" height="15" fill="rgb(250,127,30)" fg:x="175" fg:w="2"/><text x="1.1931%" y="111.50"></text></g><g><title>AppKit`-[NSThemeFrame _updateButtons] (2 samples, 0.01%)</title><rect x="0.9431%" y="85" width="0.0108%" height="15" fill="rgb(230,49,44)" fg:x="175" fg:w="2"/><text x="1.1931%" y="95.50"></text></g><g><title>AppKit`-[NSFrameView initWithFrame:styleMask:owner:] (4 samples, 0.02%)</title><rect x="0.9378%" y="213" width="0.0216%" height="15" fill="rgb(229,67,23)" fg:x="174" fg:w="4"/><text x="1.1878%" y="223.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::ContextHandle::create_window (11 samples, 0.06%)</title><rect x="0.9108%" y="405" width="0.0593%" height="15" fill="rgb(249,83,47)" fg:x="169" fg:w="11"/><text x="1.1608%" y="415.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::Window::new (7 samples, 0.04%)</title><rect x="0.9324%" y="389" width="0.0377%" height="15" fill="rgb(215,43,3)" fg:x="173" fg:w="7"/><text x="1.1824%" y="399.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::window::UnownedWindow::new (7 samples, 0.04%)</title><rect x="0.9324%" y="373" width="0.0377%" height="15" fill="rgb(238,154,13)" fg:x="173" fg:w="7"/><text x="1.1824%" y="383.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (7 samples, 0.04%)</title><rect x="0.9324%" y="357" width="0.0377%" height="15" fill="rgb(219,56,2)" fg:x="173" fg:w="7"/><text x="1.1824%" y="367.50"></text></g><g><title>rust-eyetracking`&lt;*mut objc::runtime::Object as cocoa::appkit::NSWindow&gt;::initWithContentRect_styleMask_backing_defer_ (7 samples, 0.04%)</title><rect x="0.9324%" y="341" width="0.0377%" height="15" fill="rgb(233,0,4)" fg:x="173" fg:w="7"/><text x="1.1824%" y="351.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (7 samples, 0.04%)</title><rect x="0.9324%" y="325" width="0.0377%" height="15" fill="rgb(235,30,7)" fg:x="173" fg:w="7"/><text x="1.1824%" y="335.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (7 samples, 0.04%)</title><rect x="0.9324%" y="309" width="0.0377%" height="15" fill="rgb(250,79,13)" fg:x="173" fg:w="7"/><text x="1.1824%" y="319.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (7 samples, 0.04%)</title><rect x="0.9324%" y="293" width="0.0377%" height="15" fill="rgb(211,146,34)" fg:x="173" fg:w="7"/><text x="1.1824%" y="303.50"></text></g><g><title>AppKit`-[NSWindow initWithContentRect:styleMask:backing:defer:] (7 samples, 0.04%)</title><rect x="0.9324%" y="277" width="0.0377%" height="15" fill="rgb(228,22,38)" fg:x="173" fg:w="7"/><text x="1.1824%" y="287.50"></text></g><g><title>AppKit`-[NSWindow _initContent:styleMask:backing:defer:contentView:] (7 samples, 0.04%)</title><rect x="0.9324%" y="261" width="0.0377%" height="15" fill="rgb(235,168,5)" fg:x="173" fg:w="7"/><text x="1.1824%" y="271.50"></text></g><g><title>AppKit`-[NSWindow _commonInitFrame:styleMask:backing:defer:] (6 samples, 0.03%)</title><rect x="0.9378%" y="245" width="0.0323%" height="15" fill="rgb(221,155,16)" fg:x="174" fg:w="6"/><text x="1.1878%" y="255.50"></text></g><g><title>AppKit`-[NSThemeFrame initWithFrame:styleMask:owner:] (6 samples, 0.03%)</title><rect x="0.9378%" y="229" width="0.0323%" height="15" fill="rgb(215,215,53)" fg:x="174" fg:w="6"/><text x="1.1878%" y="239.50"></text></g><g><title>AppKit`-[NSThemeFrame _floatTitlebarAndToolbarFromInit:] (2 samples, 0.01%)</title><rect x="0.9593%" y="213" width="0.0108%" height="15" fill="rgb(223,4,10)" fg:x="178" fg:w="2"/><text x="1.2093%" y="223.50"></text></g><g><title>AppKit`+[NSAnimationContext runAnimationGroup:] (2 samples, 0.01%)</title><rect x="0.9593%" y="197" width="0.0108%" height="15" fill="rgb(234,103,6)" fg:x="178" fg:w="2"/><text x="1.2093%" y="207.50"></text></g><g><title>AppKit`__49-[NSThemeFrame _floatTitlebarAndToolbarFromInit:]_block_invoke (2 samples, 0.01%)</title><rect x="0.9593%" y="181" width="0.0108%" height="15" fill="rgb(227,97,0)" fg:x="178" fg:w="2"/><text x="1.2093%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.15%)</title><rect x="0.9755%" y="373" width="0.1509%" height="15" fill="rgb(234,150,53)" fg:x="181" fg:w="28"/><text x="1.2255%" y="383.50"></text></g><g><title>AGXMetalG14X`AGX::BlitUSCStateLoader&lt;AGX::G14X::Encoders, AGX::G14X::Classes&gt;::emitComputeProgramVariantArguments (2 samples, 0.01%)</title><rect x="1.1318%" y="229" width="0.0108%" height="15" fill="rgb(228,201,54)" fg:x="210" fg:w="2"/><text x="1.3818%" y="239.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (3 samples, 0.02%)</title><rect x="1.1318%" y="293" width="0.0162%" height="15" fill="rgb(222,22,37)" fg:x="210" fg:w="3"/><text x="1.3818%" y="303.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (3 samples, 0.02%)</title><rect x="1.1318%" y="277" width="0.0162%" height="15" fill="rgb(237,53,32)" fg:x="210" fg:w="3"/><text x="1.3818%" y="287.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyBlitContext copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:] (3 samples, 0.02%)</title><rect x="1.1318%" y="261" width="0.0162%" height="15" fill="rgb(233,25,53)" fg:x="210" fg:w="3"/><text x="1.3818%" y="271.50"></text></g><g><title>AGXMetalG14X`AGX::BlitDispatchContext&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses&gt;::blitCDMBuffer (3 samples, 0.02%)</title><rect x="1.1318%" y="245" width="0.0162%" height="15" fill="rgb(210,40,34)" fg:x="210" fg:w="3"/><text x="1.3818%" y="255.50"></text></g><g><title>rust-eyetracking`metal::encoder::BlitCommandEncoderRef::copy_from_buffer (4 samples, 0.02%)</title><rect x="1.1318%" y="325" width="0.0216%" height="15" fill="rgb(241,220,44)" fg:x="210" fg:w="4"/><text x="1.3818%" y="335.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (4 samples, 0.02%)</title><rect x="1.1318%" y="309" width="0.0216%" height="15" fill="rgb(235,28,35)" fg:x="210" fg:w="4"/><text x="1.3818%" y="319.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::buffer_unmap (7 samples, 0.04%)</title><rect x="1.1318%" y="357" width="0.0377%" height="15" fill="rgb(210,56,17)" fg:x="210" fg:w="7"/><text x="1.3818%" y="367.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::buffer_unmap (7 samples, 0.04%)</title><rect x="1.1318%" y="341" width="0.0377%" height="15" fill="rgb(224,130,29)" fg:x="210" fg:w="7"/><text x="1.3818%" y="351.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_encoding (3 samples, 0.02%)</title><rect x="1.1533%" y="325" width="0.0162%" height="15" fill="rgb(235,212,8)" fg:x="214" fg:w="3"/><text x="1.4033%" y="335.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (2 samples, 0.01%)</title><rect x="1.1587%" y="309" width="0.0108%" height="15" fill="rgb(223,33,50)" fg:x="215" fg:w="2"/><text x="1.4087%" y="319.50"></text></g><g><title>rust-eyetracking`metal::commandqueue::CommandQueueRef::new_command_buffer_with_unretained_references (2 samples, 0.01%)</title><rect x="1.1587%" y="293" width="0.0108%" height="15" fill="rgb(219,149,13)" fg:x="215" fg:w="2"/><text x="1.4087%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (141 samples, 0.76%)</title><rect x="1.1695%" y="341" width="0.7599%" height="15" fill="rgb(250,156,29)" fg:x="217" fg:w="141"/><text x="1.4195%" y="351.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer initWithDevice:pointer:length:alignment:options:sysMemSize:gpuAddress:args:argsSize:deallocator:] (3 samples, 0.02%)</title><rect x="1.9348%" y="181" width="0.0162%" height="15" fill="rgb(216,193,19)" fg:x="359" fg:w="3"/><text x="2.1848%" y="191.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource initWithDevice:remoteStorageResource:options:args:argsSize:] (3 samples, 0.02%)</title><rect x="1.9348%" y="165" width="0.0162%" height="15" fill="rgb(216,135,14)" fg:x="359" fg:w="3"/><text x="2.1848%" y="175.50"></text></g><g><title>IOGPU`IOGPUResourceCreate (3 samples, 0.02%)</title><rect x="1.9348%" y="149" width="0.0162%" height="15" fill="rgb(241,47,5)" fg:x="359" fg:w="3"/><text x="2.1848%" y="159.50"></text></g><g><title>IOKit`IOConnectCallMethod (3 samples, 0.02%)</title><rect x="1.9348%" y="133" width="0.0162%" height="15" fill="rgb(233,42,35)" fg:x="359" fg:w="3"/><text x="2.1848%" y="143.50"></text></g><g><title>IOKit`io_connect_method (3 samples, 0.02%)</title><rect x="1.9348%" y="117" width="0.0162%" height="15" fill="rgb(231,13,6)" fg:x="359" fg:w="3"/><text x="2.1848%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (3 samples, 0.02%)</title><rect x="1.9348%" y="101" width="0.0162%" height="15" fill="rgb(207,181,40)" fg:x="359" fg:w="3"/><text x="2.1848%" y="111.50"></text></g><g><title>rust-eyetracking`metal::device::DeviceRef::new_buffer (4 samples, 0.02%)</title><rect x="1.9348%" y="293" width="0.0216%" height="15" fill="rgb(254,173,49)" fg:x="359" fg:w="4"/><text x="2.1848%" y="303.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (4 samples, 0.02%)</title><rect x="1.9348%" y="277" width="0.0216%" height="15" fill="rgb(221,1,38)" fg:x="359" fg:w="4"/><text x="2.1848%" y="287.50"></text></g><g><title>rust-eyetracking`objc_exception::try (4 samples, 0.02%)</title><rect x="1.9348%" y="261" width="0.0216%" height="15" fill="rgb(206,124,46)" fg:x="359" fg:w="4"/><text x="2.1848%" y="271.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (4 samples, 0.02%)</title><rect x="1.9348%" y="245" width="0.0216%" height="15" fill="rgb(249,21,11)" fg:x="359" fg:w="4"/><text x="2.1848%" y="255.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (4 samples, 0.02%)</title><rect x="1.9348%" y="229" width="0.0216%" height="15" fill="rgb(222,201,40)" fg:x="359" fg:w="4"/><text x="2.1848%" y="239.50"></text></g><g><title>AGXMetalG14X`-[AGXBuffer initWithDevice:length:alignment:options:isSuballocDisabled:pinnedGPULocation:] (4 samples, 0.02%)</title><rect x="1.9348%" y="213" width="0.0216%" height="15" fill="rgb(235,61,29)" fg:x="359" fg:w="4"/><text x="2.1848%" y="223.50"></text></g><g><title>AGXMetalG14X`-[AGXBuffer(Internal) initWithDevice:length:alignment:options:isSuballocDisabled:resourceInArgs:pinnedGPULocation:] (4 samples, 0.02%)</title><rect x="1.9348%" y="197" width="0.0216%" height="15" fill="rgb(219,207,3)" fg:x="359" fg:w="4"/><text x="2.1848%" y="207.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::Device&lt;A&gt;::create_buffer (7 samples, 0.04%)</title><rect x="1.9348%" y="325" width="0.0377%" height="15" fill="rgb(222,56,46)" fg:x="359" fg:w="7"/><text x="2.1848%" y="335.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::create_buffer (7 samples, 0.04%)</title><rect x="1.9348%" y="309" width="0.0377%" height="15" fill="rgb(239,76,54)" fg:x="359" fg:w="7"/><text x="2.1848%" y="319.50"></text></g><g><title>rust-eyetracking`metal::resource::ResourceRef::set_label (3 samples, 0.02%)</title><rect x="1.9563%" y="293" width="0.0162%" height="15" fill="rgb(231,124,27)" fg:x="363" fg:w="3"/><text x="2.2063%" y="303.50"></text></g><g><title>rust-eyetracking`metal::nsstring_from_str (3 samples, 0.02%)</title><rect x="1.9563%" y="277" width="0.0162%" height="15" fill="rgb(249,195,6)" fg:x="363" fg:w="3"/><text x="2.2063%" y="287.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="1.9617%" y="261" width="0.0108%" height="15" fill="rgb(237,174,47)" fg:x="364" fg:w="2"/><text x="2.2117%" y="271.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::device_create_buffer (150 samples, 0.81%)</title><rect x="1.1695%" y="357" width="0.8084%" height="15" fill="rgb(206,201,31)" fg:x="217" fg:w="150"/><text x="1.4195%" y="367.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_buffer (9 samples, 0.05%)</title><rect x="1.9294%" y="341" width="0.0485%" height="15" fill="rgb(231,57,52)" fg:x="358" fg:w="9"/><text x="2.1794%" y="351.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (159 samples, 0.86%)</title><rect x="1.1264%" y="373" width="0.8569%" height="15" fill="rgb(248,177,22)" fg:x="209" fg:w="159"/><text x="1.3764%" y="383.50"></text></g><g><title>rust-eyetracking`show_image::backend::window::WindowHandle::set_image (190 samples, 1.02%)</title><rect x="0.9701%" y="405" width="1.0240%" height="15" fill="rgb(215,211,37)" fg:x="180" fg:w="190"/><text x="1.2201%" y="415.50"></text></g><g><title>rust-eyetracking`show_image::backend::util::gpu_image::GpuImage::from_data (189 samples, 1.02%)</title><rect x="0.9755%" y="389" width="1.0186%" height="15" fill="rgb(241,128,51)" fg:x="181" fg:w="189"/><text x="1.2255%" y="399.50"></text></g><g><title>rust-eyetracking`wgpu::Device::create_bind_group (2 samples, 0.01%)</title><rect x="1.9833%" y="373" width="0.0108%" height="15" fill="rgb(227,165,31)" fg:x="368" fg:w="2"/><text x="2.2333%" y="383.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::device_create_bind_group (2 samples, 0.01%)</title><rect x="1.9833%" y="357" width="0.0108%" height="15" fill="rgb(228,167,24)" fg:x="368" fg:w="2"/><text x="2.2333%" y="367.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_bind_group (2 samples, 0.01%)</title><rect x="1.9833%" y="341" width="0.0108%" height="15" fill="rgb(228,143,12)" fg:x="368" fg:w="2"/><text x="2.2333%" y="351.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::Device&lt;A&gt;::create_bind_group (2 samples, 0.01%)</title><rect x="1.9833%" y="325" width="0.0108%" height="15" fill="rgb(249,149,8)" fg:x="368" fg:w="2"/><text x="2.2333%" y="335.50"></text></g><g><title>rust-eyetracking`core::ops::function::FnOnce::call_once{{vtable.shim}} (236 samples, 1.27%)</title><rect x="0.7276%" y="421" width="1.2719%" height="15" fill="rgb(243,35,44)" fg:x="135" fg:w="236"/><text x="0.9776%" y="431.50"></text></g><g><title>rust-eyetracking`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_user_events (240 samples, 1.29%)</title><rect x="0.7276%" y="469" width="1.2935%" height="15" fill="rgb(246,89,9)" fg:x="135" fg:w="240"/><text x="0.9776%" y="479.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::run::_{{closure}} (240 samples, 1.29%)</title><rect x="0.7276%" y="453" width="1.2935%" height="15" fill="rgb(233,213,13)" fg:x="135" fg:w="240"/><text x="0.9776%" y="463.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::handle_event (240 samples, 1.29%)</title><rect x="0.7276%" y="437" width="1.2935%" height="15" fill="rgb(233,141,41)" fg:x="135" fg:w="240"/><text x="0.9776%" y="447.50"></text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;lock_api::mutex::Mutex&lt;parking_lot::raw_mutex::RawMutex,wgpu::MapContext&gt;&gt; (4 samples, 0.02%)</title><rect x="1.9995%" y="421" width="0.0216%" height="15" fill="rgb(239,167,4)" fg:x="371" fg:w="4"/><text x="2.2495%" y="431.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::resize_window (4 samples, 0.02%)</title><rect x="1.9995%" y="405" width="0.0216%" height="15" fill="rgb(209,217,16)" fg:x="371" fg:w="4"/><text x="2.2495%" y="415.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::select_power_preference (4 samples, 0.02%)</title><rect x="1.9995%" y="389" width="0.0216%" height="15" fill="rgb(219,88,35)" fg:x="371" fg:w="4"/><text x="2.2495%" y="399.50"></text></g><g><title>rust-eyetracking`std::sys::unix::thread_local_dtor::register_dtor (4 samples, 0.02%)</title><rect x="1.9995%" y="373" width="0.0216%" height="15" fill="rgb(220,193,23)" fg:x="371" fg:w="4"/><text x="2.2495%" y="383.50"></text></g><g><title>rust-eyetracking`&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (4 samples, 0.02%)</title><rect x="1.9995%" y="357" width="0.0216%" height="15" fill="rgb(230,90,52)" fg:x="371" fg:w="4"/><text x="2.2495%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.02%)</title><rect x="2.0049%" y="341" width="0.0162%" height="15" fill="rgb(252,106,19)" fg:x="372" fg:w="3"/><text x="2.2549%" y="351.50"></text></g><g><title>rust-eyetracking`metal::encoder::RenderCommandEncoderRef::draw_primitives (2 samples, 0.01%)</title><rect x="2.0318%" y="357" width="0.0108%" height="15" fill="rgb(206,74,20)" fg:x="377" fg:w="2"/><text x="2.2818%" y="367.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="2.0318%" y="341" width="0.0108%" height="15" fill="rgb(230,138,44)" fg:x="377" fg:w="2"/><text x="2.2818%" y="351.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (2 samples, 0.01%)</title><rect x="2.0318%" y="325" width="0.0108%" height="15" fill="rgb(235,182,43)" fg:x="377" fg:w="2"/><text x="2.2818%" y="335.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (2 samples, 0.01%)</title><rect x="2.0318%" y="309" width="0.0108%" height="15" fill="rgb(242,16,51)" fg:x="377" fg:w="2"/><text x="2.2818%" y="319.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyRenderContext drawPrimitives:vertexStart:vertexCount:] (2 samples, 0.01%)</title><rect x="2.0318%" y="293" width="0.0108%" height="15" fill="rgb(248,9,4)" fg:x="377" fg:w="2"/><text x="2.2818%" y="303.50"></text></g><g><title>rust-eyetracking`metal::commandbuffer::CommandBufferRef::new_render_command_encoder (3 samples, 0.02%)</title><rect x="2.0534%" y="309" width="0.0162%" height="15" fill="rgb(210,31,22)" fg:x="381" fg:w="3"/><text x="2.3034%" y="319.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (3 samples, 0.02%)</title><rect x="2.0534%" y="293" width="0.0162%" height="15" fill="rgb(239,54,39)" fg:x="381" fg:w="3"/><text x="2.3034%" y="303.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (3 samples, 0.02%)</title><rect x="2.0534%" y="277" width="0.0162%" height="15" fill="rgb(230,99,41)" fg:x="381" fg:w="3"/><text x="2.3034%" y="287.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (3 samples, 0.02%)</title><rect x="2.0534%" y="261" width="0.0162%" height="15" fill="rgb(253,106,12)" fg:x="381" fg:w="3"/><text x="2.3034%" y="271.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandBuffer renderCommandEncoderWithDescriptor:] (3 samples, 0.02%)</title><rect x="2.0534%" y="245" width="0.0162%" height="15" fill="rgb(213,46,41)" fg:x="381" fg:w="3"/><text x="2.3034%" y="255.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyRenderContext initWithCommandBuffer:descriptor:subEncoderIndex:framebuffer:] (3 samples, 0.02%)</title><rect x="2.0534%" y="229" width="0.0162%" height="15" fill="rgb(215,133,35)" fg:x="381" fg:w="3"/><text x="2.3034%" y="239.50"></text></g><g><title>AGXMetalG14X`AGX::FramebufferGen3_3&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses&gt;::FramebufferGen3_3 (2 samples, 0.01%)</title><rect x="2.0587%" y="213" width="0.0108%" height="15" fill="rgb(213,28,5)" fg:x="382" fg:w="2"/><text x="2.3087%" y="223.50"></text></g><g><title>AGXMetalG14X`AGX::Framebuffer&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses&gt;::Framebuffer (2 samples, 0.01%)</title><rect x="2.0587%" y="197" width="0.0108%" height="15" fill="rgb(215,77,49)" fg:x="382" fg:w="2"/><text x="2.3087%" y="207.50"></text></g><g><title>rust-eyetracking`wgpu_core::command::render::RenderPassInfo&lt;A&gt;::start (5 samples, 0.03%)</title><rect x="2.0480%" y="357" width="0.0269%" height="15" fill="rgb(248,100,22)" fg:x="380" fg:w="5"/><text x="2.2980%" y="367.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_render_pass (4 samples, 0.02%)</title><rect x="2.0534%" y="341" width="0.0216%" height="15" fill="rgb(208,67,9)" fg:x="381" fg:w="4"/><text x="2.3034%" y="351.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (4 samples, 0.02%)</title><rect x="2.0534%" y="325" width="0.0216%" height="15" fill="rgb(219,133,21)" fg:x="381" fg:w="4"/><text x="2.3034%" y="335.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_encoding (3 samples, 0.02%)</title><rect x="2.0803%" y="357" width="0.0162%" height="15" fill="rgb(246,46,29)" fg:x="386" fg:w="3"/><text x="2.3303%" y="367.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (2 samples, 0.01%)</title><rect x="2.0857%" y="341" width="0.0108%" height="15" fill="rgb(246,185,52)" fg:x="387" fg:w="2"/><text x="2.3357%" y="351.50"></text></g><g><title>rust-eyetracking`metal::commandqueue::CommandQueueRef::new_command_buffer_with_unretained_references (2 samples, 0.01%)</title><rect x="2.0857%" y="325" width="0.0108%" height="15" fill="rgb(252,136,11)" fg:x="387" fg:w="2"/><text x="2.3357%" y="335.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="2.0857%" y="309" width="0.0108%" height="15" fill="rgb(219,138,53)" fg:x="387" fg:w="2"/><text x="2.3357%" y="319.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (2 samples, 0.01%)</title><rect x="2.0857%" y="293" width="0.0108%" height="15" fill="rgb(211,51,23)" fg:x="387" fg:w="2"/><text x="2.3357%" y="303.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (2 samples, 0.01%)</title><rect x="2.0857%" y="277" width="0.0108%" height="15" fill="rgb(247,221,28)" fg:x="387" fg:w="2"/><text x="2.3357%" y="287.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandQueue commandBufferWithUnretainedReferences] (2 samples, 0.01%)</title><rect x="2.0857%" y="261" width="0.0108%" height="15" fill="rgb(251,222,45)" fg:x="387" fg:w="2"/><text x="2.3357%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="2.0857%" y="245" width="0.0108%" height="15" fill="rgb(217,162,53)" fg:x="387" fg:w="2"/><text x="2.3357%" y="255.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::render_pass (17 samples, 0.09%)</title><rect x="2.0264%" y="405" width="0.0916%" height="15" fill="rgb(229,93,14)" fg:x="376" fg:w="17"/><text x="2.2764%" y="415.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_end_render_pass (17 samples, 0.09%)</title><rect x="2.0264%" y="389" width="0.0916%" height="15" fill="rgb(209,67,49)" fg:x="376" fg:w="17"/><text x="2.2764%" y="399.50"></text></g><g><title>rust-eyetracking`wgpu_core::command::render::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_run_render_pass_impl (17 samples, 0.09%)</title><rect x="2.0264%" y="373" width="0.0916%" height="15" fill="rgb(213,87,29)" fg:x="376" fg:w="17"/><text x="2.2764%" y="383.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::set_render_pipeline (3 samples, 0.02%)</title><rect x="2.1019%" y="357" width="0.0162%" height="15" fill="rgb(205,151,52)" fg:x="390" fg:w="3"/><text x="2.3519%" y="367.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::Device as wgpu::util::device::DeviceExt&gt;::create_buffer_init (2 samples, 0.01%)</title><rect x="2.1180%" y="389" width="0.0108%" height="15" fill="rgb(253,215,39)" fg:x="393" fg:w="2"/><text x="2.3680%" y="399.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::device_create_buffer (2 samples, 0.01%)</title><rect x="2.1180%" y="373" width="0.0108%" height="15" fill="rgb(221,220,41)" fg:x="393" fg:w="2"/><text x="2.3680%" y="383.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::device_create_buffer (2 samples, 0.01%)</title><rect x="2.1180%" y="357" width="0.0108%" height="15" fill="rgb(218,133,21)" fg:x="393" fg:w="2"/><text x="2.3680%" y="367.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::command_encoder_copy_buffer_to_buffer (2 samples, 0.01%)</title><rect x="2.1288%" y="389" width="0.0108%" height="15" fill="rgb(221,193,43)" fg:x="395" fg:w="2"/><text x="2.3788%" y="399.50"></text></g><g><title>rust-eyetracking`wgpu_core::command::transfer::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::command_encoder_copy_buffer_to_buffer (2 samples, 0.01%)</title><rect x="2.1288%" y="373" width="0.0108%" height="15" fill="rgb(240,128,52)" fg:x="395" fg:w="2"/><text x="2.3788%" y="383.50"></text></g><g><title>rust-eyetracking`metal::encoder::BlitCommandEncoderRef::copy_from_buffer (2 samples, 0.01%)</title><rect x="2.1288%" y="357" width="0.0108%" height="15" fill="rgb(253,114,12)" fg:x="395" fg:w="2"/><text x="2.3788%" y="367.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="2.1288%" y="341" width="0.0108%" height="15" fill="rgb(215,223,47)" fg:x="395" fg:w="2"/><text x="2.3788%" y="351.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (2 samples, 0.01%)</title><rect x="2.1288%" y="325" width="0.0108%" height="15" fill="rgb(248,225,23)" fg:x="395" fg:w="2"/><text x="2.3788%" y="335.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (2 samples, 0.01%)</title><rect x="2.1288%" y="309" width="0.0108%" height="15" fill="rgb(250,108,0)" fg:x="395" fg:w="2"/><text x="2.3788%" y="319.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyBlitContext copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:] (2 samples, 0.01%)</title><rect x="2.1288%" y="293" width="0.0108%" height="15" fill="rgb(228,208,7)" fg:x="395" fg:w="2"/><text x="2.3788%" y="303.50"></text></g><g><title>AGXMetalG14X`AGX::BlitDispatchContext&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses&gt;::blitCDMBuffer (2 samples, 0.01%)</title><rect x="2.1288%" y="277" width="0.0108%" height="15" fill="rgb(244,45,10)" fg:x="395" fg:w="2"/><text x="2.3788%" y="287.50"></text></g><g><title>AGXMetalG14X`AGX::BlitDispatchContext&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses&gt;::beginComputePass (2 samples, 0.01%)</title><rect x="2.1288%" y="261" width="0.0108%" height="15" fill="rgb(207,125,25)" fg:x="395" fg:w="2"/><text x="2.3788%" y="271.50"></text></g><g><title>AGXMetalG14X`AGX::ContextCommon&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses&gt;::newCommand (2 samples, 0.01%)</title><rect x="2.1288%" y="245" width="0.0108%" height="15" fill="rgb(210,195,18)" fg:x="395" fg:w="2"/><text x="2.3788%" y="255.50"></text></g><g><title>rust-eyetracking`show_image::backend::util::uniforms_buffer::UniformsBuffer&lt;T&gt;::update_from (5 samples, 0.03%)</title><rect x="2.1180%" y="405" width="0.0269%" height="15" fill="rgb(249,80,12)" fg:x="393" fg:w="5"/><text x="2.3680%" y="415.50"></text></g><g><title>rust-eyetracking`metal::commandbuffer::CommandBufferRef::commit (2 samples, 0.01%)</title><rect x="2.1827%" y="341" width="0.0108%" height="15" fill="rgb(221,65,9)" fg:x="405" fg:w="2"/><text x="2.4327%" y="351.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="2.1827%" y="325" width="0.0108%" height="15" fill="rgb(235,49,36)" fg:x="405" fg:w="2"/><text x="2.4327%" y="335.50"></text></g><g><title>rust-eyetracking`&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::submit (6 samples, 0.03%)</title><rect x="2.1719%" y="373" width="0.0323%" height="15" fill="rgb(225,32,20)" fg:x="403" fg:w="6"/><text x="2.4219%" y="383.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (5 samples, 0.03%)</title><rect x="2.1773%" y="357" width="0.0269%" height="15" fill="rgb(215,141,46)" fg:x="404" fg:w="5"/><text x="2.4273%" y="367.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandBuffer dealloc] (2 samples, 0.01%)</title><rect x="2.2043%" y="293" width="0.0108%" height="15" fill="rgb(250,160,47)" fg:x="409" fg:w="2"/><text x="2.4543%" y="303.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer dealloc] (2 samples, 0.01%)</title><rect x="2.2043%" y="277" width="0.0108%" height="15" fill="rgb(216,222,40)" fg:x="409" fg:w="2"/><text x="2.4543%" y="287.50"></text></g><g><title>Metal`-[_MTLCommandBuffer dealloc] (2 samples, 0.01%)</title><rect x="2.2043%" y="261" width="0.0108%" height="15" fill="rgb(234,217,39)" fg:x="409" fg:w="2"/><text x="2.4543%" y="271.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::life::LifetimeTracker&lt;A&gt;::triage_submissions (3 samples, 0.02%)</title><rect x="2.2043%" y="357" width="0.0162%" height="15" fill="rgb(207,178,40)" fg:x="409" fg:w="3"/><text x="2.4543%" y="367.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (3 samples, 0.02%)</title><rect x="2.2043%" y="341" width="0.0162%" height="15" fill="rgb(221,136,13)" fg:x="409" fg:w="3"/><text x="2.4543%" y="351.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (3 samples, 0.02%)</title><rect x="2.2043%" y="325" width="0.0162%" height="15" fill="rgb(249,199,10)" fg:x="409" fg:w="3"/><text x="2.4543%" y="335.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (3 samples, 0.02%)</title><rect x="2.2043%" y="309" width="0.0162%" height="15" fill="rgb(249,222,13)" fg:x="409" fg:w="3"/><text x="2.4543%" y="319.50"></text></g><g><title>CoreFoundation`_CFRelease (10 samples, 0.05%)</title><rect x="2.2258%" y="213" width="0.0539%" height="15" fill="rgb(244,185,38)" fg:x="413" fg:w="10"/><text x="2.4758%" y="223.50"></text></g><g><title>IOGPU`ioGPUResourceFinalize (9 samples, 0.05%)</title><rect x="2.2312%" y="197" width="0.0485%" height="15" fill="rgb(236,202,9)" fg:x="414" fg:w="9"/><text x="2.4812%" y="207.50"></text></g><g><title>IOKit`IOConnectCallMethod (9 samples, 0.05%)</title><rect x="2.2312%" y="181" width="0.0485%" height="15" fill="rgb(250,229,37)" fg:x="414" fg:w="9"/><text x="2.4812%" y="191.50"></text></g><g><title>IOKit`io_connect_method (9 samples, 0.05%)</title><rect x="2.2312%" y="165" width="0.0485%" height="15" fill="rgb(206,174,23)" fg:x="414" fg:w="9"/><text x="2.4812%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (9 samples, 0.05%)</title><rect x="2.2312%" y="149" width="0.0485%" height="15" fill="rgb(211,33,43)" fg:x="414" fg:w="9"/><text x="2.4812%" y="159.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::life::NonReferencedResources&lt;A&gt;::clean (12 samples, 0.06%)</title><rect x="2.2204%" y="357" width="0.0647%" height="15" fill="rgb(245,58,50)" fg:x="412" fg:w="12"/><text x="2.4704%" y="367.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::device::_&lt;impl wgpu_hal::Device&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Device&gt;::destroy_buffer (12 samples, 0.06%)</title><rect x="2.2204%" y="341" width="0.0647%" height="15" fill="rgb(244,68,36)" fg:x="412" fg:w="12"/><text x="2.4704%" y="351.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (12 samples, 0.06%)</title><rect x="2.2204%" y="325" width="0.0647%" height="15" fill="rgb(232,229,15)" fg:x="412" fg:w="12"/><text x="2.4704%" y="335.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (12 samples, 0.06%)</title><rect x="2.2204%" y="309" width="0.0647%" height="15" fill="rgb(254,30,23)" fg:x="412" fg:w="12"/><text x="2.4704%" y="319.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (12 samples, 0.06%)</title><rect x="2.2204%" y="293" width="0.0647%" height="15" fill="rgb(235,160,14)" fg:x="412" fg:w="12"/><text x="2.4704%" y="303.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyBuffer dealloc] (12 samples, 0.06%)</title><rect x="2.2204%" y="277" width="0.0647%" height="15" fill="rgb(212,155,44)" fg:x="412" fg:w="12"/><text x="2.4704%" y="287.50"></text></g><g><title>AGXMetalG14X`-[AGXBuffer dealloc] (12 samples, 0.06%)</title><rect x="2.2204%" y="261" width="0.0647%" height="15" fill="rgb(226,2,50)" fg:x="412" fg:w="12"/><text x="2.4704%" y="271.50"></text></g><g><title>IOGPU`-[IOGPUMetalBuffer dealloc] (12 samples, 0.06%)</title><rect x="2.2204%" y="245" width="0.0647%" height="15" fill="rgb(234,177,6)" fg:x="412" fg:w="12"/><text x="2.4704%" y="255.50"></text></g><g><title>IOGPU`-[IOGPUMetalResource dealloc] (12 samples, 0.06%)</title><rect x="2.2204%" y="229" width="0.0647%" height="15" fill="rgb(217,24,9)" fg:x="412" fg:w="12"/><text x="2.4704%" y="239.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::Device&lt;A&gt;::maintain (16 samples, 0.09%)</title><rect x="2.2043%" y="373" width="0.0862%" height="15" fill="rgb(220,13,46)" fg:x="409" fg:w="16"/><text x="2.4543%" y="383.50"></text></g><g><title>rust-eyetracking`wgpu::Queue::submit (26 samples, 0.14%)</title><rect x="2.1611%" y="405" width="0.1401%" height="15" fill="rgb(239,221,27)" fg:x="401" fg:w="26"/><text x="2.4111%" y="415.50"></text></g><g><title>rust-eyetracking`wgpu_core::device::queue::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::queue_submit (26 samples, 0.14%)</title><rect x="2.1611%" y="389" width="0.1401%" height="15" fill="rgb(222,198,25)" fg:x="401" fg:w="26"/><text x="2.4111%" y="399.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::command::_&lt;impl wgpu_hal::CommandEncoder&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::CommandEncoder&gt;::begin_encoding (2 samples, 0.01%)</title><rect x="2.2905%" y="373" width="0.0108%" height="15" fill="rgb(211,99,13)" fg:x="425" fg:w="2"/><text x="2.5405%" y="383.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (2 samples, 0.01%)</title><rect x="2.2905%" y="357" width="0.0108%" height="15" fill="rgb(232,111,31)" fg:x="425" fg:w="2"/><text x="2.5405%" y="367.50"></text></g><g><title>rust-eyetracking`metal::commandqueue::CommandQueueRef::new_command_buffer_with_unretained_references (2 samples, 0.01%)</title><rect x="2.2905%" y="341" width="0.0108%" height="15" fill="rgb(245,82,37)" fg:x="425" fg:w="2"/><text x="2.5405%" y="351.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (2 samples, 0.01%)</title><rect x="2.2905%" y="325" width="0.0108%" height="15" fill="rgb(227,149,46)" fg:x="425" fg:w="2"/><text x="2.5405%" y="335.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (2 samples, 0.01%)</title><rect x="2.2905%" y="309" width="0.0108%" height="15" fill="rgb(218,36,50)" fg:x="425" fg:w="2"/><text x="2.5405%" y="319.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (2 samples, 0.01%)</title><rect x="2.2905%" y="293" width="0.0108%" height="15" fill="rgb(226,80,48)" fg:x="425" fg:w="2"/><text x="2.5405%" y="303.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandQueue commandBufferWithUnretainedReferences] (2 samples, 0.01%)</title><rect x="2.2905%" y="277" width="0.0108%" height="15" fill="rgb(238,224,15)" fg:x="425" fg:w="2"/><text x="2.5405%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="2.2905%" y="261" width="0.0108%" height="15" fill="rgb(241,136,10)" fg:x="425" fg:w="2"/><text x="2.5405%" y="271.50"></text></g><g><title>rust-eyetracking`metal::MetalLayerRef::next_drawable (3 samples, 0.02%)</title><rect x="2.3228%" y="325" width="0.0162%" height="15" fill="rgb(208,32,45)" fg:x="431" fg:w="3"/><text x="2.5728%" y="335.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (3 samples, 0.02%)</title><rect x="2.3228%" y="309" width="0.0162%" height="15" fill="rgb(207,135,9)" fg:x="431" fg:w="3"/><text x="2.5728%" y="319.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (3 samples, 0.02%)</title><rect x="2.3228%" y="293" width="0.0162%" height="15" fill="rgb(206,86,44)" fg:x="431" fg:w="3"/><text x="2.5728%" y="303.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (3 samples, 0.02%)</title><rect x="2.3228%" y="277" width="0.0162%" height="15" fill="rgb(245,177,15)" fg:x="431" fg:w="3"/><text x="2.5728%" y="287.50"></text></g><g><title>QuartzCore`-[CAMetalLayer nextDrawable] (3 samples, 0.02%)</title><rect x="2.3228%" y="261" width="0.0162%" height="15" fill="rgb(206,64,50)" fg:x="431" fg:w="3"/><text x="2.5728%" y="271.50"></text></g><g><title>rust-eyetracking`wgpu::Surface::get_current_texture (8 samples, 0.04%)</title><rect x="2.3013%" y="405" width="0.0431%" height="15" fill="rgb(234,36,40)" fg:x="427" fg:w="8"/><text x="2.5513%" y="415.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::surface_get_current_texture (8 samples, 0.04%)</title><rect x="2.3013%" y="389" width="0.0431%" height="15" fill="rgb(213,64,8)" fg:x="427" fg:w="8"/><text x="2.5513%" y="399.50"></text></g><g><title>rust-eyetracking`wgpu_core::present::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::surface_get_current_texture (7 samples, 0.04%)</title><rect x="2.3067%" y="373" width="0.0377%" height="15" fill="rgb(210,75,36)" fg:x="428" fg:w="7"/><text x="2.5567%" y="383.50"></text></g><g><title>rust-eyetracking`wgpu_hal::metal::surface::_&lt;impl wgpu_hal::Surface&lt;wgpu_hal::metal::Api&gt; for wgpu_hal::metal::Surface&gt;::acquire_texture (4 samples, 0.02%)</title><rect x="2.3228%" y="357" width="0.0216%" height="15" fill="rgb(229,88,21)" fg:x="431" fg:w="4"/><text x="2.5728%" y="367.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (4 samples, 0.02%)</title><rect x="2.3228%" y="341" width="0.0216%" height="15" fill="rgb(252,204,47)" fg:x="431" fg:w="4"/><text x="2.5728%" y="351.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ (312 samples, 1.68%)</title><rect x="0.6737%" y="533" width="1.6815%" height="15" fill="rgb(208,77,27)" fg:x="125" fg:w="312"/><text x="0.9237%" y="543.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::observer::control_flow_end_handler (302 samples, 1.63%)</title><rect x="0.7276%" y="517" width="1.6276%" height="15" fill="rgb(221,76,26)" fg:x="135" fg:w="302"/><text x="0.9776%" y="527.50"></text></g><g><title>rust-eyetracking`std::panicking::try (302 samples, 1.63%)</title><rect x="0.7276%" y="501" width="1.6276%" height="15" fill="rgb(225,139,18)" fg:x="135" fg:w="302"/><text x="0.9776%" y="511.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app_state::AppState::cleared (302 samples, 1.63%)</title><rect x="0.7276%" y="485" width="1.6276%" height="15" fill="rgb(230,137,11)" fg:x="135" fg:w="302"/><text x="0.9776%" y="495.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::app_state::Handler::handle_nonuser_event (62 samples, 0.33%)</title><rect x="2.0210%" y="469" width="0.3341%" height="15" fill="rgb(212,28,1)" fg:x="375" fg:w="62"/><text x="2.2710%" y="479.50"></text></g><g><title>rust-eyetracking`&lt;winit::platform_impl::platform::app_state::EventLoopHandler&lt;T&gt; as winit::platform_impl::platform::app_state::EventHandler&gt;::handle_nonuser_event (62 samples, 0.33%)</title><rect x="2.0210%" y="453" width="0.3341%" height="15" fill="rgb(248,164,17)" fg:x="375" fg:w="62"/><text x="2.2710%" y="463.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::run::_{{closure}} (62 samples, 0.33%)</title><rect x="2.0210%" y="437" width="0.3341%" height="15" fill="rgb(222,171,42)" fg:x="375" fg:w="62"/><text x="2.2710%" y="447.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::handle_event (62 samples, 0.33%)</title><rect x="2.0210%" y="421" width="0.3341%" height="15" fill="rgb(243,84,45)" fg:x="375" fg:w="62"/><text x="2.2710%" y="431.50"></text></g><g><title>rust-eyetracking`wgpu::SurfaceTexture::present (2 samples, 0.01%)</title><rect x="2.3444%" y="405" width="0.0108%" height="15" fill="rgb(252,49,23)" fg:x="435" fg:w="2"/><text x="2.5944%" y="415.50"></text></g><g><title>rust-eyetracking`&lt;wgpu::backend::direct::Context as wgpu::Context&gt;::surface_present (2 samples, 0.01%)</title><rect x="2.3444%" y="389" width="0.0108%" height="15" fill="rgb(215,19,7)" fg:x="435" fg:w="2"/><text x="2.5944%" y="399.50"></text></g><g><title>rust-eyetracking`wgpu_core::present::_&lt;impl wgpu_core::hub::Global&lt;G&gt;&gt;::surface_present (2 samples, 0.01%)</title><rect x="2.3444%" y="373" width="0.0108%" height="15" fill="rgb(238,81,41)" fg:x="435" fg:w="2"/><text x="2.5944%" y="383.50"></text></g><g><title>rust-eyetracking`&lt;wgpu_hal::metal::Queue as wgpu_hal::Queue&lt;wgpu_hal::metal::Api&gt;&gt;::present (2 samples, 0.01%)</title><rect x="2.3444%" y="357" width="0.0108%" height="15" fill="rgb(210,199,37)" fg:x="435" fg:w="2"/><text x="2.5944%" y="367.50"></text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (2 samples, 0.01%)</title><rect x="2.3444%" y="341" width="0.0108%" height="15" fill="rgb(244,192,49)" fg:x="435" fg:w="2"/><text x="2.5944%" y="351.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoObservers (315 samples, 1.70%)</title><rect x="0.6683%" y="549" width="1.6977%" height="15" fill="rgb(226,211,11)" fg:x="124" fg:w="315"/><text x="0.9183%" y="559.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoTimers (2 samples, 0.01%)</title><rect x="2.3659%" y="549" width="0.0108%" height="15" fill="rgb(236,162,54)" fg:x="439" fg:w="2"/><text x="2.6159%" y="559.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoTimer (2 samples, 0.01%)</title><rect x="2.3659%" y="533" width="0.0108%" height="15" fill="rgb(220,229,9)" fg:x="439" fg:w="2"/><text x="2.6159%" y="543.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ (2 samples, 0.01%)</title><rect x="2.3659%" y="517" width="0.0108%" height="15" fill="rgb(250,87,22)" fg:x="439" fg:w="2"/><text x="2.6159%" y="527.50"></text></g><g><title>HIToolbox`CallMyActivateTSMDocument (2 samples, 0.01%)</title><rect x="2.3659%" y="501" width="0.0108%" height="15" fill="rgb(239,43,17)" fg:x="439" fg:w="2"/><text x="2.6159%" y="511.50"></text></g><g><title>HIToolbox`MyActivateTSMDocument (2 samples, 0.01%)</title><rect x="2.3659%" y="485" width="0.0108%" height="15" fill="rgb(231,177,25)" fg:x="439" fg:w="2"/><text x="2.6159%" y="495.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (323 samples, 1.74%)</title><rect x="0.6521%" y="581" width="1.7408%" height="15" fill="rgb(219,179,1)" fg:x="121" fg:w="323"/><text x="0.9021%" y="591.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (323 samples, 1.74%)</title><rect x="0.6521%" y="565" width="1.7408%" height="15" fill="rgb(238,219,53)" fg:x="121" fg:w="323"/><text x="0.9021%" y="575.50"></text></g><g><title>AppKit`-[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] (332 samples, 1.79%)</title><rect x="0.6090%" y="661" width="1.7893%" height="15" fill="rgb(232,167,36)" fg:x="113" fg:w="332"/><text x="0.8590%" y="671.50">A..</text></g><g><title>AppKit`_DPSNextEvent (330 samples, 1.78%)</title><rect x="0.6198%" y="645" width="1.7785%" height="15" fill="rgb(244,19,51)" fg:x="115" fg:w="330"/><text x="0.8698%" y="655.50">A..</text></g><g><title>HIToolbox`_BlockUntilNextEventMatchingListInModeWithFilter (327 samples, 1.76%)</title><rect x="0.6359%" y="629" width="1.7623%" height="15" fill="rgb(224,6,22)" fg:x="118" fg:w="327"/><text x="0.8859%" y="639.50"></text></g><g><title>HIToolbox`ReceiveNextEventCommon (327 samples, 1.76%)</title><rect x="0.6359%" y="613" width="1.7623%" height="15" fill="rgb(224,145,5)" fg:x="118" fg:w="327"/><text x="0.8859%" y="623.50"></text></g><g><title>HIToolbox`RunCurrentEventLoopInMode (324 samples, 1.75%)</title><rect x="0.6521%" y="597" width="1.7462%" height="15" fill="rgb(234,130,49)" fg:x="121" fg:w="324"/><text x="0.9021%" y="607.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::run (446 samples, 2.40%)</title><rect x="0.0000%" y="773" width="2.4037%" height="15" fill="rgb(254,6,2)" fg:x="0" fg:w="446"/><text x="0.2500%" y="783.50">ru..</text></g><g><title>rust-eyetracking`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::run (446 samples, 2.40%)</title><rect x="0.0000%" y="757" width="2.4037%" height="15" fill="rgb(208,96,46)" fg:x="0" fg:w="446"/><text x="0.2500%" y="767.50">ru..</text></g><g><title>rust-eyetracking`objc::rc::autorelease::autoreleasepool (446 samples, 2.40%)</title><rect x="0.0000%" y="741" width="2.4037%" height="15" fill="rgb(239,3,39)" fg:x="0" fg:w="446"/><text x="0.2500%" y="751.50">ru..</text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (446 samples, 2.40%)</title><rect x="0.0000%" y="725" width="2.4037%" height="15" fill="rgb(233,210,1)" fg:x="0" fg:w="446"/><text x="0.2500%" y="735.50">ru..</text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (446 samples, 2.40%)</title><rect x="0.0000%" y="709" width="2.4037%" height="15" fill="rgb(244,137,37)" fg:x="0" fg:w="446"/><text x="0.2500%" y="719.50">ru..</text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (446 samples, 2.40%)</title><rect x="0.0000%" y="693" width="2.4037%" height="15" fill="rgb(240,136,2)" fg:x="0" fg:w="446"/><text x="0.2500%" y="703.50">ru..</text></g><g><title>AppKit`-[NSApplication run] (446 samples, 2.40%)</title><rect x="0.0000%" y="677" width="2.4037%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="446"/><text x="0.2500%" y="687.50">Ap..</text></g><g><title>HIToolbox`IsMenuBarVisible (2 samples, 0.01%)</title><rect x="2.4360%" y="613" width="0.0108%" height="15" fill="rgb(218,185,22)" fg:x="452" fg:w="2"/><text x="2.6860%" y="623.50"></text></g><g><title>HIToolbox`GetUserSpaceMenuBar() (2 samples, 0.01%)</title><rect x="2.4360%" y="597" width="0.0108%" height="15" fill="rgb(225,218,4)" fg:x="452" fg:w="2"/><text x="2.6860%" y="607.50"></text></g><g><title>HIToolbox`MenuBarInstance::MenuBarInstance (2 samples, 0.01%)</title><rect x="2.4360%" y="581" width="0.0108%" height="15" fill="rgb(230,182,32)" fg:x="452" fg:w="2"/><text x="2.6860%" y="591.50"></text></g><g><title>HIToolbox`MBWindows::Get (2 samples, 0.01%)</title><rect x="2.4360%" y="565" width="0.0108%" height="15" fill="rgb(242,56,43)" fg:x="452" fg:w="2"/><text x="2.6860%" y="575.50"></text></g><g><title>HIToolbox`MBWindows::MBWindows (2 samples, 0.01%)</title><rect x="2.4360%" y="549" width="0.0108%" height="15" fill="rgb(233,99,24)" fg:x="452" fg:w="2"/><text x="2.6860%" y="559.50"></text></g><g><title>HIToolbox`RegisterForDisplayConfigChangeNotificationsIfNecessary (2 samples, 0.01%)</title><rect x="2.4360%" y="533" width="0.0108%" height="15" fill="rgb(234,209,42)" fg:x="452" fg:w="2"/><text x="2.6860%" y="543.50"></text></g><g><title>HIToolbox`RegisterCallbackInternal(unsigned int, void (*)(unsigned int, void*, void*), unsigned int, void*, unsigned int) (2 samples, 0.01%)</title><rect x="2.4360%" y="517" width="0.0108%" height="15" fill="rgb(227,7,12)" fg:x="452" fg:w="2"/><text x="2.6860%" y="527.50"></text></g><g><title>SkyLight`SLSMainConnectionID (2 samples, 0.01%)</title><rect x="2.4360%" y="501" width="0.0108%" height="15" fill="rgb(245,203,43)" fg:x="452" fg:w="2"/><text x="2.6860%" y="511.50"></text></g><g><title>SkyLight`SLSMainConnection (2 samples, 0.01%)</title><rect x="2.4360%" y="485" width="0.0108%" height="15" fill="rgb(238,205,33)" fg:x="452" fg:w="2"/><text x="2.6860%" y="495.50"></text></g><g><title>dyld`start (455 samples, 2.45%)</title><rect x="0.0000%" y="885" width="2.4522%" height="15" fill="rgb(231,56,7)" fg:x="0" fg:w="455"/><text x="0.2500%" y="895.50">dy..</text></g><g><title>rust-eyetracking`main (455 samples, 2.45%)</title><rect x="0.0000%" y="869" width="2.4522%" height="15" fill="rgb(244,186,29)" fg:x="0" fg:w="455"/><text x="0.2500%" y="879.50">ru..</text></g><g><title>rust-eyetracking`std::rt::lang_start_internal (455 samples, 2.45%)</title><rect x="0.0000%" y="853" width="2.4522%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="455"/><text x="0.2500%" y="863.50">ru..</text></g><g><title>rust-eyetracking`std::rt::lang_start::_{{closure}} (455 samples, 2.45%)</title><rect x="0.0000%" y="837" width="2.4522%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="455"/><text x="0.2500%" y="847.50">ru..</text></g><g><title>rust-eyetracking`std::sys_common::backtrace::__rust_begin_short_backtrace (455 samples, 2.45%)</title><rect x="0.0000%" y="821" width="2.4522%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="455"/><text x="0.2500%" y="831.50">ru..</text></g><g><title>rust-eyetracking`rust_eyetracking::main::main (455 samples, 2.45%)</title><rect x="0.0000%" y="805" width="2.4522%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="455"/><text x="0.2500%" y="815.50">ru..</text></g><g><title>rust-eyetracking`show_image::backend::run_context (455 samples, 2.45%)</title><rect x="0.0000%" y="789" width="2.4522%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="455"/><text x="0.2500%" y="799.50">ru..</text></g><g><title>rust-eyetracking`show_image::backend::initialize_context_or_exit (9 samples, 0.05%)</title><rect x="2.4037%" y="773" width="0.0485%" height="15" fill="rgb(249,139,47)" fg:x="446" fg:w="9"/><text x="2.6537%" y="783.50"></text></g><g><title>rust-eyetracking`show_image::backend::initialize_context (8 samples, 0.04%)</title><rect x="2.4091%" y="757" width="0.0431%" height="15" fill="rgb(244,64,35)" fg:x="447" fg:w="8"/><text x="2.6591%" y="767.50"></text></g><g><title>rust-eyetracking`show_image::backend::context::Context::new (8 samples, 0.04%)</title><rect x="2.4091%" y="741" width="0.0431%" height="15" fill="rgb(216,46,15)" fg:x="447" fg:w="8"/><text x="2.6591%" y="751.50"></text></g><g><title>rust-eyetracking`winit::platform_impl::platform::event_loop::EventLoop&lt;T&gt;::new (8 samples, 0.04%)</title><rect x="2.4091%" y="725" width="0.0431%" height="15" fill="rgb(250,74,19)" fg:x="447" fg:w="8"/><text x="2.6591%" y="735.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (8 samples, 0.04%)</title><rect x="2.4091%" y="709" width="0.0431%" height="15" fill="rgb(249,42,33)" fg:x="447" fg:w="8"/><text x="2.6591%" y="719.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (8 samples, 0.04%)</title><rect x="2.4091%" y="693" width="0.0431%" height="15" fill="rgb(242,149,17)" fg:x="447" fg:w="8"/><text x="2.6591%" y="703.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (8 samples, 0.04%)</title><rect x="2.4091%" y="677" width="0.0431%" height="15" fill="rgb(244,29,21)" fg:x="447" fg:w="8"/><text x="2.6591%" y="687.50"></text></g><g><title>AppKit`+[NSApplication sharedApplication] (8 samples, 0.04%)</title><rect x="2.4091%" y="661" width="0.0431%" height="15" fill="rgb(220,130,37)" fg:x="447" fg:w="8"/><text x="2.6591%" y="671.50"></text></g><g><title>AppKit`-[NSApplication init] (8 samples, 0.04%)</title><rect x="2.4091%" y="645" width="0.0431%" height="15" fill="rgb(211,67,2)" fg:x="447" fg:w="8"/><text x="2.6591%" y="655.50"></text></g><g><title>AppKit`_NSInitializeAppContext (4 samples, 0.02%)</title><rect x="2.4306%" y="629" width="0.0216%" height="15" fill="rgb(235,68,52)" fg:x="451" fg:w="4"/><text x="2.6806%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.03%)</title><rect x="2.4522%" y="885" width="0.0269%" height="15" fill="rgb(246,142,3)" fg:x="455" fg:w="5"/><text x="2.7022%" y="895.50"></text></g><g><title>libsystem_kernel.dylib`__workq_kernreturn (42 samples, 0.23%)</title><rect x="2.5007%" y="869" width="0.2264%" height="15" fill="rgb(241,25,7)" fg:x="464" fg:w="42"/><text x="2.7507%" y="879.50"></text></g><g><title>libdispatch.dylib`_dispatch_kevent_worker_thread (2 samples, 0.01%)</title><rect x="2.7270%" y="853" width="0.0108%" height="15" fill="rgb(242,119,39)" fg:x="506" fg:w="2"/><text x="2.9770%" y="863.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (2 samples, 0.01%)</title><rect x="2.7270%" y="837" width="0.0108%" height="15" fill="rgb(241,98,45)" fg:x="506" fg:w="2"/><text x="2.9770%" y="847.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (2 samples, 0.01%)</title><rect x="2.7270%" y="821" width="0.0108%" height="15" fill="rgb(254,28,30)" fg:x="506" fg:w="2"/><text x="2.9770%" y="831.50"></text></g><g><title>libdispatch.dylib`_dispatch_source_install (2 samples, 0.01%)</title><rect x="2.7270%" y="805" width="0.0108%" height="15" fill="rgb(241,142,54)" fg:x="506" fg:w="2"/><text x="2.9770%" y="815.50"></text></g><g><title>libdispatch.dylib`_dispatch_unote_register_muxed (2 samples, 0.01%)</title><rect x="2.7270%" y="789" width="0.0108%" height="15" fill="rgb(222,85,15)" fg:x="506" fg:w="2"/><text x="2.9770%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_merge (3 samples, 0.02%)</title><rect x="2.7486%" y="837" width="0.0162%" height="15" fill="rgb(210,85,47)" fg:x="510" fg:w="3"/><text x="2.9986%" y="847.50"></text></g><g><title>CoreFoundation`-[NSMutableArray removeObjectsInRange:inArray:range:] (2 samples, 0.01%)</title><rect x="2.7648%" y="757" width="0.0108%" height="15" fill="rgb(224,206,25)" fg:x="513" fg:w="2"/><text x="3.0148%" y="767.50"></text></g><g><title>QuartzCore`invoke_presented_callback(void*) (3 samples, 0.02%)</title><rect x="2.7648%" y="789" width="0.0162%" height="15" fill="rgb(243,201,19)" fg:x="513" fg:w="3"/><text x="3.0148%" y="799.50"></text></g><g><title>QuartzCore`layer_presented(_CAImageQueue*, unsigned int, double, double, void*) (3 samples, 0.02%)</title><rect x="2.7648%" y="773" width="0.0162%" height="15" fill="rgb(236,59,4)" fg:x="513" fg:w="3"/><text x="3.0148%" y="783.50"></text></g><g><title>CoreFoundation`_CFRelease (23 samples, 0.12%)</title><rect x="2.7809%" y="757" width="0.1240%" height="15" fill="rgb(254,179,45)" fg:x="516" fg:w="23"/><text x="3.0309%" y="767.50"></text></g><g><title>CoreMedia`sBufFinalize (23 samples, 0.12%)</title><rect x="2.7809%" y="741" width="0.1240%" height="15" fill="rgb(226,14,10)" fg:x="516" fg:w="23"/><text x="3.0309%" y="751.50"></text></g><g><title>CoreFoundation`_CFRelease (23 samples, 0.12%)</title><rect x="2.7809%" y="725" width="0.1240%" height="15" fill="rgb(244,27,41)" fg:x="516" fg:w="23"/><text x="3.0309%" y="735.50"></text></g><g><title>CoreVideo`CVPixelBuffer::finalize (23 samples, 0.12%)</title><rect x="2.7809%" y="709" width="0.1240%" height="15" fill="rgb(235,35,32)" fg:x="516" fg:w="23"/><text x="3.0309%" y="719.50"></text></g><g><title>CoreVideo`CVPixelBufferBacking::releaseUsage (22 samples, 0.12%)</title><rect x="2.7863%" y="693" width="0.1186%" height="15" fill="rgb(218,68,31)" fg:x="517" fg:w="22"/><text x="3.0363%" y="703.50"></text></g><g><title>IOKit`iokit_user_client_trap (22 samples, 0.12%)</title><rect x="2.7863%" y="677" width="0.1186%" height="15" fill="rgb(207,120,37)" fg:x="517" fg:w="22"/><text x="3.0363%" y="687.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (127 samples, 0.68%)</title><rect x="2.9103%" y="757" width="0.6845%" height="15" fill="rgb(227,98,0)" fg:x="540" fg:w="127"/><text x="3.1603%" y="767.50"></text></g><g><title>AVFCapture`__56-[AVCaptureVideoDataOutput_Tundra _render:sampleBuffer:]_block_invoke (154 samples, 0.83%)</title><rect x="2.7809%" y="773" width="0.8300%" height="15" fill="rgb(207,7,3)" fg:x="516" fg:w="154"/><text x="3.0309%" y="783.50"></text></g><g><title>rust-eyetracking`nokhwa_bindings_macos::internal::CALLBACK_CLASS::_{{closure}}::capture_out_callback (3 samples, 0.02%)</title><rect x="3.5947%" y="757" width="0.0162%" height="15" fill="rgb(206,98,19)" fg:x="667" fg:w="3"/><text x="3.8447%" y="767.50"></text></g><g><title>CoreML`__45-[MLPredictionEvent maybeLogPredictionEvent:]_block_invoke (2 samples, 0.01%)</title><rect x="3.6163%" y="773" width="0.0108%" height="15" fill="rgb(217,5,26)" fg:x="671" fg:w="2"/><text x="3.8663%" y="783.50"></text></g><g><title>CoreML`-[MLReporter logMetric:] (2 samples, 0.01%)</title><rect x="3.6163%" y="757" width="0.0108%" height="15" fill="rgb(235,190,38)" fg:x="671" fg:w="2"/><text x="3.8663%" y="767.50"></text></g><g><title>CoreML`-[MLPredictionEvent dictionaryRepresentation] (2 samples, 0.01%)</title><rect x="3.6163%" y="741" width="0.0108%" height="15" fill="rgb(247,86,24)" fg:x="671" fg:w="2"/><text x="3.8663%" y="751.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5f8430 (2 samples, 0.01%)</title><rect x="3.6324%" y="757" width="0.0108%" height="15" fill="rgb(205,101,16)" fg:x="674" fg:w="2"/><text x="3.8824%" y="767.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57a4f0 (2 samples, 0.01%)</title><rect x="3.6324%" y="741" width="0.0108%" height="15" fill="rgb(246,168,33)" fg:x="674" fg:w="2"/><text x="3.8824%" y="751.50"></text></g><g><title>CoreMediaIO`CMIOGraph::UnitPropertyListener (2 samples, 0.01%)</title><rect x="3.6324%" y="725" width="0.0108%" height="15" fill="rgb(231,114,1)" fg:x="674" fg:w="2"/><text x="3.8824%" y="735.50"></text></g><g><title>CoreMediaIO`CMIOGraph::_InitiatePullCallback (2 samples, 0.01%)</title><rect x="3.6324%" y="709" width="0.0108%" height="15" fill="rgb(207,184,53)" fg:x="674" fg:w="2"/><text x="3.8824%" y="719.50"></text></g><g><title>CoreMediaIO`CMIO::Thread::QueuedTWorkThread&lt;unsigned int&gt;::QueueWork (2 samples, 0.01%)</title><rect x="3.6324%" y="693" width="0.0108%" height="15" fill="rgb(224,95,51)" fg:x="674" fg:w="2"/><text x="3.8824%" y="703.50"></text></g><g><title>CoreMedia`FigSemaphoreSignal (2 samples, 0.01%)</title><rect x="3.6324%" y="677" width="0.0108%" height="15" fill="rgb(212,188,45)" fg:x="674" fg:w="2"/><text x="3.8824%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2 samples, 0.01%)</title><rect x="3.6324%" y="661" width="0.0108%" height="15" fill="rgb(223,154,38)" fg:x="674" fg:w="2"/><text x="3.8824%" y="671.50"></text></g><g><title>CoreMediaIO`invocation function for block in CMIO::DAL::CMIOExtension::Stream::ReceivedSampleBuffer (3 samples, 0.02%)</title><rect x="3.6324%" y="773" width="0.0162%" height="15" fill="rgb(251,22,52)" fg:x="674" fg:w="3"/><text x="3.8824%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_call_block_and_release (162 samples, 0.87%)</title><rect x="2.7809%" y="789" width="0.8731%" height="15" fill="rgb(229,209,22)" fg:x="516" fg:w="162"/><text x="3.0309%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (167 samples, 0.90%)</title><rect x="2.7648%" y="805" width="0.9000%" height="15" fill="rgb(234,138,34)" fg:x="513" fg:w="167"/><text x="3.0148%" y="815.50"></text></g><g><title>libsystem_blocks.dylib`_Block_release (2 samples, 0.01%)</title><rect x="3.6540%" y="789" width="0.0108%" height="15" fill="rgb(212,95,11)" fg:x="678" fg:w="2"/><text x="3.9040%" y="799.50"></text></g><g><title>IOKit`__IODataQueueDequeue (2 samples, 0.01%)</title><rect x="3.6648%" y="677" width="0.0108%" height="15" fill="rgb(240,179,47)" fg:x="680" fg:w="2"/><text x="3.9148%" y="687.50"></text></g><g><title>QuartzCore`-[CAMetalDrawable present] (2 samples, 0.01%)</title><rect x="3.6756%" y="629" width="0.0108%" height="15" fill="rgb(240,163,11)" fg:x="682" fg:w="2"/><text x="3.9256%" y="639.50"></text></g><g><title>Metal`-[_MTLCommandBuffer didScheduleWithStartTime:endTime:error:] (3 samples, 0.02%)</title><rect x="3.6756%" y="677" width="0.0162%" height="15" fill="rgb(236,37,12)" fg:x="682" fg:w="3"/><text x="3.9256%" y="687.50"></text></g><g><title>Metal`MTLDispatchListApply (3 samples, 0.02%)</title><rect x="3.6756%" y="661" width="0.0162%" height="15" fill="rgb(232,164,16)" fg:x="682" fg:w="3"/><text x="3.9256%" y="671.50"></text></g><g><title>Metal`__45-[_MTLCommandBuffer presentDrawable:options:]_block_invoke (3 samples, 0.02%)</title><rect x="3.6756%" y="645" width="0.0162%" height="15" fill="rgb(244,205,15)" fg:x="682" fg:w="3"/><text x="3.9256%" y="655.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandBuffer didCompleteWithStartTime:endTime:error:] (3 samples, 0.02%)</title><rect x="3.6917%" y="661" width="0.0162%" height="15" fill="rgb(223,117,47)" fg:x="685" fg:w="3"/><text x="3.9417%" y="671.50"></text></g><g><title>IOGPU`IOGPUMetalCommandBufferStorageDealloc (3 samples, 0.02%)</title><rect x="3.6917%" y="645" width="0.0162%" height="15" fill="rgb(244,107,35)" fg:x="685" fg:w="3"/><text x="3.9417%" y="655.50"></text></g><g><title>Metal`-[_MTLCommandQueue commandBufferDidComplete:startTime:completionTime:error:] (5 samples, 0.03%)</title><rect x="3.6917%" y="677" width="0.0269%" height="15" fill="rgb(205,140,8)" fg:x="685" fg:w="5"/><text x="3.9417%" y="687.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (11 samples, 0.06%)</title><rect x="3.6648%" y="805" width="0.0593%" height="15" fill="rgb(228,84,46)" fg:x="680" fg:w="11"/><text x="3.9148%" y="815.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (11 samples, 0.06%)</title><rect x="3.6648%" y="789" width="0.0593%" height="15" fill="rgb(254,188,9)" fg:x="680" fg:w="11"/><text x="3.9148%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (11 samples, 0.06%)</title><rect x="3.6648%" y="773" width="0.0593%" height="15" fill="rgb(206,112,54)" fg:x="680" fg:w="11"/><text x="3.9148%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (11 samples, 0.06%)</title><rect x="3.6648%" y="757" width="0.0593%" height="15" fill="rgb(216,84,49)" fg:x="680" fg:w="11"/><text x="3.9148%" y="767.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (11 samples, 0.06%)</title><rect x="3.6648%" y="741" width="0.0593%" height="15" fill="rgb(214,194,35)" fg:x="680" fg:w="11"/><text x="3.9148%" y="751.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (11 samples, 0.06%)</title><rect x="3.6648%" y="725" width="0.0593%" height="15" fill="rgb(249,28,3)" fg:x="680" fg:w="11"/><text x="3.9148%" y="735.50"></text></g><g><title>IOGPU`__IOGPUNotificationQueueSetDispatchQueue_block_invoke (11 samples, 0.06%)</title><rect x="3.6648%" y="709" width="0.0593%" height="15" fill="rgb(222,56,52)" fg:x="680" fg:w="11"/><text x="3.9148%" y="719.50"></text></g><g><title>IOGPU`IOGPUNotificationQueueDispatchAvailableCompletionNotifications (11 samples, 0.06%)</title><rect x="3.6648%" y="693" width="0.0593%" height="15" fill="rgb(245,217,50)" fg:x="680" fg:w="11"/><text x="3.9148%" y="703.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="3.7295%" y="725" width="0.0108%" height="15" fill="rgb(213,201,24)" fg:x="692" fg:w="2"/><text x="3.9795%" y="735.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (2 samples, 0.01%)</title><rect x="3.7295%" y="709" width="0.0108%" height="15" fill="rgb(248,116,28)" fg:x="692" fg:w="2"/><text x="3.9795%" y="719.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_node_free (2 samples, 0.01%)</title><rect x="3.7295%" y="693" width="0.0108%" height="15" fill="rgb(219,72,43)" fg:x="692" fg:w="2"/><text x="3.9795%" y="703.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="3.7295%" y="677" width="0.0108%" height="15" fill="rgb(209,138,14)" fg:x="692" fg:w="2"/><text x="3.9795%" y="687.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_dispose (2 samples, 0.01%)</title><rect x="3.7295%" y="661" width="0.0108%" height="15" fill="rgb(222,18,33)" fg:x="692" fg:w="2"/><text x="3.9795%" y="671.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_node_free (2 samples, 0.01%)</title><rect x="3.7295%" y="645" width="0.0108%" height="15" fill="rgb(213,199,7)" fg:x="692" fg:w="2"/><text x="3.9795%" y="655.50"></text></g><g><title>libxpc.dylib`-[OS_xpc_object dealloc] (2 samples, 0.01%)</title><rect x="3.7295%" y="629" width="0.0108%" height="15" fill="rgb(250,110,10)" fg:x="692" fg:w="2"/><text x="3.9795%" y="639.50"></text></g><g><title>libxpc.dylib`_xpc_mach_send_dispose (2 samples, 0.01%)</title><rect x="3.7295%" y="613" width="0.0108%" height="15" fill="rgb(248,123,6)" fg:x="692" fg:w="2"/><text x="3.9795%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_deallocate_trap (2 samples, 0.01%)</title><rect x="3.7295%" y="597" width="0.0108%" height="15" fill="rgb(206,91,31)" fg:x="692" fg:w="2"/><text x="3.9795%" y="607.50"></text></g><g><title>CoreMedia`CMVideoFormatDescriptionCreateForImageBuffer (2 samples, 0.01%)</title><rect x="3.7402%" y="645" width="0.0108%" height="15" fill="rgb(211,154,13)" fg:x="694" fg:w="2"/><text x="3.9902%" y="655.50"></text></g><g><title>CoreMedia`CMSetAttachments (3 samples, 0.02%)</title><rect x="3.7618%" y="613" width="0.0162%" height="15" fill="rgb(225,148,7)" fg:x="698" fg:w="3"/><text x="4.0118%" y="623.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (3 samples, 0.02%)</title><rect x="3.7618%" y="597" width="0.0162%" height="15" fill="rgb(220,160,43)" fg:x="698" fg:w="3"/><text x="4.0118%" y="607.50"></text></g><g><title>CoreMedia`sBufSetAttachment (2 samples, 0.01%)</title><rect x="3.7672%" y="581" width="0.0108%" height="15" fill="rgb(213,52,39)" fg:x="699" fg:w="2"/><text x="4.0172%" y="591.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (2 samples, 0.01%)</title><rect x="3.8103%" y="453" width="0.0108%" height="15" fill="rgb(243,137,7)" fg:x="707" fg:w="2"/><text x="4.0603%" y="463.50"></text></g><g><title>ColorSync`CMMProfile::Usable (4 samples, 0.02%)</title><rect x="3.8049%" y="485" width="0.0216%" height="15" fill="rgb(230,79,13)" fg:x="706" fg:w="4"/><text x="4.0549%" y="495.50"></text></g><g><title>ColorSync`ColorSyncProfileCopyTagSignatures (3 samples, 0.02%)</title><rect x="3.8103%" y="469" width="0.0162%" height="15" fill="rgb(247,105,23)" fg:x="707" fg:w="3"/><text x="4.0603%" y="479.50"></text></g><g><title>ColorSync`AppleCMMValidateProfile (6 samples, 0.03%)</title><rect x="3.8049%" y="517" width="0.0323%" height="15" fill="rgb(223,179,41)" fg:x="706" fg:w="6"/><text x="4.0549%" y="527.50"></text></g><g><title>ColorSync`DoValidateProfile (6 samples, 0.03%)</title><rect x="3.8049%" y="501" width="0.0323%" height="15" fill="rgb(218,9,34)" fg:x="706" fg:w="6"/><text x="4.0549%" y="511.50"></text></g><g><title>ColorSync`ColorSyncProfileCreate (11 samples, 0.06%)</title><rect x="3.8049%" y="549" width="0.0593%" height="15" fill="rgb(222,106,8)" fg:x="706" fg:w="11"/><text x="4.0549%" y="559.50"></text></g><g><title>ColorSync`create (11 samples, 0.06%)</title><rect x="3.8049%" y="533" width="0.0593%" height="15" fill="rgb(211,220,0)" fg:x="706" fg:w="11"/><text x="4.0549%" y="543.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="3.8642%" y="549" width="0.0108%" height="15" fill="rgb(229,52,16)" fg:x="717" fg:w="2"/><text x="4.1142%" y="559.50"></text></g><g><title>ColorSync`colorSyncProfileRetainCount (2 samples, 0.01%)</title><rect x="3.8642%" y="533" width="0.0108%" height="15" fill="rgb(212,155,18)" fg:x="717" fg:w="2"/><text x="4.1142%" y="543.50"></text></g><g><title>ColorSync`colorSyncProfileFinalize (2 samples, 0.01%)</title><rect x="3.8642%" y="517" width="0.0108%" height="15" fill="rgb(242,21,14)" fg:x="717" fg:w="2"/><text x="4.1142%" y="527.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM dealloc] (2 samples, 0.01%)</title><rect x="3.8642%" y="501" width="0.0108%" height="15" fill="rgb(222,19,48)" fg:x="717" fg:w="2"/><text x="4.1142%" y="511.50"></text></g><g><title>CoreFoundation`cow_cleanup (2 samples, 0.01%)</title><rect x="3.8642%" y="485" width="0.0108%" height="15" fill="rgb(232,45,27)" fg:x="717" fg:w="2"/><text x="4.1142%" y="495.50"></text></g><g><title>CoreMedia`FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer (23 samples, 0.12%)</title><rect x="3.7564%" y="645" width="0.1240%" height="15" fill="rgb(249,103,42)" fg:x="697" fg:w="23"/><text x="4.0064%" y="655.50"></text></g><g><title>CoreMedia`sbufAtom_createSampleBufferFromSerializedAtomDataAndSurface (23 samples, 0.12%)</title><rect x="3.7564%" y="629" width="0.1240%" height="15" fill="rgb(246,81,33)" fg:x="697" fg:w="23"/><text x="4.0064%" y="639.50"></text></g><g><title>CoreMedia`sbufAtom_copyDictionaryFromAtom (18 samples, 0.10%)</title><rect x="3.7833%" y="613" width="0.0970%" height="15" fill="rgb(252,33,42)" fg:x="702" fg:w="18"/><text x="4.0333%" y="623.50"></text></g><g><title>CoreMedia`sbufAtom_copyKeyValuePairFromAtom (17 samples, 0.09%)</title><rect x="3.7887%" y="597" width="0.0916%" height="15" fill="rgb(209,212,41)" fg:x="703" fg:w="17"/><text x="4.0387%" y="607.50"></text></g><g><title>CoreMedia`sbufAtom_copyCFTypeFromAtom (15 samples, 0.08%)</title><rect x="3.7995%" y="581" width="0.0808%" height="15" fill="rgb(207,154,6)" fg:x="705" fg:w="15"/><text x="4.0495%" y="591.50"></text></g><g><title>CoreGraphics`CGColorSpaceFromICCDataCacheGetRetained (14 samples, 0.08%)</title><rect x="3.8049%" y="565" width="0.0755%" height="15" fill="rgb(223,64,47)" fg:x="706" fg:w="14"/><text x="4.0549%" y="575.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __setObject:forKey:] (2 samples, 0.01%)</title><rect x="3.9127%" y="565" width="0.0108%" height="15" fill="rgb(211,161,38)" fg:x="726" fg:w="2"/><text x="4.1627%" y="575.50"></text></g><g><title>CoreGraphics`CGColorSpaceFromICCDataCacheGetRetained (3 samples, 0.02%)</title><rect x="3.9127%" y="613" width="0.0162%" height="15" fill="rgb(219,138,40)" fg:x="726" fg:w="3"/><text x="4.1627%" y="623.50"></text></g><g><title>ColorSync`ColorSyncProfileCreate (3 samples, 0.02%)</title><rect x="3.9127%" y="597" width="0.0162%" height="15" fill="rgb(241,228,46)" fg:x="726" fg:w="3"/><text x="4.1627%" y="607.50"></text></g><g><title>ColorSync`create (3 samples, 0.02%)</title><rect x="3.9127%" y="581" width="0.0162%" height="15" fill="rgb(223,209,38)" fg:x="726" fg:w="3"/><text x="4.1627%" y="591.50"></text></g><g><title>CoreVideo`CVPixelBuffer::pullAttachmentsFromIOSurface (8 samples, 0.04%)</title><rect x="3.9019%" y="629" width="0.0431%" height="15" fill="rgb(236,164,45)" fg:x="724" fg:w="8"/><text x="4.1519%" y="639.50"></text></g><g><title>CoreVideo`checkIOSurfaceAndCreatePixelBufferBacking (2 samples, 0.01%)</title><rect x="3.9450%" y="629" width="0.0108%" height="15" fill="rgb(231,15,5)" fg:x="732" fg:w="2"/><text x="4.1950%" y="639.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (2 samples, 0.01%)</title><rect x="3.9774%" y="581" width="0.0108%" height="15" fill="rgb(252,35,15)" fg:x="738" fg:w="2"/><text x="4.2274%" y="591.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (2 samples, 0.01%)</title><rect x="3.9774%" y="565" width="0.0108%" height="15" fill="rgb(248,181,18)" fg:x="738" fg:w="2"/><text x="4.2274%" y="575.50"></text></g><g><title>IOKit`IOCFUnserializeBinary (6 samples, 0.03%)</title><rect x="3.9612%" y="597" width="0.0323%" height="15" fill="rgb(233,39,42)" fg:x="735" fg:w="6"/><text x="4.2112%" y="607.50"></text></g><g><title>IOKit`IOConnectCallMethod (17 samples, 0.09%)</title><rect x="3.9935%" y="597" width="0.0916%" height="15" fill="rgb(238,110,33)" fg:x="741" fg:w="17"/><text x="4.2435%" y="607.50"></text></g><g><title>IOKit`io_connect_method (17 samples, 0.09%)</title><rect x="3.9935%" y="581" width="0.0916%" height="15" fill="rgb(233,195,10)" fg:x="741" fg:w="17"/><text x="4.2435%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (17 samples, 0.09%)</title><rect x="3.9935%" y="565" width="0.0916%" height="15" fill="rgb(254,105,3)" fg:x="741" fg:w="17"/><text x="4.2435%" y="575.50"></text></g><g><title>IOSurface`unserializeReplacementArrayValues (2 samples, 0.01%)</title><rect x="4.0852%" y="469" width="0.0108%" height="15" fill="rgb(221,225,9)" fg:x="758" fg:w="2"/><text x="4.3352%" y="479.50"></text></g><g><title>IOSurface`unserializeReplacementIOKitTypeRef (2 samples, 0.01%)</title><rect x="4.0852%" y="453" width="0.0108%" height="15" fill="rgb(224,227,45)" fg:x="758" fg:w="2"/><text x="4.3352%" y="463.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (2 samples, 0.01%)</title><rect x="4.0852%" y="437" width="0.0108%" height="15" fill="rgb(229,198,43)" fg:x="758" fg:w="2"/><text x="4.3352%" y="447.50"></text></g><g><title>IOSurface`unserializeReplacementDictionaryKeysAndValues (2 samples, 0.01%)</title><rect x="4.0852%" y="421" width="0.0108%" height="15" fill="rgb(206,209,35)" fg:x="758" fg:w="2"/><text x="4.3352%" y="431.50"></text></g><g><title>IOSurface`unserializeReplacementIOKitTypeRef (3 samples, 0.02%)</title><rect x="4.0852%" y="597" width="0.0162%" height="15" fill="rgb(245,195,53)" fg:x="758" fg:w="3"/><text x="4.3352%" y="607.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (3 samples, 0.02%)</title><rect x="4.0852%" y="581" width="0.0162%" height="15" fill="rgb(240,92,26)" fg:x="758" fg:w="3"/><text x="4.3352%" y="591.50"></text></g><g><title>IOSurface`unserializeReplacementDictionaryKeysAndValues (3 samples, 0.02%)</title><rect x="4.0852%" y="565" width="0.0162%" height="15" fill="rgb(207,40,23)" fg:x="758" fg:w="3"/><text x="4.3352%" y="575.50"></text></g><g><title>IOSurface`unserializeReplacementIOKitTypeRef (3 samples, 0.02%)</title><rect x="4.0852%" y="549" width="0.0162%" height="15" fill="rgb(223,111,35)" fg:x="758" fg:w="3"/><text x="4.3352%" y="559.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (3 samples, 0.02%)</title><rect x="4.0852%" y="533" width="0.0162%" height="15" fill="rgb(229,147,28)" fg:x="758" fg:w="3"/><text x="4.3352%" y="543.50"></text></g><g><title>IOSurface`unserializeReplacementDictionaryKeysAndValues (3 samples, 0.02%)</title><rect x="4.0852%" y="517" width="0.0162%" height="15" fill="rgb(211,29,28)" fg:x="758" fg:w="3"/><text x="4.3352%" y="527.50"></text></g><g><title>IOSurface`unserializeReplacementIOKitTypeRef (3 samples, 0.02%)</title><rect x="4.0852%" y="501" width="0.0162%" height="15" fill="rgb(228,72,33)" fg:x="758" fg:w="3"/><text x="4.3352%" y="511.50"></text></g><g><title>CoreFoundation`CFArrayApplyFunction (3 samples, 0.02%)</title><rect x="4.0852%" y="485" width="0.0162%" height="15" fill="rgb(205,214,31)" fg:x="758" fg:w="3"/><text x="4.3352%" y="495.50"></text></g><g><title>CoreVideo`CVPixelBufferCreateWithIOSurface (41 samples, 0.22%)</title><rect x="3.8857%" y="645" width="0.2210%" height="15" fill="rgb(224,111,15)" fg:x="721" fg:w="41"/><text x="4.1357%" y="655.50"></text></g><g><title>IOSurface`IOSurfaceClientCopyAllValues (28 samples, 0.15%)</title><rect x="3.9558%" y="629" width="0.1509%" height="15" fill="rgb(253,21,26)" fg:x="734" fg:w="28"/><text x="4.2058%" y="639.50"></text></g><g><title>IOSurface`IOSurfaceClientUpdateNonBulkValueCache (28 samples, 0.15%)</title><rect x="3.9558%" y="613" width="0.1509%" height="15" fill="rgb(245,139,43)" fg:x="734" fg:w="28"/><text x="4.2058%" y="623.50"></text></g><g><title>IOKit`io_connect_method (6 samples, 0.03%)</title><rect x="4.1067%" y="597" width="0.0323%" height="15" fill="rgb(252,170,7)" fg:x="762" fg:w="6"/><text x="4.3567%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (6 samples, 0.03%)</title><rect x="4.1067%" y="581" width="0.0323%" height="15" fill="rgb(231,118,14)" fg:x="762" fg:w="6"/><text x="4.3567%" y="591.50"></text></g><g><title>CoreMediaIO`-[CMIOExtensionSample initWithXPCDictionary:] (75 samples, 0.40%)</title><rect x="3.7402%" y="661" width="0.4042%" height="15" fill="rgb(238,83,0)" fg:x="694" fg:w="75"/><text x="3.9902%" y="671.50"></text></g><g><title>IOSurface`-[IOSurface initWithMachPort:] (7 samples, 0.04%)</title><rect x="4.1067%" y="645" width="0.0377%" height="15" fill="rgb(221,39,39)" fg:x="762" fg:w="7"/><text x="4.3567%" y="655.50"></text></g><g><title>IOSurface`IOSurfaceClientLookupFromMachPort (7 samples, 0.04%)</title><rect x="4.1067%" y="629" width="0.0377%" height="15" fill="rgb(222,119,46)" fg:x="762" fg:w="7"/><text x="4.3567%" y="639.50"></text></g><g><title>IOKit`IOConnectCallMethod (7 samples, 0.04%)</title><rect x="4.1067%" y="613" width="0.0377%" height="15" fill="rgb(222,165,49)" fg:x="762" fg:w="7"/><text x="4.3567%" y="623.50"></text></g><g><title>CoreMediaIO`CMIO::DAL::CMIOExtension::Stream::ReceivedSampleBuffer (3 samples, 0.02%)</title><rect x="4.1444%" y="613" width="0.0162%" height="15" fill="rgb(219,113,52)" fg:x="769" fg:w="3"/><text x="4.3944%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (2 samples, 0.01%)</title><rect x="4.1498%" y="597" width="0.0108%" height="15" fill="rgb(214,7,15)" fg:x="770" fg:w="2"/><text x="4.3998%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (2 samples, 0.01%)</title><rect x="4.1498%" y="581" width="0.0108%" height="15" fill="rgb(235,32,4)" fg:x="770" fg:w="2"/><text x="4.3998%" y="591.50"></text></g><g><title>CoreMediaIO`-[CMIOExtensionSessionProvider extension:receivedSampleWithStreamID:sample:] (6 samples, 0.03%)</title><rect x="4.1444%" y="661" width="0.0323%" height="15" fill="rgb(238,90,54)" fg:x="769" fg:w="6"/><text x="4.3944%" y="671.50"></text></g><g><title>CoreMediaIO`-[CMIOExtensionSessionStream receivedSample:streamID:] (6 samples, 0.03%)</title><rect x="4.1444%" y="645" width="0.0323%" height="15" fill="rgb(213,208,19)" fg:x="769" fg:w="6"/><text x="4.3944%" y="655.50"></text></g><g><title>CoreMediaIO`-[CMIODALExtensionStream stream:receivedSampleBuffer:] (6 samples, 0.03%)</title><rect x="4.1444%" y="629" width="0.0323%" height="15" fill="rgb(233,156,4)" fg:x="769" fg:w="6"/><text x="4.3944%" y="639.50"></text></g><g><title>CoreMediaIO`-[CMIOExtensionProviderHostContext receivedSample:message:] (82 samples, 0.44%)</title><rect x="3.7402%" y="677" width="0.4419%" height="15" fill="rgb(207,194,5)" fg:x="694" fg:w="82"/><text x="3.9902%" y="687.50"></text></g><g><title>libxpc.dylib`_xpc_connection_call_event_handler (85 samples, 0.46%)</title><rect x="3.7402%" y="725" width="0.4581%" height="15" fill="rgb(206,111,30)" fg:x="694" fg:w="85"/><text x="3.9902%" y="735.50"></text></g><g><title>CoreMediaIO`__64-[CMIOExtensionProviderHostContext initWithConnection:delegate:]_block_invoke (85 samples, 0.46%)</title><rect x="3.7402%" y="709" width="0.4581%" height="15" fill="rgb(243,70,54)" fg:x="694" fg:w="85"/><text x="3.9902%" y="719.50"></text></g><g><title>CoreMediaIO`-[CMIOExtensionProviderHostContext handleClientMessageWithConnection:message:] (85 samples, 0.46%)</title><rect x="3.7402%" y="693" width="0.4581%" height="15" fill="rgb(242,28,8)" fg:x="694" fg:w="85"/><text x="3.9902%" y="703.50"></text></g><g><title>libxpc.dylib`xpc_dictionary_get_uint64 (2 samples, 0.01%)</title><rect x="4.1876%" y="677" width="0.0108%" height="15" fill="rgb(219,106,18)" fg:x="777" fg:w="2"/><text x="4.4376%" y="687.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_look_up_fast (2 samples, 0.01%)</title><rect x="4.1876%" y="661" width="0.0108%" height="15" fill="rgb(244,222,10)" fg:x="777" fg:w="2"/><text x="4.4376%" y="671.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_look_up (2 samples, 0.01%)</title><rect x="4.1876%" y="645" width="0.0108%" height="15" fill="rgb(236,179,52)" fg:x="777" fg:w="2"/><text x="4.4376%" y="655.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_look_up_table (2 samples, 0.01%)</title><rect x="4.1876%" y="629" width="0.0108%" height="15" fill="rgb(213,23,39)" fg:x="777" fg:w="2"/><text x="4.4376%" y="639.50"></text></g><g><title>libxpc.dylib`_hash_bucket (2 samples, 0.01%)</title><rect x="4.1876%" y="613" width="0.0108%" height="15" fill="rgb(238,48,10)" fg:x="777" fg:w="2"/><text x="4.4376%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout4 (92 samples, 0.50%)</title><rect x="3.7241%" y="757" width="0.4958%" height="15" fill="rgb(251,196,23)" fg:x="691" fg:w="92"/><text x="3.9741%" y="767.50"></text></g><g><title>libxpc.dylib`_xpc_connection_mach_event (91 samples, 0.49%)</title><rect x="3.7295%" y="741" width="0.4904%" height="15" fill="rgb(250,152,24)" fg:x="692" fg:w="91"/><text x="3.9795%" y="751.50"></text></g><g><title>libxpc.dylib`_xpc_connection_unpack_message (4 samples, 0.02%)</title><rect x="4.1983%" y="725" width="0.0216%" height="15" fill="rgb(209,150,17)" fg:x="779" fg:w="4"/><text x="4.4483%" y="735.50"></text></g><g><title>libxpc.dylib`xpc_receive_mach_msg (4 samples, 0.02%)</title><rect x="4.1983%" y="709" width="0.0216%" height="15" fill="rgb(234,202,34)" fg:x="779" fg:w="4"/><text x="4.4483%" y="719.50"></text></g><g><title>libxpc.dylib`_xpc_graph_unpack_impl (3 samples, 0.02%)</title><rect x="4.2037%" y="693" width="0.0162%" height="15" fill="rgb(253,148,53)" fg:x="780" fg:w="3"/><text x="4.4537%" y="703.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_create_from_received_message (3 samples, 0.02%)</title><rect x="4.2037%" y="677" width="0.0162%" height="15" fill="rgb(218,129,16)" fg:x="780" fg:w="3"/><text x="4.4537%" y="687.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_apply_wire_f (2 samples, 0.01%)</title><rect x="4.2091%" y="661" width="0.0108%" height="15" fill="rgb(216,85,19)" fg:x="781" fg:w="2"/><text x="4.4591%" y="671.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_deserialize_apply (2 samples, 0.01%)</title><rect x="4.2091%" y="645" width="0.0108%" height="15" fill="rgb(235,228,7)" fg:x="781" fg:w="2"/><text x="4.4591%" y="655.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_unpack_value (2 samples, 0.01%)</title><rect x="4.2091%" y="629" width="0.0108%" height="15" fill="rgb(245,175,0)" fg:x="781" fg:w="2"/><text x="4.4591%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_set_priority_and_voucher_slow (2 samples, 0.01%)</title><rect x="4.2199%" y="757" width="0.0108%" height="15" fill="rgb(208,168,36)" fg:x="783" fg:w="2"/><text x="4.4699%" y="767.50"></text></g><g><title>libdispatch.dylib`_dispatch_set_priority_and_mach_voucher_slow (2 samples, 0.01%)</title><rect x="4.2199%" y="741" width="0.0108%" height="15" fill="rgb(246,171,24)" fg:x="783" fg:w="2"/><text x="4.4699%" y="751.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_msg_invoke (95 samples, 0.51%)</title><rect x="3.7241%" y="773" width="0.5120%" height="15" fill="rgb(215,142,24)" fg:x="691" fg:w="95"/><text x="3.9741%" y="783.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_invoke (96 samples, 0.52%)</title><rect x="3.7241%" y="805" width="0.5174%" height="15" fill="rgb(250,187,7)" fg:x="691" fg:w="96"/><text x="3.9741%" y="815.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (96 samples, 0.52%)</title><rect x="3.7241%" y="789" width="0.5174%" height="15" fill="rgb(228,66,33)" fg:x="691" fg:w="96"/><text x="3.9741%" y="799.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (83 samples, 0.45%)</title><rect x="4.2414%" y="757" width="0.4473%" height="15" fill="rgb(234,215,21)" fg:x="787" fg:w="83"/><text x="4.4914%" y="767.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (83 samples, 0.45%)</title><rect x="4.2414%" y="741" width="0.4473%" height="15" fill="rgb(222,191,20)" fg:x="787" fg:w="83"/><text x="4.4914%" y="751.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (83 samples, 0.45%)</title><rect x="4.2414%" y="725" width="0.4473%" height="15" fill="rgb(245,79,54)" fg:x="787" fg:w="83"/><text x="4.4914%" y="735.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (83 samples, 0.45%)</title><rect x="4.2414%" y="709" width="0.4473%" height="15" fill="rgb(240,10,37)" fg:x="787" fg:w="83"/><text x="4.4914%" y="719.50"></text></g><g><title>IOKit`IOConnectCallMethod (83 samples, 0.45%)</title><rect x="4.2414%" y="693" width="0.4473%" height="15" fill="rgb(214,192,32)" fg:x="787" fg:w="83"/><text x="4.4914%" y="703.50"></text></g><g><title>IOKit`io_connect_method (83 samples, 0.45%)</title><rect x="4.2414%" y="677" width="0.4473%" height="15" fill="rgb(209,36,54)" fg:x="787" fg:w="83"/><text x="4.4914%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (82 samples, 0.44%)</title><rect x="4.2468%" y="661" width="0.4419%" height="15" fill="rgb(220,10,11)" fg:x="788" fg:w="82"/><text x="4.4968%" y="671.50"></text></g><g><title>QuartzCore`_XImageQueueDidComposite (4 samples, 0.02%)</title><rect x="4.6888%" y="741" width="0.0216%" height="15" fill="rgb(221,106,17)" fg:x="870" fg:w="4"/><text x="4.9388%" y="751.50"></text></g><g><title>QuartzCore`CAImageQueueDidComposite (4 samples, 0.02%)</title><rect x="4.6888%" y="725" width="0.0216%" height="15" fill="rgb(251,142,44)" fg:x="870" fg:w="4"/><text x="4.9388%" y="735.50"></text></g><g><title>QuartzCore`layer_composited(_CAImageQueue*, void*, unsigned int, unsigned int) (3 samples, 0.02%)</title><rect x="4.6942%" y="709" width="0.0162%" height="15" fill="rgb(238,13,15)" fg:x="871" fg:w="3"/><text x="4.9442%" y="719.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_invoke (363 samples, 1.96%)</title><rect x="2.7648%" y="837" width="1.9563%" height="15" fill="rgb(208,107,27)" fg:x="513" fg:w="363"/><text x="3.0148%" y="847.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_lane_serial_drain (363 samples, 1.96%)</title><rect x="2.7648%" y="821" width="1.9563%" height="15" fill="rgb(205,136,37)" fg:x="513" fg:w="363"/><text x="3.0148%" y="831.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_source_invoke (89 samples, 0.48%)</title><rect x="4.2414%" y="805" width="0.4797%" height="15" fill="rgb(250,205,27)" fg:x="787" fg:w="89"/><text x="4.4914%" y="815.50"></text></g><g><title>libdispatch.dylib`_dispatch_continuation_pop (89 samples, 0.48%)</title><rect x="4.2414%" y="789" width="0.4797%" height="15" fill="rgb(210,80,43)" fg:x="787" fg:w="89"/><text x="4.4914%" y="799.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (89 samples, 0.48%)</title><rect x="4.2414%" y="773" width="0.4797%" height="15" fill="rgb(247,160,36)" fg:x="787" fg:w="89"/><text x="4.4914%" y="783.50"></text></g><g><title>QuartzCore`invocation function for block in CA::Context::client_port (6 samples, 0.03%)</title><rect x="4.6888%" y="757" width="0.0323%" height="15" fill="rgb(234,13,49)" fg:x="870" fg:w="6"/><text x="4.9388%" y="767.50"></text></g><g><title>libdispatch.dylib`_dispatch_set_priority_and_voucher_slow (2 samples, 0.01%)</title><rect x="4.7211%" y="837" width="0.0108%" height="15" fill="rgb(234,122,0)" fg:x="876" fg:w="2"/><text x="4.9711%" y="847.50"></text></g><g><title>libdispatch.dylib`-[OS_voucher dealloc] (2 samples, 0.01%)</title><rect x="4.7211%" y="821" width="0.0108%" height="15" fill="rgb(207,146,38)" fg:x="876" fg:w="2"/><text x="4.9711%" y="831.50"></text></g><g><title>libdispatch.dylib`_voucher_dispose (2 samples, 0.01%)</title><rect x="4.7211%" y="805" width="0.0108%" height="15" fill="rgb(207,177,25)" fg:x="876" fg:w="2"/><text x="4.9711%" y="815.50"></text></g><g><title>libdispatch.dylib`_voucher_dealloc_mach_voucher (2 samples, 0.01%)</title><rect x="4.7211%" y="789" width="0.0108%" height="15" fill="rgb(211,178,42)" fg:x="876" fg:w="2"/><text x="4.9711%" y="799.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_port_deallocate_trap (2 samples, 0.01%)</title><rect x="4.7211%" y="773" width="0.0108%" height="15" fill="rgb(230,69,54)" fg:x="876" fg:w="2"/><text x="4.9711%" y="783.50"></text></g><g><title>libsystem_pthread.dylib`start_wqthread (420 samples, 2.26%)</title><rect x="2.4791%" y="885" width="2.2635%" height="15" fill="rgb(214,135,41)" fg:x="460" fg:w="420"/><text x="2.7291%" y="895.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_wqthread (374 samples, 2.02%)</title><rect x="2.7270%" y="869" width="2.0156%" height="15" fill="rgb(237,67,25)" fg:x="506" fg:w="374"/><text x="2.9770%" y="879.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_workloop_worker_thread (372 samples, 2.00%)</title><rect x="2.7378%" y="853" width="2.0049%" height="15" fill="rgb(222,189,50)" fg:x="508" fg:w="372"/><text x="2.9878%" y="863.50">l..</text></g><g><title>SkyLight`event_datagram_handler(unsigned int, CGSDatagramType, void*, unsigned long, void*) (2 samples, 0.01%)</title><rect x="4.7427%" y="677" width="0.0108%" height="15" fill="rgb(245,148,34)" fg:x="880" fg:w="2"/><text x="4.9927%" y="687.50"></text></g><g><title>SkyLight`CGSDecodeEventRecord (2 samples, 0.01%)</title><rect x="4.7427%" y="661" width="0.0108%" height="15" fill="rgb(222,29,6)" fg:x="880" fg:w="2"/><text x="4.9927%" y="671.50"></text></g><g><title>SkyLight`SLEventRecordCreateWithBytesAndSource(void const*, unsigned long, __CGEventSource*) (2 samples, 0.01%)</title><rect x="4.7427%" y="645" width="0.0108%" height="15" fill="rgb(221,189,43)" fg:x="880" fg:w="2"/><text x="4.9927%" y="655.50"></text></g><g><title>CoreFoundation`__CFRunLoopDoSource1 (7 samples, 0.04%)</title><rect x="4.7427%" y="805" width="0.0377%" height="15" fill="rgb(207,36,27)" fg:x="880" fg:w="7"/><text x="4.9927%" y="815.50"></text></g><g><title>CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ (7 samples, 0.04%)</title><rect x="4.7427%" y="789" width="0.0377%" height="15" fill="rgb(217,90,24)" fg:x="880" fg:w="7"/><text x="4.9927%" y="799.50"></text></g><g><title>CoreFoundation`__CFMachPortPerform (7 samples, 0.04%)</title><rect x="4.7427%" y="773" width="0.0377%" height="15" fill="rgb(224,66,35)" fg:x="880" fg:w="7"/><text x="4.9927%" y="783.50"></text></g><g><title>HIToolbox`MessageHandler(__CFMachPort*, void*, long, void*) (7 samples, 0.04%)</title><rect x="4.7427%" y="757" width="0.0377%" height="15" fill="rgb(221,13,50)" fg:x="880" fg:w="7"/><text x="4.9927%" y="767.50"></text></g><g><title>HIToolbox`PullEventsFromWindowServerOnConnection(unsigned int, unsigned char, __CFMachPortBoost*) (7 samples, 0.04%)</title><rect x="4.7427%" y="741" width="0.0377%" height="15" fill="rgb(236,68,49)" fg:x="880" fg:w="7"/><text x="4.9927%" y="751.50"></text></g><g><title>SkyLight`SLEventCreateNextEvent (7 samples, 0.04%)</title><rect x="4.7427%" y="725" width="0.0377%" height="15" fill="rgb(229,146,28)" fg:x="880" fg:w="7"/><text x="4.9927%" y="735.50"></text></g><g><title>SkyLight`SLSGetNextEventRecordInternal (7 samples, 0.04%)</title><rect x="4.7427%" y="709" width="0.0377%" height="15" fill="rgb(225,31,38)" fg:x="880" fg:w="7"/><text x="4.9927%" y="719.50"></text></g><g><title>SkyLight`CGSSnarfAndDispatchDatagrams (7 samples, 0.04%)</title><rect x="4.7427%" y="693" width="0.0377%" height="15" fill="rgb(250,208,3)" fg:x="880" fg:w="7"/><text x="4.9927%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg (5 samples, 0.03%)</title><rect x="4.7534%" y="677" width="0.0269%" height="15" fill="rgb(246,54,23)" fg:x="882" fg:w="5"/><text x="5.0034%" y="687.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_overwrite (5 samples, 0.03%)</title><rect x="4.7534%" y="661" width="0.0269%" height="15" fill="rgb(243,76,11)" fg:x="882" fg:w="5"/><text x="5.0034%" y="671.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (5 samples, 0.03%)</title><rect x="4.7534%" y="645" width="0.0269%" height="15" fill="rgb(245,21,50)" fg:x="882" fg:w="5"/><text x="5.0034%" y="655.50"></text></g><g><title>AppKit`_NSEventThread (8 samples, 0.04%)</title><rect x="4.7427%" y="853" width="0.0431%" height="15" fill="rgb(228,9,43)" fg:x="880" fg:w="8"/><text x="4.9927%" y="863.50"></text></g><g><title>CoreFoundation`CFRunLoopRunSpecific (8 samples, 0.04%)</title><rect x="4.7427%" y="837" width="0.0431%" height="15" fill="rgb(208,100,47)" fg:x="880" fg:w="8"/><text x="4.9927%" y="847.50"></text></g><g><title>CoreFoundation`__CFRunLoopRun (8 samples, 0.04%)</title><rect x="4.7427%" y="821" width="0.0431%" height="15" fill="rgb(232,26,8)" fg:x="880" fg:w="8"/><text x="4.9927%" y="831.50"></text></g><g><title>AVFCapture`-[AVCaptureVideoDataOutput_Tundra _render:sampleBuffer:] (3 samples, 0.02%)</title><rect x="4.8019%" y="645" width="0.0162%" height="15" fill="rgb(216,166,38)" fg:x="891" fg:w="3"/><text x="5.0519%" y="655.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (3 samples, 0.02%)</title><rect x="4.8019%" y="629" width="0.0162%" height="15" fill="rgb(251,202,51)" fg:x="891" fg:w="3"/><text x="5.0519%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (3 samples, 0.02%)</title><rect x="4.8019%" y="613" width="0.0162%" height="15" fill="rgb(254,216,34)" fg:x="891" fg:w="3"/><text x="5.0519%" y="623.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a35ac (4 samples, 0.02%)</title><rect x="4.8019%" y="693" width="0.0216%" height="15" fill="rgb(251,32,27)" fg:x="891" fg:w="4"/><text x="5.0519%" y="703.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a3884 (4 samples, 0.02%)</title><rect x="4.8019%" y="677" width="0.0216%" height="15" fill="rgb(208,127,28)" fg:x="891" fg:w="4"/><text x="5.0519%" y="687.50"></text></g><g><title>AVFCapture`ConsumerRender (4 samples, 0.02%)</title><rect x="4.8019%" y="661" width="0.0216%" height="15" fill="rgb(224,137,22)" fg:x="891" fg:w="4"/><text x="5.0519%" y="671.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5f6078 (4 samples, 0.02%)</title><rect x="4.8397%" y="37" width="0.0216%" height="15" fill="rgb(254,70,32)" fg:x="898" fg:w="4"/><text x="5.0897%" y="47.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a6780 (6 samples, 0.03%)</title><rect x="4.8343%" y="69" width="0.0323%" height="15" fill="rgb(229,75,37)" fg:x="897" fg:w="6"/><text x="5.0843%" y="79.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5f4a74 (6 samples, 0.03%)</title><rect x="4.8343%" y="53" width="0.0323%" height="15" fill="rgb(252,64,23)" fg:x="897" fg:w="6"/><text x="5.0843%" y="63.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (7 samples, 0.04%)</title><rect x="4.8343%" y="117" width="0.0377%" height="15" fill="rgb(232,162,48)" fg:x="897" fg:w="7"/><text x="5.0843%" y="127.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (7 samples, 0.04%)</title><rect x="4.8343%" y="101" width="0.0377%" height="15" fill="rgb(246,160,12)" fg:x="897" fg:w="7"/><text x="5.0843%" y="111.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (7 samples, 0.04%)</title><rect x="4.8343%" y="85" width="0.0377%" height="15" fill="rgb(247,166,0)" fg:x="897" fg:w="7"/><text x="5.0843%" y="95.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c5c60 (13 samples, 0.07%)</title><rect x="4.8235%" y="453" width="0.0701%" height="15" fill="rgb(249,219,21)" fg:x="895" fg:w="13"/><text x="5.0735%" y="463.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (12 samples, 0.06%)</title><rect x="4.8289%" y="437" width="0.0647%" height="15" fill="rgb(205,209,3)" fg:x="896" fg:w="12"/><text x="5.0789%" y="447.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (12 samples, 0.06%)</title><rect x="4.8289%" y="421" width="0.0647%" height="15" fill="rgb(243,44,1)" fg:x="896" fg:w="12"/><text x="5.0789%" y="431.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (12 samples, 0.06%)</title><rect x="4.8289%" y="405" width="0.0647%" height="15" fill="rgb(206,159,16)" fg:x="896" fg:w="12"/><text x="5.0789%" y="415.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c979c (12 samples, 0.06%)</title><rect x="4.8289%" y="389" width="0.0647%" height="15" fill="rgb(244,77,30)" fg:x="896" fg:w="12"/><text x="5.0789%" y="399.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (12 samples, 0.06%)</title><rect x="4.8289%" y="373" width="0.0647%" height="15" fill="rgb(218,69,12)" fg:x="896" fg:w="12"/><text x="5.0789%" y="383.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (12 samples, 0.06%)</title><rect x="4.8289%" y="357" width="0.0647%" height="15" fill="rgb(212,87,7)" fg:x="896" fg:w="12"/><text x="5.0789%" y="367.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (12 samples, 0.06%)</title><rect x="4.8289%" y="341" width="0.0647%" height="15" fill="rgb(245,114,25)" fg:x="896" fg:w="12"/><text x="5.0789%" y="351.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c979c (12 samples, 0.06%)</title><rect x="4.8289%" y="325" width="0.0647%" height="15" fill="rgb(210,61,42)" fg:x="896" fg:w="12"/><text x="5.0789%" y="335.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (12 samples, 0.06%)</title><rect x="4.8289%" y="309" width="0.0647%" height="15" fill="rgb(211,52,33)" fg:x="896" fg:w="12"/><text x="5.0789%" y="319.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (12 samples, 0.06%)</title><rect x="4.8289%" y="293" width="0.0647%" height="15" fill="rgb(234,58,33)" fg:x="896" fg:w="12"/><text x="5.0789%" y="303.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (12 samples, 0.06%)</title><rect x="4.8289%" y="277" width="0.0647%" height="15" fill="rgb(220,115,36)" fg:x="896" fg:w="12"/><text x="5.0789%" y="287.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c5c60 (12 samples, 0.06%)</title><rect x="4.8289%" y="261" width="0.0647%" height="15" fill="rgb(243,153,54)" fg:x="896" fg:w="12"/><text x="5.0789%" y="271.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (12 samples, 0.06%)</title><rect x="4.8289%" y="245" width="0.0647%" height="15" fill="rgb(251,47,18)" fg:x="896" fg:w="12"/><text x="5.0789%" y="255.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (12 samples, 0.06%)</title><rect x="4.8289%" y="229" width="0.0647%" height="15" fill="rgb(242,102,42)" fg:x="896" fg:w="12"/><text x="5.0789%" y="239.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (12 samples, 0.06%)</title><rect x="4.8289%" y="213" width="0.0647%" height="15" fill="rgb(234,31,38)" fg:x="896" fg:w="12"/><text x="5.0789%" y="223.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c979c (12 samples, 0.06%)</title><rect x="4.8289%" y="197" width="0.0647%" height="15" fill="rgb(221,117,51)" fg:x="896" fg:w="12"/><text x="5.0789%" y="207.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (12 samples, 0.06%)</title><rect x="4.8289%" y="181" width="0.0647%" height="15" fill="rgb(212,20,18)" fg:x="896" fg:w="12"/><text x="5.0789%" y="191.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (12 samples, 0.06%)</title><rect x="4.8289%" y="165" width="0.0647%" height="15" fill="rgb(245,133,36)" fg:x="896" fg:w="12"/><text x="5.0789%" y="175.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (12 samples, 0.06%)</title><rect x="4.8289%" y="149" width="0.0647%" height="15" fill="rgb(212,6,19)" fg:x="896" fg:w="12"/><text x="5.0789%" y="159.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c5c60 (11 samples, 0.06%)</title><rect x="4.8343%" y="133" width="0.0593%" height="15" fill="rgb(218,1,36)" fg:x="897" fg:w="11"/><text x="5.0843%" y="143.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5b8b3c (4 samples, 0.02%)</title><rect x="4.8720%" y="117" width="0.0216%" height="15" fill="rgb(246,84,54)" fg:x="904" fg:w="4"/><text x="5.1220%" y="127.50"></text></g><g><title>CMIOUnits`0x000000010f6d1ab0 (4 samples, 0.02%)</title><rect x="4.8720%" y="101" width="0.0216%" height="15" fill="rgb(242,110,6)" fg:x="904" fg:w="4"/><text x="5.1220%" y="111.50"></text></g><g><title>CMIOUnits`0x000000010f6b4668 (4 samples, 0.02%)</title><rect x="4.8720%" y="85" width="0.0216%" height="15" fill="rgb(214,47,5)" fg:x="904" fg:w="4"/><text x="5.1220%" y="95.50"></text></g><g><title>CMIOUnits`0x000000010f7062e8 (4 samples, 0.02%)</title><rect x="4.8720%" y="69" width="0.0216%" height="15" fill="rgb(218,159,25)" fg:x="904" fg:w="4"/><text x="5.1220%" y="79.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (14 samples, 0.08%)</title><rect x="4.8235%" y="501" width="0.0755%" height="15" fill="rgb(215,211,28)" fg:x="895" fg:w="14"/><text x="5.0735%" y="511.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (14 samples, 0.08%)</title><rect x="4.8235%" y="485" width="0.0755%" height="15" fill="rgb(238,59,32)" fg:x="895" fg:w="14"/><text x="5.0735%" y="495.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (14 samples, 0.08%)</title><rect x="4.8235%" y="469" width="0.0755%" height="15" fill="rgb(226,82,3)" fg:x="895" fg:w="14"/><text x="5.0735%" y="479.50"></text></g><g><title>CoreMedia`CMSampleBufferCreateForImageBuffer (2 samples, 0.01%)</title><rect x="4.8989%" y="421" width="0.0108%" height="15" fill="rgb(240,164,32)" fg:x="909" fg:w="2"/><text x="5.1489%" y="431.50"></text></g><g><title>CoreMedia`figSampleBufferCreateForImageBufferCallbackOrHandler (2 samples, 0.01%)</title><rect x="4.8989%" y="405" width="0.0108%" height="15" fill="rgb(232,46,7)" fg:x="909" fg:w="2"/><text x="5.1489%" y="415.50"></text></g><g><title>CoreMedia`CMVideoFormatDescriptionMatchesImageBuffer (2 samples, 0.01%)</title><rect x="4.8989%" y="389" width="0.0108%" height="15" fill="rgb(229,129,53)" fg:x="909" fg:w="2"/><text x="5.1489%" y="399.50"></text></g><g><title>CoreMediaIO`CMIOSampleBufferCreateForImageBuffer (3 samples, 0.02%)</title><rect x="4.8989%" y="437" width="0.0162%" height="15" fill="rgb(234,188,29)" fg:x="909" fg:w="3"/><text x="5.1489%" y="447.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5fca84 (5 samples, 0.03%)</title><rect x="4.8989%" y="453" width="0.0269%" height="15" fill="rgb(246,141,4)" fg:x="909" fg:w="5"/><text x="5.1489%" y="463.50"></text></g><g><title>CoreVideo`CVPixelBuffer::removeAttachment (3 samples, 0.02%)</title><rect x="4.9421%" y="437" width="0.0162%" height="15" fill="rgb(229,23,39)" fg:x="917" fg:w="3"/><text x="5.1921%" y="447.50"></text></g><g><title>IOSurface`IOSurfaceClientRemoveValue (3 samples, 0.02%)</title><rect x="4.9421%" y="421" width="0.0162%" height="15" fill="rgb(206,12,3)" fg:x="917" fg:w="3"/><text x="5.1921%" y="431.50"></text></g><g><title>IOKit`IOConnectCallMethod (3 samples, 0.02%)</title><rect x="4.9421%" y="405" width="0.0162%" height="15" fill="rgb(252,226,20)" fg:x="917" fg:w="3"/><text x="5.1921%" y="415.50"></text></g><g><title>IOKit`io_connect_method (3 samples, 0.02%)</title><rect x="4.9421%" y="389" width="0.0162%" height="15" fill="rgb(216,123,35)" fg:x="917" fg:w="3"/><text x="5.1921%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (3 samples, 0.02%)</title><rect x="4.9421%" y="373" width="0.0162%" height="15" fill="rgb(212,68,40)" fg:x="917" fg:w="3"/><text x="5.1921%" y="383.50"></text></g><g><title>IOKit`DoCFSerializeBinary (3 samples, 0.02%)</title><rect x="4.9690%" y="389" width="0.0162%" height="15" fill="rgb(254,125,32)" fg:x="922" fg:w="3"/><text x="5.2190%" y="399.50"></text></g><g><title>CoreFoundation`CFArrayApplyFunction (3 samples, 0.02%)</title><rect x="4.9690%" y="373" width="0.0162%" height="15" fill="rgb(253,97,22)" fg:x="922" fg:w="3"/><text x="5.2190%" y="383.50"></text></g><g><title>IOKit`IOCFSerializeBinaryCFArraySetFunction (3 samples, 0.02%)</title><rect x="4.9690%" y="357" width="0.0162%" height="15" fill="rgb(241,101,14)" fg:x="922" fg:w="3"/><text x="5.2190%" y="367.50"></text></g><g><title>IOKit`DoCFSerializeBinary (3 samples, 0.02%)</title><rect x="4.9690%" y="341" width="0.0162%" height="15" fill="rgb(238,103,29)" fg:x="922" fg:w="3"/><text x="5.2190%" y="351.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM __apply:context:] (3 samples, 0.02%)</title><rect x="4.9690%" y="325" width="0.0162%" height="15" fill="rgb(233,195,47)" fg:x="922" fg:w="3"/><text x="5.2190%" y="335.50"></text></g><g><title>IOKit`IOCFSerializeBinaryCFDictionaryFunction (3 samples, 0.02%)</title><rect x="4.9690%" y="309" width="0.0162%" height="15" fill="rgb(246,218,30)" fg:x="922" fg:w="3"/><text x="5.2190%" y="319.50"></text></g><g><title>IOKit`DoCFSerializeBinary (3 samples, 0.02%)</title><rect x="4.9690%" y="293" width="0.0162%" height="15" fill="rgb(219,145,47)" fg:x="922" fg:w="3"/><text x="5.2190%" y="303.50"></text></g><g><title>IOKit`IOCFSerializeBinaryAddObject (3 samples, 0.02%)</title><rect x="4.9690%" y="277" width="0.0162%" height="15" fill="rgb(243,12,26)" fg:x="922" fg:w="3"/><text x="5.2190%" y="287.50"></text></g><g><title>CoreFoundation`CFDictionarySetValue (2 samples, 0.01%)</title><rect x="4.9744%" y="261" width="0.0108%" height="15" fill="rgb(214,87,16)" fg:x="923" fg:w="2"/><text x="5.2244%" y="271.50"></text></g><g><title>IOKit`IOCFSerialize (4 samples, 0.02%)</title><rect x="4.9690%" y="405" width="0.0216%" height="15" fill="rgb(208,99,42)" fg:x="922" fg:w="4"/><text x="5.2190%" y="415.50"></text></g><g><title>CoreVideo`CVPixelBuffer::setAttachments (8 samples, 0.04%)</title><rect x="4.9582%" y="437" width="0.0431%" height="15" fill="rgb(253,99,2)" fg:x="920" fg:w="8"/><text x="5.2082%" y="447.50"></text></g><g><title>IOSurface`IOSurfaceClientSetValue (6 samples, 0.03%)</title><rect x="4.9690%" y="421" width="0.0323%" height="15" fill="rgb(220,168,23)" fg:x="922" fg:w="6"/><text x="5.2190%" y="431.50"></text></g><g><title>IOKit`IOConnectCallMethod (2 samples, 0.01%)</title><rect x="4.9906%" y="405" width="0.0108%" height="15" fill="rgb(242,38,24)" fg:x="926" fg:w="2"/><text x="5.2406%" y="415.50"></text></g><g><title>IOKit`io_connect_method (2 samples, 0.01%)</title><rect x="4.9906%" y="389" width="0.0108%" height="15" fill="rgb(225,182,9)" fg:x="926" fg:w="2"/><text x="5.2406%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.01%)</title><rect x="4.9906%" y="373" width="0.0108%" height="15" fill="rgb(243,178,37)" fg:x="926" fg:w="2"/><text x="5.2406%" y="383.50"></text></g><g><title>Metal`MTLCompilerFunctionRequest::serializedRequest (2 samples, 0.01%)</title><rect x="5.0175%" y="213" width="0.0108%" height="15" fill="rgb(232,139,19)" fg:x="931" fg:w="2"/><text x="5.2675%" y="223.50"></text></g><g><title>Metal`MTLLibraryDataWithArchive::validateBitCode (2 samples, 0.01%)</title><rect x="5.0175%" y="197" width="0.0108%" height="15" fill="rgb(225,201,24)" fg:x="931" fg:w="2"/><text x="5.2675%" y="207.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.01%)</title><rect x="5.0175%" y="181" width="0.0108%" height="15" fill="rgb(221,47,46)" fg:x="931" fg:w="2"/><text x="5.2675%" y="191.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="5.0175%" y="165" width="0.0108%" height="15" fill="rgb(249,23,13)" fg:x="931" fg:w="2"/><text x="5.2675%" y="175.50"></text></g><g><title>Metal`invocation function for block in MTLLibraryDataWithArchive::validateBitCode (2 samples, 0.01%)</title><rect x="5.0175%" y="149" width="0.0108%" height="15" fill="rgb(219,9,5)" fg:x="931" fg:w="2"/><text x="5.2675%" y="159.50"></text></g><g><title>VideoToolbox`0x00000001ac24d264 (6 samples, 0.03%)</title><rect x="5.0013%" y="421" width="0.0323%" height="15" fill="rgb(254,171,16)" fg:x="928" fg:w="6"/><text x="5.2513%" y="431.50"></text></g><g><title>VideoToolbox`0x00000001ac2cf5d0 (6 samples, 0.03%)</title><rect x="5.0013%" y="405" width="0.0323%" height="15" fill="rgb(230,171,20)" fg:x="928" fg:w="6"/><text x="5.2513%" y="415.50"></text></g><g><title>VideoToolbox`0x00000001ac2cf7d4 (6 samples, 0.03%)</title><rect x="5.0013%" y="389" width="0.0323%" height="15" fill="rgb(210,71,41)" fg:x="928" fg:w="6"/><text x="5.2513%" y="399.50"></text></g><g><title>VideoToolbox`0x00000001ac2d442c (6 samples, 0.03%)</title><rect x="5.0013%" y="373" width="0.0323%" height="15" fill="rgb(206,173,20)" fg:x="928" fg:w="6"/><text x="5.2513%" y="383.50"></text></g><g><title>Metal`-[_MTLLibrary newFunctionWithName:constantValues:functionCache:specializedName:error:] (3 samples, 0.02%)</title><rect x="5.0175%" y="357" width="0.0162%" height="15" fill="rgb(233,88,34)" fg:x="931" fg:w="3"/><text x="5.2675%" y="367.50"></text></g><g><title>Metal`-[_MTLFunctionInternal newSpecializedFunctionWithDescriptor:destinationArchive:functionCache:error:] (3 samples, 0.02%)</title><rect x="5.0175%" y="341" width="0.0162%" height="15" fill="rgb(223,209,46)" fg:x="931" fg:w="3"/><text x="5.2675%" y="351.50"></text></g><g><title>Metal`-[_MTLFunctionInternal newSpecializedFunctionWithDescriptor:destinationArchive:functionCache:sync:completionHandler:] (3 samples, 0.02%)</title><rect x="5.0175%" y="325" width="0.0162%" height="15" fill="rgb(250,43,18)" fg:x="931" fg:w="3"/><text x="5.2675%" y="335.50"></text></g><g><title>Metal`MTLCompilerConnectionManagerPrivate::buildRequest(unsigned int, MTLCompilerRequest*, bool, void (MTLCompilerError, NSObject (3 samples, 0.02%)</title><rect x="5.0175%" y="309" width="0.0162%" height="15" fill="rgb(208,13,10)" fg:x="931" fg:w="3"/><text x="5.2675%" y="319.50"></text></g><g><title>Metal`XPCCompilerConnection::BuildRequest(MTLCompilerRequest*, char const*, NSObject&lt;OS_dispatch_data&gt;*, int, bool, void  (3 samples, 0.02%)</title><rect x="5.0175%" y="293" width="0.0162%" height="15" fill="rgb(212,200,36)" fg:x="931" fg:w="3"/><text x="5.2675%" y="303.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (3 samples, 0.02%)</title><rect x="5.0175%" y="277" width="0.0162%" height="15" fill="rgb(225,90,30)" fg:x="931" fg:w="3"/><text x="5.2675%" y="287.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (3 samples, 0.02%)</title><rect x="5.0175%" y="261" width="0.0162%" height="15" fill="rgb(236,182,39)" fg:x="931" fg:w="3"/><text x="5.2675%" y="271.50"></text></g><g><title>Metal`invocation function for block in XPCCompilerConnection::BuildRequest(MTLCompilerRequest*, char const*, NSObject&lt;OS_dispatch_data&gt;*, int, bool, void  (3 samples, 0.02%)</title><rect x="5.0175%" y="245" width="0.0162%" height="15" fill="rgb(212,144,35)" fg:x="931" fg:w="3"/><text x="5.2675%" y="255.50"></text></g><g><title>Metal`XPCCompilerConnection::BuildRequestInternal(MTLCompilerRequest*, char const*, NSObject&lt;OS_dispatch_data&gt;*, int, bool, void  (3 samples, 0.02%)</title><rect x="5.0175%" y="229" width="0.0162%" height="15" fill="rgb(228,63,44)" fg:x="931" fg:w="3"/><text x="5.2675%" y="239.50"></text></g><g><title>VideoToolbox`0x00000001ac249b6c (8 samples, 0.04%)</title><rect x="5.0013%" y="437" width="0.0431%" height="15" fill="rgb(228,109,6)" fg:x="928" fg:w="8"/><text x="5.2513%" y="447.50"></text></g><g><title>VideoToolbox`VTMetalTransferSessionTransferImageSync (2 samples, 0.01%)</title><rect x="5.0337%" y="421" width="0.0108%" height="15" fill="rgb(238,117,24)" fg:x="934" fg:w="2"/><text x="5.2837%" y="431.50"></text></g><g><title>VideoToolbox`0x00000001ac2cff50 (2 samples, 0.01%)</title><rect x="5.0337%" y="405" width="0.0108%" height="15" fill="rgb(242,26,26)" fg:x="934" fg:w="2"/><text x="5.2837%" y="415.50"></text></g><g><title>Metal`-[_MTLCommandQueue submitCommandBuffer:] (2 samples, 0.01%)</title><rect x="5.0337%" y="389" width="0.0108%" height="15" fill="rgb(221,92,48)" fg:x="934" fg:w="2"/><text x="5.2837%" y="399.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.01%)</title><rect x="5.0337%" y="373" width="0.0108%" height="15" fill="rgb(209,209,32)" fg:x="934" fg:w="2"/><text x="5.2837%" y="383.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="5.0337%" y="357" width="0.0108%" height="15" fill="rgb(221,70,22)" fg:x="934" fg:w="2"/><text x="5.2837%" y="367.50"></text></g><g><title>Metal`__40-[_MTLCommandQueue submitCommandBuffer:]_block_invoke (2 samples, 0.01%)</title><rect x="5.0337%" y="341" width="0.0108%" height="15" fill="rgb(248,145,5)" fg:x="934" fg:w="2"/><text x="5.2837%" y="351.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (2 samples, 0.01%)</title><rect x="5.0337%" y="325" width="0.0108%" height="15" fill="rgb(226,116,26)" fg:x="934" fg:w="2"/><text x="5.2837%" y="335.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (2 samples, 0.01%)</title><rect x="5.0337%" y="309" width="0.0108%" height="15" fill="rgb(244,5,17)" fg:x="934" fg:w="2"/><text x="5.2837%" y="319.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (2 samples, 0.01%)</title><rect x="5.0337%" y="293" width="0.0108%" height="15" fill="rgb(252,159,33)" fg:x="934" fg:w="2"/><text x="5.2837%" y="303.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (2 samples, 0.01%)</title><rect x="5.0337%" y="277" width="0.0108%" height="15" fill="rgb(206,71,0)" fg:x="934" fg:w="2"/><text x="5.2837%" y="287.50"></text></g><g><title>IOKit`IOConnectCallMethod (2 samples, 0.01%)</title><rect x="5.0337%" y="261" width="0.0108%" height="15" fill="rgb(233,118,54)" fg:x="934" fg:w="2"/><text x="5.2837%" y="271.50"></text></g><g><title>IOKit`io_connect_method (2 samples, 0.01%)</title><rect x="5.0337%" y="245" width="0.0108%" height="15" fill="rgb(234,83,48)" fg:x="934" fg:w="2"/><text x="5.2837%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.01%)</title><rect x="5.0337%" y="229" width="0.0108%" height="15" fill="rgb(228,3,54)" fg:x="934" fg:w="2"/><text x="5.2837%" y="239.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandBuffer computeCommandEncoder] (2 samples, 0.01%)</title><rect x="5.0606%" y="405" width="0.0108%" height="15" fill="rgb(226,155,13)" fg:x="939" fg:w="2"/><text x="5.3106%" y="415.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandBuffer computeCommandEncoderWithConfig:] (2 samples, 0.01%)</title><rect x="5.0606%" y="389" width="0.0108%" height="15" fill="rgb(241,28,37)" fg:x="939" fg:w="2"/><text x="5.3106%" y="399.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyComputeContext initWithCommandBuffer:config:] (2 samples, 0.01%)</title><rect x="5.0606%" y="373" width="0.0108%" height="15" fill="rgb(233,93,10)" fg:x="939" fg:w="2"/><text x="5.3106%" y="383.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandQueue commandBuffer] (3 samples, 0.02%)</title><rect x="5.0714%" y="405" width="0.0162%" height="15" fill="rgb(225,113,19)" fg:x="941" fg:w="3"/><text x="5.3214%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="5.0768%" y="389" width="0.0108%" height="15" fill="rgb(241,2,18)" fg:x="942" fg:w="2"/><text x="5.3268%" y="399.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyComputeContext dispatchThreadgroups:threadsPerThreadgroup:] (2 samples, 0.01%)</title><rect x="5.0876%" y="405" width="0.0108%" height="15" fill="rgb(228,207,21)" fg:x="944" fg:w="2"/><text x="5.3376%" y="415.50"></text></g><g><title>AGXMetalG14X`AGX::ComputeContext&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses, AGX::G14X::EncoderComputeServiceClasses&gt;::executeKernel (2 samples, 0.01%)</title><rect x="5.0876%" y="389" width="0.0108%" height="15" fill="rgb(213,211,35)" fg:x="944" fg:w="2"/><text x="5.3376%" y="399.50"></text></g><g><title>AGXMetalG14X`AGX::ComputeService&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses, AGX::G14X::EncoderComputeServiceClasses&gt;::executeKernelCommonImpl (2 samples, 0.01%)</title><rect x="5.0876%" y="373" width="0.0108%" height="15" fill="rgb(209,83,10)" fg:x="944" fg:w="2"/><text x="5.3376%" y="383.50"></text></g><g><title>AGXMetalG14X`AGX::ComputeContext&lt;AGX::G14X::Encoders, AGX::G14X::Classes, AGX::G14X::ObjClasses, AGX::G14X::EncoderComputeServiceClasses&gt;::performEnqueueKernel (2 samples, 0.01%)</title><rect x="5.0876%" y="357" width="0.0108%" height="15" fill="rgb(209,164,1)" fg:x="944" fg:w="2"/><text x="5.3376%" y="367.50"></text></g><g><title>CoreFoundation`-[__NSArrayM dealloc] (2 samples, 0.01%)</title><rect x="5.0984%" y="405" width="0.0108%" height="15" fill="rgb(213,184,43)" fg:x="946" fg:w="2"/><text x="5.3484%" y="415.50"></text></g><g><title>CoreFoundation`__RELEASE_OBJECTS_IN_THE_ARRAY__ (2 samples, 0.01%)</title><rect x="5.0984%" y="389" width="0.0108%" height="15" fill="rgb(231,61,34)" fg:x="946" fg:w="2"/><text x="5.3484%" y="399.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="5.0984%" y="373" width="0.0108%" height="15" fill="rgb(235,75,3)" fg:x="946" fg:w="2"/><text x="5.3484%" y="383.50"></text></g><g><title>CoreVideo`CVMetalTextureCacheCreateTextureFromImage (2 samples, 0.01%)</title><rect x="5.1145%" y="405" width="0.0108%" height="15" fill="rgb(220,106,47)" fg:x="949" fg:w="2"/><text x="5.3645%" y="415.50"></text></g><g><title>CoreVideo`CVMetalTextureCache::createTextureFromImageWithParams (2 samples, 0.01%)</title><rect x="5.1145%" y="389" width="0.0108%" height="15" fill="rgb(210,196,33)" fg:x="949" fg:w="2"/><text x="5.3645%" y="399.50"></text></g><g><title>Metal`-[_MTLCommandQueue submitCommandBuffer:] (16 samples, 0.09%)</title><rect x="5.1307%" y="405" width="0.0862%" height="15" fill="rgb(229,154,42)" fg:x="952" fg:w="16"/><text x="5.3807%" y="415.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (16 samples, 0.09%)</title><rect x="5.1307%" y="389" width="0.0862%" height="15" fill="rgb(228,114,26)" fg:x="952" fg:w="16"/><text x="5.3807%" y="399.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (16 samples, 0.09%)</title><rect x="5.1307%" y="373" width="0.0862%" height="15" fill="rgb(208,144,1)" fg:x="952" fg:w="16"/><text x="5.3807%" y="383.50"></text></g><g><title>Metal`__40-[_MTLCommandQueue submitCommandBuffer:]_block_invoke (16 samples, 0.09%)</title><rect x="5.1307%" y="357" width="0.0862%" height="15" fill="rgb(239,112,37)" fg:x="952" fg:w="16"/><text x="5.3807%" y="367.50"></text></g><g><title>Metal`-[_MTLCommandQueue _submitAvailableCommandBuffers] (16 samples, 0.09%)</title><rect x="5.1307%" y="341" width="0.0862%" height="15" fill="rgb(210,96,50)" fg:x="952" fg:w="16"/><text x="5.3807%" y="351.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue submitCommandBuffers:count:] (16 samples, 0.09%)</title><rect x="5.1307%" y="325" width="0.0862%" height="15" fill="rgb(222,178,2)" fg:x="952" fg:w="16"/><text x="5.3807%" y="335.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue _submitCommandBuffers:count:] (16 samples, 0.09%)</title><rect x="5.1307%" y="309" width="0.0862%" height="15" fill="rgb(226,74,18)" fg:x="952" fg:w="16"/><text x="5.3807%" y="319.50"></text></g><g><title>IOGPU`IOGPUCommandQueueSubmitCommandBuffers (16 samples, 0.09%)</title><rect x="5.1307%" y="293" width="0.0862%" height="15" fill="rgb(225,67,54)" fg:x="952" fg:w="16"/><text x="5.3807%" y="303.50"></text></g><g><title>IOKit`IOConnectCallMethod (16 samples, 0.09%)</title><rect x="5.1307%" y="277" width="0.0862%" height="15" fill="rgb(251,92,32)" fg:x="952" fg:w="16"/><text x="5.3807%" y="287.50"></text></g><g><title>IOKit`io_connect_method (16 samples, 0.09%)</title><rect x="5.1307%" y="261" width="0.0862%" height="15" fill="rgb(228,149,22)" fg:x="952" fg:w="16"/><text x="5.3807%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (16 samples, 0.09%)</title><rect x="5.1307%" y="245" width="0.0862%" height="15" fill="rgb(243,54,13)" fg:x="952" fg:w="16"/><text x="5.3807%" y="255.50"></text></g><g><title>VideoToolbox`0x00000001ac2cff50 (31 samples, 0.17%)</title><rect x="5.0606%" y="421" width="0.1671%" height="15" fill="rgb(243,180,28)" fg:x="939" fg:w="31"/><text x="5.3106%" y="431.50"></text></g><g><title>CMIOBaseUnits`0x000000010f60709c (62 samples, 0.33%)</title><rect x="4.8989%" y="469" width="0.3341%" height="15" fill="rgb(208,167,24)" fg:x="909" fg:w="62"/><text x="5.1489%" y="479.50"></text></g><g><title>VideoToolbox`0x00000001ac0a1fd4 (57 samples, 0.31%)</title><rect x="4.9259%" y="453" width="0.3072%" height="15" fill="rgb(245,73,45)" fg:x="914" fg:w="57"/><text x="5.1759%" y="463.50"></text></g><g><title>VideoToolbox`VTMetalTransferSessionTransferImageSync (35 samples, 0.19%)</title><rect x="5.0445%" y="437" width="0.1886%" height="15" fill="rgb(237,203,48)" fg:x="936" fg:w="35"/><text x="5.2945%" y="447.50"></text></g><g><title>CMIOBaseUnits`0x000000010f604674 (63 samples, 0.34%)</title><rect x="4.8989%" y="485" width="0.3395%" height="15" fill="rgb(211,197,16)" fg:x="909" fg:w="63"/><text x="5.1489%" y="495.50"></text></g><g><title>CMIOBaseUnits`0x000000010f6025f0 (64 samples, 0.34%)</title><rect x="4.8989%" y="501" width="0.3449%" height="15" fill="rgb(243,99,51)" fg:x="909" fg:w="64"/><text x="5.1489%" y="511.50"></text></g><g><title>CoreMediaIO`CMIO::Thread::QueuedTWorkThread&lt;unsigned int&gt;::DoWork (107 samples, 0.58%)</title><rect x="4.7912%" y="805" width="0.5767%" height="15" fill="rgb(215,123,29)" fg:x="889" fg:w="107"/><text x="5.0412%" y="815.50"></text></g><g><title>CoreMediaIO`CMIOGraph::DoEmptyQueueWork (107 samples, 0.58%)</title><rect x="4.7912%" y="789" width="0.5767%" height="15" fill="rgb(239,186,37)" fg:x="889" fg:w="107"/><text x="5.0412%" y="799.50"></text></g><g><title>CoreMediaIO`CMIOGraph::PullOutputUnits (105 samples, 0.57%)</title><rect x="4.8019%" y="773" width="0.5659%" height="15" fill="rgb(252,136,39)" fg:x="891" fg:w="105"/><text x="5.0519%" y="783.50"></text></g><g><title>CMIOBaseUnits`0x000000010f589e74 (105 samples, 0.57%)</title><rect x="4.8019%" y="757" width="0.5659%" height="15" fill="rgb(223,213,32)" fg:x="891" fg:w="105"/><text x="5.0519%" y="767.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5d4ecc (105 samples, 0.57%)</title><rect x="4.8019%" y="741" width="0.5659%" height="15" fill="rgb(233,115,5)" fg:x="891" fg:w="105"/><text x="5.0519%" y="751.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (105 samples, 0.57%)</title><rect x="4.8019%" y="725" width="0.5659%" height="15" fill="rgb(207,226,44)" fg:x="891" fg:w="105"/><text x="5.0519%" y="735.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5d4140 (105 samples, 0.57%)</title><rect x="4.8019%" y="709" width="0.5659%" height="15" fill="rgb(208,126,0)" fg:x="891" fg:w="105"/><text x="5.0519%" y="719.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (101 samples, 0.54%)</title><rect x="4.8235%" y="693" width="0.5443%" height="15" fill="rgb(244,66,21)" fg:x="895" fg:w="101"/><text x="5.0735%" y="703.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (101 samples, 0.54%)</title><rect x="4.8235%" y="677" width="0.5443%" height="15" fill="rgb(222,97,12)" fg:x="895" fg:w="101"/><text x="5.0735%" y="687.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (101 samples, 0.54%)</title><rect x="4.8235%" y="661" width="0.5443%" height="15" fill="rgb(219,213,19)" fg:x="895" fg:w="101"/><text x="5.0735%" y="671.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c979c (101 samples, 0.54%)</title><rect x="4.8235%" y="645" width="0.5443%" height="15" fill="rgb(252,169,30)" fg:x="895" fg:w="101"/><text x="5.0735%" y="655.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (101 samples, 0.54%)</title><rect x="4.8235%" y="629" width="0.5443%" height="15" fill="rgb(206,32,51)" fg:x="895" fg:w="101"/><text x="5.0735%" y="639.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (101 samples, 0.54%)</title><rect x="4.8235%" y="613" width="0.5443%" height="15" fill="rgb(250,172,42)" fg:x="895" fg:w="101"/><text x="5.0735%" y="623.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (101 samples, 0.54%)</title><rect x="4.8235%" y="597" width="0.5443%" height="15" fill="rgb(209,34,43)" fg:x="895" fg:w="101"/><text x="5.0735%" y="607.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c979c (101 samples, 0.54%)</title><rect x="4.8235%" y="581" width="0.5443%" height="15" fill="rgb(223,11,35)" fg:x="895" fg:w="101"/><text x="5.0735%" y="591.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5a4cf8 (101 samples, 0.54%)</title><rect x="4.8235%" y="565" width="0.5443%" height="15" fill="rgb(251,219,26)" fg:x="895" fg:w="101"/><text x="5.0735%" y="575.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586690 (101 samples, 0.54%)</title><rect x="4.8235%" y="549" width="0.5443%" height="15" fill="rgb(231,119,3)" fg:x="895" fg:w="101"/><text x="5.0735%" y="559.50"></text></g><g><title>CMIOBaseUnits`0x000000010f57aa78 (101 samples, 0.54%)</title><rect x="4.8235%" y="533" width="0.5443%" height="15" fill="rgb(216,97,11)" fg:x="895" fg:w="101"/><text x="5.0735%" y="543.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5c979c (101 samples, 0.54%)</title><rect x="4.8235%" y="517" width="0.5443%" height="15" fill="rgb(223,59,9)" fg:x="895" fg:w="101"/><text x="5.0735%" y="527.50"></text></g><g><title>CoreFoundation`_CFRelease (23 samples, 0.12%)</title><rect x="5.2439%" y="501" width="0.1240%" height="15" fill="rgb(233,93,31)" fg:x="973" fg:w="23"/><text x="5.4939%" y="511.50"></text></g><g><title>CoreMedia`sBufFinalize (23 samples, 0.12%)</title><rect x="5.2439%" y="485" width="0.1240%" height="15" fill="rgb(239,81,33)" fg:x="973" fg:w="23"/><text x="5.4939%" y="495.50"></text></g><g><title>CoreFoundation`_CFRelease (23 samples, 0.12%)</title><rect x="5.2439%" y="469" width="0.1240%" height="15" fill="rgb(213,120,34)" fg:x="973" fg:w="23"/><text x="5.4939%" y="479.50"></text></g><g><title>CoreVideo`CVPixelBuffer::finalize (23 samples, 0.12%)</title><rect x="5.2439%" y="453" width="0.1240%" height="15" fill="rgb(243,49,53)" fg:x="973" fg:w="23"/><text x="5.4939%" y="463.50"></text></g><g><title>CoreVideo`CVPixelBufferBacking::releaseUsage (22 samples, 0.12%)</title><rect x="5.2493%" y="437" width="0.1186%" height="15" fill="rgb(247,216,33)" fg:x="974" fg:w="22"/><text x="5.4993%" y="447.50"></text></g><g><title>IOKit`iokit_user_client_trap (22 samples, 0.12%)</title><rect x="5.2493%" y="421" width="0.1186%" height="15" fill="rgb(226,26,14)" fg:x="974" fg:w="22"/><text x="5.4993%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (24 samples, 0.13%)</title><rect x="5.3732%" y="773" width="0.1293%" height="15" fill="rgb(215,49,53)" fg:x="997" fg:w="24"/><text x="5.6232%" y="783.50"></text></g><g><title>CoreMedia`figThreadMain (134 samples, 0.72%)</title><rect x="4.7858%" y="853" width="0.7222%" height="15" fill="rgb(245,162,40)" fg:x="888" fg:w="134"/><text x="5.0358%" y="863.50"></text></g><g><title>CoreMediaIO`CMIO::Thread::SignaledThread::WorkQueuedThreadCallback (134 samples, 0.72%)</title><rect x="4.7858%" y="837" width="0.7222%" height="15" fill="rgb(229,68,17)" fg:x="888" fg:w="134"/><text x="5.0358%" y="847.50"></text></g><g><title>CoreMediaIO`CMIO::Thread::SignaledThread::ThreadLoop (134 samples, 0.72%)</title><rect x="4.7858%" y="821" width="0.7222%" height="15" fill="rgb(213,182,10)" fg:x="888" fg:w="134"/><text x="5.0358%" y="831.50"></text></g><g><title>CoreMedia`FigSemaphoreWaitRelative (26 samples, 0.14%)</title><rect x="5.3678%" y="805" width="0.1401%" height="15" fill="rgb(245,125,30)" fg:x="996" fg:w="26"/><text x="5.6178%" y="815.50"></text></g><g><title>CoreMedia`WaitOnConditionTimed (26 samples, 0.14%)</title><rect x="5.3678%" y="789" width="0.1401%" height="15" fill="rgb(232,202,2)" fg:x="996" fg:w="26"/><text x="5.6178%" y="799.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::RunQueue&lt;std::__1::function&lt;void ()&gt;, onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::Tag, 1024u&gt;::PopFront (1,928 samples, 10.39%)</title><rect x="5.5079%" y="821" width="10.3907%" height="15" fill="rgb(237,140,51)" fg:x="1022" fg:w="1928"/><text x="5.7579%" y="831.50">libonnxruntime...</text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::RunQueue&lt;std::__1::function&lt;void ()&gt;, onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::Tag, 1024u&gt;::PopFront (3,996 samples, 21.54%)</title><rect x="36.6963%" y="805" width="21.5360%" height="15" fill="rgb(236,157,25)" fg:x="6809" fg:w="3996"/><text x="36.9463%" y="815.50">libonnxruntime.dylib`onnxruntime::..</text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::RunQueue&lt;std::__1::function&lt;void ()&gt;, onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::Tag, 1024u&gt;::PushBackWithTag(std::__1::function&lt;void ()&gt;, onnxruntime::concurrency::ThreadPoolTempl (3 samples, 0.02%)</title><rect x="58.2323%" y="789" width="0.0162%" height="15" fill="rgb(219,209,0)" fg:x="10805" fg:w="3"/><text x="58.4823%" y="799.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (5 samples, 0.03%)</title><rect x="58.2485%" y="789" width="0.0269%" height="15" fill="rgb(240,116,54)" fg:x="10808" fg:w="5"/><text x="58.4985%" y="799.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::RunQueue&lt;std::__1::function&lt;void ()&gt;, onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::Tag, 1024u&gt;::PushBackWithTag(std::__1::function&lt;void ()&gt;, onnxruntime::concurrency::ThreadPoolTempl (2 samples, 0.01%)</title><rect x="58.2808%" y="773" width="0.0108%" height="15" fill="rgb(216,10,36)" fg:x="10814" fg:w="2"/><text x="58.5308%" y="783.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::__clone (2 samples, 0.01%)</title><rect x="58.2970%" y="773" width="0.0108%" height="15" fill="rgb(222,72,44)" fg:x="10817" fg:w="2"/><text x="58.5470%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="58.2970%" y="757" width="0.0108%" height="15" fill="rgb(232,159,9)" fg:x="10817" fg:w="2"/><text x="58.5470%" y="767.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void  (7 samples, 0.04%)</title><rect x="58.2754%" y="789" width="0.0377%" height="15" fill="rgb(210,39,32)" fg:x="10813" fg:w="7"/><text x="58.5254%" y="799.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::UpdatePreferredWorker(absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator (7 samples, 0.04%)</title><rect x="58.3131%" y="789" width="0.0377%" height="15" fill="rgb(216,194,45)" fg:x="10820" fg:w="7"/><text x="58.5631%" y="799.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253&gt;, void (long, long)&gt;::operator() (45 samples, 0.24%)</title><rect x="58.3616%" y="773" width="0.2425%" height="15" fill="rgb(218,18,35)" fg:x="10829" fg:w="45"/><text x="58.6116%" y="783.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PRelu&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::$_241::__invoke (45 samples, 0.24%)</title><rect x="58.3616%" y="757" width="0.2425%" height="15" fill="rgb(207,83,51)" fg:x="10829" fg:w="45"/><text x="58.6116%" y="767.50"></text></g><g><title>libonnxruntime.dylib`MlasConvIm2Col(MLAS_CONV_PARAMETERS const*, float const*, float*, unsigned long, unsigned long, unsigned long, unsigned long) (2 samples, 0.01%)</title><rect x="58.6149%" y="757" width="0.0108%" height="15" fill="rgb(225,63,43)" fg:x="10876" fg:w="2"/><text x="58.8649%" y="767.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.ExitKernel (2 samples, 0.01%)</title><rect x="58.6257%" y="741" width="0.0108%" height="15" fill="rgb(207,57,36)" fg:x="10878" fg:w="2"/><text x="58.8757%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.MultiplyAccumulateBy64 (12 samples, 0.06%)</title><rect x="58.6365%" y="741" width="0.0647%" height="15" fill="rgb(216,99,33)" fg:x="10880" fg:w="12"/><text x="58.8865%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.StoreOutputBy64 (2 samples, 0.01%)</title><rect x="58.7119%" y="741" width="0.0108%" height="15" fill="rgb(225,42,16)" fg:x="10894" fg:w="2"/><text x="58.9619%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy4Loop (28 samples, 0.15%)</title><rect x="58.7227%" y="741" width="0.1509%" height="15" fill="rgb(220,201,45)" fg:x="10896" fg:w="28"/><text x="58.9727%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasActivation(MLAS_ACTIVATION const*, float*, float const*, unsigned long, unsigned long, unsigned long) (14 samples, 0.08%)</title><rect x="58.8844%" y="741" width="0.0755%" height="15" fill="rgb(225,33,4)" fg:x="10926" fg:w="14"/><text x="59.1344%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasConvIm2Col(MLAS_CONV_PARAMETERS const*, float const*, float*, unsigned long, unsigned long, unsigned long, unsigned long) (113 samples, 0.61%)</title><rect x="58.9598%" y="741" width="0.6090%" height="15" fill="rgb(224,33,50)" fg:x="10940" fg:w="113"/><text x="59.2098%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (7 samples, 0.04%)</title><rect x="59.5688%" y="741" width="0.0377%" height="15" fill="rgb(246,198,51)" fg:x="11053" fg:w="7"/><text x="59.8188%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasConvOperation(MLAS_CONV_PARAMETERS const*, float const*, float const*, float const*, float*, float*, unsigned long, unsigned long) (184 samples, 0.99%)</title><rect x="58.6257%" y="757" width="0.9916%" height="15" fill="rgb(205,22,4)" fg:x="10878" fg:w="184"/><text x="58.8757%" y="767.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long) (2 samples, 0.01%)</title><rect x="59.6066%" y="741" width="0.0108%" height="15" fill="rgb(206,3,8)" fg:x="11060" fg:w="2"/><text x="59.8566%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Compute16.x4.BlockBy4Loop (67 samples, 0.36%)</title><rect x="59.6227%" y="725" width="0.3611%" height="15" fill="rgb(251,23,15)" fg:x="11063" fg:w="67"/><text x="59.8727%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Output16.x4.Block (7 samples, 0.04%)</title><rect x="59.9838%" y="725" width="0.0377%" height="15" fill="rgb(252,88,28)" fg:x="11130" fg:w="7"/><text x="60.2338%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.ProcessNextColumnLoop16x4 (3 samples, 0.02%)</title><rect x="60.0216%" y="725" width="0.0162%" height="15" fill="rgb(212,127,14)" fg:x="11137" fg:w="3"/><text x="60.2716%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy4Loop (53 samples, 0.29%)</title><rect x="60.0431%" y="725" width="0.2856%" height="15" fill="rgb(247,145,37)" fg:x="11141" fg:w="53"/><text x="60.2931%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute8.x4.BlockBy4Loop (10 samples, 0.05%)</title><rect x="60.3288%" y="725" width="0.0539%" height="15" fill="rgb(209,117,53)" fg:x="11194" fg:w="10"/><text x="60.5788%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Output16.x4.Block (3 samples, 0.02%)</title><rect x="60.3826%" y="725" width="0.0162%" height="15" fill="rgb(212,90,42)" fg:x="11204" fg:w="3"/><text x="60.6326%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.ProcessNextColumnLoop16x4 (4 samples, 0.02%)</title><rect x="60.3988%" y="725" width="0.0216%" height="15" fill="rgb(218,164,37)" fg:x="11207" fg:w="4"/><text x="60.6488%" y="735.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (43 samples, 0.23%)</title><rect x="60.4204%" y="725" width="0.2317%" height="15" fill="rgb(246,65,34)" fg:x="11211" fg:w="43"/><text x="60.6704%" y="735.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (195 samples, 1.05%)</title><rect x="59.6174%" y="757" width="1.0509%" height="15" fill="rgb(231,100,33)" fg:x="11062" fg:w="195"/><text x="59.8674%" y="767.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (195 samples, 1.05%)</title><rect x="59.6174%" y="741" width="1.0509%" height="15" fill="rgb(228,126,14)" fg:x="11062" fg:w="195"/><text x="59.8674%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long) (2 samples, 0.01%)</title><rect x="60.6575%" y="725" width="0.0108%" height="15" fill="rgb(215,173,21)" fg:x="11255" fg:w="2"/><text x="60.9075%" y="735.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallelInternal(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, unsigned int, bool, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()::operator() (455 samples, 2.45%)</title><rect x="58.2323%" y="805" width="2.4522%" height="15" fill="rgb(210,6,40)" fg:x="10805" fg:w="455"/><text x="58.4823%" y="815.50">li..</text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (433 samples, 2.33%)</title><rect x="58.3508%" y="789" width="2.3336%" height="15" fill="rgb(212,48,18)" fg:x="10827" fg:w="433"/><text x="58.6008%" y="799.50">l..</text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (386 samples, 2.08%)</title><rect x="58.6041%" y="773" width="2.0803%" height="15" fill="rgb(230,214,11)" fg:x="10874" fg:w="386"/><text x="58.8541%" y="783.50">l..</text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&gt;(onnxruntime::concurrency::ThreadPool*, long, MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&amp;&amp;, long)::&apos;lambda&apos;(long), std::__1::allocator&lt;void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&gt;(onnxruntime::concurrency::ThreadPool*, long, MlasPool (3 samples, 0.02%)</title><rect x="60.6683%" y="757" width="0.0162%" height="15" fill="rgb(254,105,39)" fg:x="11257" fg:w="3"/><text x="60.9183%" y="767.50"></text></g><g><title>libonnxruntime.dylib`void MlasPool2DVectorKernel&lt;MLAS_MAXIMUM_POOLING&gt;(MLAS_POOL_WORK_BLOCK const*, unsigned long, float const*, float*) (3 samples, 0.02%)</title><rect x="60.6683%" y="741" width="0.0162%" height="15" fill="rgb(245,158,5)" fg:x="11257" fg:w="3"/><text x="60.9183%" y="751.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::Steal (2 samples, 0.01%)</title><rect x="60.6845%" y="805" width="0.0108%" height="15" fill="rgb(249,208,11)" fg:x="11260" fg:w="2"/><text x="60.9345%" y="815.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerData::SetBlocked(std::__1::function&lt;bool ()&gt;, std::__1::function&lt;void  (4 samples, 0.02%)</title><rect x="60.6952%" y="805" width="0.0216%" height="15" fill="rgb(210,39,28)" fg:x="11262" fg:w="4"/><text x="60.9452%" y="815.50"></text></g><g><title>libonnxruntime.dylib`nsync::nsync_cv_wait_with_deadline_generic(nsync::nsync_cv_s_*, void*, void (*)(void*), void (*) (4 samples, 0.02%)</title><rect x="60.6952%" y="789" width="0.0216%" height="15" fill="rgb(211,56,53)" fg:x="11262" fg:w="4"/><text x="60.9452%" y="799.50"></text></g><g><title>libonnxruntime.dylib`nsync::nsync_mu_semaphore_p_with_deadline (4 samples, 0.02%)</title><rect x="60.6952%" y="773" width="0.0216%" height="15" fill="rgb(226,201,30)" fg:x="11262" fg:w="4"/><text x="60.9452%" y="783.50"></text></g><g><title>libc++.1.dylib`std::__1::condition_variable::wait(std::__1::unique_lock (4 samples, 0.02%)</title><rect x="60.6952%" y="757" width="0.0216%" height="15" fill="rgb(239,101,34)" fg:x="11262" fg:w="4"/><text x="60.9452%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (4 samples, 0.02%)</title><rect x="60.6952%" y="741" width="0.0216%" height="15" fill="rgb(226,209,5)" fg:x="11262" fg:w="4"/><text x="60.9452%" y="751.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;(), std::__1::allocator&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()&gt;, void ()&gt;::destroy_deallocate (4 samples, 0.02%)</title><rect x="60.7168%" y="805" width="0.0216%" height="15" fill="rgb(250,105,47)" fg:x="11266" fg:w="4"/><text x="60.9668%" y="815.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="60.7168%" y="789" width="0.0216%" height="15" fill="rgb(230,72,3)" fg:x="11266" fg:w="4"/><text x="60.9668%" y="799.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253&gt;, void (long, long)&gt;::operator() (4 samples, 0.02%)</title><rect x="60.7545%" y="789" width="0.0216%" height="15" fill="rgb(232,218,39)" fg:x="11273" fg:w="4"/><text x="61.0045%" y="799.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::BroadcastIterator::AdvanceBy (2 samples, 0.01%)</title><rect x="60.7922%" y="757" width="0.0108%" height="15" fill="rgb(248,166,6)" fg:x="11280" fg:w="2"/><text x="61.0422%" y="767.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PRelu&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::$_241::__invoke (106 samples, 0.57%)</title><rect x="60.8030%" y="757" width="0.5713%" height="15" fill="rgb(247,89,20)" fg:x="11282" fg:w="106"/><text x="61.0530%" y="767.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253&gt;, void (long, long)&gt;::operator() (109 samples, 0.59%)</title><rect x="60.7922%" y="773" width="0.5874%" height="15" fill="rgb(248,130,54)" fg:x="11280" fg:w="109"/><text x="61.0422%" y="783.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.ExitKernel (2 samples, 0.01%)</title><rect x="61.3851%" y="741" width="0.0108%" height="15" fill="rgb(234,196,4)" fg:x="11390" fg:w="2"/><text x="61.6351%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.MultiplyAccumulateBy64 (10 samples, 0.05%)</title><rect x="61.3959%" y="741" width="0.0539%" height="15" fill="rgb(250,143,31)" fg:x="11392" fg:w="10"/><text x="61.6459%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy1Loop (4 samples, 0.02%)</title><rect x="61.4551%" y="741" width="0.0216%" height="15" fill="rgb(211,110,34)" fg:x="11403" fg:w="4"/><text x="61.7051%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy4Loop (82 samples, 0.44%)</title><rect x="61.4767%" y="741" width="0.4419%" height="15" fill="rgb(215,124,48)" fg:x="11407" fg:w="82"/><text x="61.7267%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Output16.x4.Block (5 samples, 0.03%)</title><rect x="61.9186%" y="741" width="0.0269%" height="15" fill="rgb(216,46,13)" fg:x="11489" fg:w="5"/><text x="62.1686%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LZero.ProcessNextColumnLoop16x4 (4 samples, 0.02%)</title><rect x="61.9456%" y="741" width="0.0216%" height="15" fill="rgb(205,184,25)" fg:x="11494" fg:w="4"/><text x="62.1956%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasActivation(MLAS_ACTIVATION const*, float*, float const*, unsigned long, unsigned long, unsigned long) (15 samples, 0.08%)</title><rect x="61.9671%" y="741" width="0.0808%" height="15" fill="rgb(228,1,10)" fg:x="11498" fg:w="15"/><text x="62.2171%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasConvIm2Col(MLAS_CONV_PARAMETERS const*, float const*, float*, unsigned long, unsigned long, unsigned long, unsigned long) (196 samples, 1.06%)</title><rect x="62.0480%" y="741" width="1.0563%" height="15" fill="rgb(213,116,27)" fg:x="11513" fg:w="196"/><text x="62.2980%" y="751.50"></text></g><g><title>libonnxruntime.dylib`MlasConvOperation(MLAS_CONV_PARAMETERS const*, float const*, float const*, float const*, float*, float*, unsigned long, unsigned long) (356 samples, 1.92%)</title><rect x="61.3797%" y="757" width="1.9186%" height="15" fill="rgb(241,95,50)" fg:x="11389" fg:w="356"/><text x="61.6297%" y="767.50">l..</text></g><g><title>libonnxruntime.dylib`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (36 samples, 0.19%)</title><rect x="63.1043%" y="741" width="0.1940%" height="15" fill="rgb(238,48,32)" fg:x="11709" fg:w="36"/><text x="63.3543%" y="751.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Compute16.x1.BlockBy4Loop (2 samples, 0.01%)</title><rect x="63.2983%" y="725" width="0.0108%" height="15" fill="rgb(235,113,49)" fg:x="11745" fg:w="2"/><text x="63.5483%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Compute16.x4.BlockBy4Loop (183 samples, 0.99%)</title><rect x="63.3145%" y="725" width="0.9863%" height="15" fill="rgb(205,127,43)" fg:x="11748" fg:w="183"/><text x="63.5645%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Output16.x4.Block (30 samples, 0.16%)</title><rect x="64.3007%" y="725" width="0.1617%" height="15" fill="rgb(250,162,2)" fg:x="11931" fg:w="30"/><text x="64.5507%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.ProcessNextColumnLoop16x4 (11 samples, 0.06%)</title><rect x="64.4624%" y="725" width="0.0593%" height="15" fill="rgb(220,13,41)" fg:x="11961" fg:w="11"/><text x="64.7124%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x1.BlockBy4Loop (2 samples, 0.01%)</title><rect x="64.5217%" y="725" width="0.0108%" height="15" fill="rgb(249,221,25)" fg:x="11972" fg:w="2"/><text x="64.7717%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy4Loop (165 samples, 0.89%)</title><rect x="64.5325%" y="725" width="0.8892%" height="15" fill="rgb(215,208,19)" fg:x="11974" fg:w="165"/><text x="64.7825%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute8.x4.BlockBy4Loop (29 samples, 0.16%)</title><rect x="65.4217%" y="725" width="0.1563%" height="15" fill="rgb(236,175,2)" fg:x="12139" fg:w="29"/><text x="65.6717%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Output16.x4.Block (7 samples, 0.04%)</title><rect x="65.5780%" y="725" width="0.0377%" height="15" fill="rgb(241,52,2)" fg:x="12168" fg:w="7"/><text x="65.8280%" y="735.50"></text></g><g><title>libonnxruntime.dylib`.LZero.ProcessNextColumnLoop16x4 (9 samples, 0.05%)</title><rect x="65.6157%" y="725" width="0.0485%" height="15" fill="rgb(248,140,14)" fg:x="12175" fg:w="9"/><text x="65.8657%" y="735.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (120 samples, 0.65%)</title><rect x="65.6642%" y="725" width="0.6467%" height="15" fill="rgb(253,22,42)" fg:x="12184" fg:w="120"/><text x="65.9142%" y="735.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (565 samples, 3.05%)</title><rect x="63.2983%" y="757" width="3.0450%" height="15" fill="rgb(234,61,47)" fg:x="11745" fg:w="565"/><text x="63.5483%" y="767.50">lib..</text></g><g><title>libonnxruntime.dylib`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (565 samples, 3.05%)</title><rect x="63.2983%" y="741" width="3.0450%" height="15" fill="rgb(208,226,15)" fg:x="11745" fg:w="565"/><text x="63.5483%" y="751.50">lib..</text></g><g><title>libonnxruntime.dylib`MlasSgemmOperation(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, float, float const*, unsigned long, float const*, unsigned long, float, float*, unsigned long) (5 samples, 0.03%)</title><rect x="66.3164%" y="725" width="0.0269%" height="15" fill="rgb(217,221,4)" fg:x="12305" fg:w="5"/><text x="66.5664%" y="735.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;(), std::__1::allocator&lt;onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::ScheduleOnPreferredWorkers(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, absl::lts_20220623::InlinedVector&lt;int, 11ul, std::__1::allocator&lt;int&gt;&gt;&amp;, unsigned int, unsigned int, std::__1::function&lt;void (unsigned int)&gt;)::&apos;lambda&apos;()&gt;, void ()&gt;::operator() (1,053 samples, 5.68%)</title><rect x="60.7383%" y="805" width="5.6750%" height="15" fill="rgb(212,174,34)" fg:x="11270" fg:w="1053"/><text x="60.9883%" y="815.50">libonnx..</text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (1,046 samples, 5.64%)</title><rect x="60.7761%" y="789" width="5.6373%" height="15" fill="rgb(253,83,4)" fg:x="11277" fg:w="1046"/><text x="61.0261%" y="799.50">libonnx..</text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (934 samples, 5.03%)</title><rect x="61.3797%" y="773" width="5.0337%" height="15" fill="rgb(250,195,49)" fg:x="11389" fg:w="934"/><text x="61.6297%" y="783.50">libonn..</text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&gt;(onnxruntime::concurrency::ThreadPool*, long, MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&amp;&amp;, long)::&apos;lambda&apos;(long), std::__1::allocator&lt;void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&gt;(onnxruntime::concurrency::ThreadPool*, long, MlasPool (13 samples, 0.07%)</title><rect x="66.3433%" y="757" width="0.0701%" height="15" fill="rgb(241,192,25)" fg:x="12310" fg:w="13"/><text x="66.5933%" y="767.50"></text></g><g><title>libonnxruntime.dylib`void MlasPool2DVectorKernel&lt;MLAS_MAXIMUM_POOLING&gt;(MLAS_POOL_WORK_BLOCK const*, unsigned long, float const*, float*) (13 samples, 0.07%)</title><rect x="66.3433%" y="741" width="0.0701%" height="15" fill="rgb(208,124,10)" fg:x="12310" fg:w="13"/><text x="66.5933%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="66.4134%" y="805" width="0.0216%" height="15" fill="rgb(222,33,0)" fg:x="12323" fg:w="4"/><text x="66.6634%" y="815.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::(anonymous namespace)::PosixThread::ThreadMain (11,306 samples, 60.93%)</title><rect x="5.5079%" y="853" width="60.9324%" height="15" fill="rgb(234,209,28)" fg:x="1022" fg:w="11306"/><text x="5.7579%" y="863.50">libonnxruntime.dylib`onnxruntime::(anonymous namespace)::PosixThread::ThreadMain</text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop (11,306 samples, 60.93%)</title><rect x="5.5079%" y="837" width="60.9324%" height="15" fill="rgb(224,11,23)" fg:x="1022" fg:w="11306"/><text x="5.7579%" y="847.50">libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop</text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerLoop (9,378 samples, 50.54%)</title><rect x="15.8987%" y="821" width="50.5416%" height="15" fill="rgb(232,99,1)" fg:x="2950" fg:w="9378"/><text x="16.1487%" y="831.50">libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::W..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (118 samples, 0.64%)</title><rect x="66.4403%" y="805" width="0.6359%" height="15" fill="rgb(237,95,45)" fg:x="12328" fg:w="118"/><text x="66.6903%" y="815.50"></text></g><g><title>libsystem_kernel.dylib`madvise (203 samples, 1.09%)</title><rect x="67.1032%" y="773" width="1.0940%" height="15" fill="rgb(208,109,11)" fg:x="12451" fg:w="203"/><text x="67.3532%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (206 samples, 1.11%)</title><rect x="67.0924%" y="789" width="1.1102%" height="15" fill="rgb(216,190,48)" fg:x="12449" fg:w="206"/><text x="67.3424%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (95 samples, 0.51%)</title><rect x="68.2026%" y="789" width="0.5120%" height="15" fill="rgb(251,171,36)" fg:x="12655" fg:w="95"/><text x="68.4526%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (40 samples, 0.22%)</title><rect x="68.7146%" y="789" width="0.2156%" height="15" fill="rgb(230,62,22)" fg:x="12750" fg:w="40"/><text x="68.9646%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (61 samples, 0.33%)</title><rect x="69.3182%" y="773" width="0.3288%" height="15" fill="rgb(225,114,35)" fg:x="12862" fg:w="61"/><text x="69.5682%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (25 samples, 0.13%)</title><rect x="69.6470%" y="773" width="0.1347%" height="15" fill="rgb(215,118,42)" fg:x="12923" fg:w="25"/><text x="69.8970%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`free (89 samples, 0.48%)</title><rect x="69.7817%" y="773" width="0.4797%" height="15" fill="rgb(243,119,21)" fg:x="12948" fg:w="89"/><text x="70.0317%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (158 samples, 0.85%)</title><rect x="70.2614%" y="773" width="0.8515%" height="15" fill="rgb(252,177,53)" fg:x="13037" fg:w="158"/><text x="70.5114%" y="783.50"></text></g><g><title>rust-eyetracking`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (325 samples, 1.75%)</title><rect x="71.1129%" y="773" width="1.7515%" height="15" fill="rgb(237,209,29)" fg:x="13195" fg:w="325"/><text x="71.3629%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (156 samples, 0.84%)</title><rect x="72.0237%" y="757" width="0.8407%" height="15" fill="rgb(212,65,23)" fg:x="13364" fg:w="156"/><text x="72.2737%" y="767.50"></text></g><g><title>rust-eyetracking`DYLD-STUB$$free (19 samples, 0.10%)</title><rect x="72.8645%" y="773" width="0.1024%" height="15" fill="rgb(230,222,46)" fg:x="13520" fg:w="19"/><text x="73.1145%" y="783.50"></text></g><g><title>rust-eyetracking`DYLD-STUB$$malloc (13 samples, 0.07%)</title><rect x="72.9669%" y="773" width="0.0701%" height="15" fill="rgb(215,135,32)" fg:x="13539" fg:w="13"/><text x="73.2169%" y="783.50"></text></g><g><title>rust-eyetracking`__rdl_alloc (27 samples, 0.15%)</title><rect x="73.0369%" y="773" width="0.1455%" height="15" fill="rgb(246,101,22)" fg:x="13552" fg:w="27"/><text x="73.2869%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.08%)</title><rect x="73.1824%" y="709" width="0.0808%" height="15" fill="rgb(206,107,13)" fg:x="13579" fg:w="15"/><text x="73.4324%" y="719.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.08%)</title><rect x="73.1824%" y="693" width="0.0808%" height="15" fill="rgb(250,100,44)" fg:x="13579" fg:w="15"/><text x="73.4324%" y="703.50"></text></g><g><title>libsystem_kernel.dylib`madvise (15 samples, 0.08%)</title><rect x="73.1824%" y="677" width="0.0808%" height="15" fill="rgb(231,147,38)" fg:x="13579" fg:w="15"/><text x="73.4324%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (20 samples, 0.11%)</title><rect x="73.1824%" y="725" width="0.1078%" height="15" fill="rgb(229,8,40)" fg:x="13579" fg:w="20"/><text x="73.4324%" y="735.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="73.2633%" y="709" width="0.0269%" height="15" fill="rgb(221,135,30)" fg:x="13594" fg:w="5"/><text x="73.5133%" y="719.50"></text></g><g><title>rust-eyetracking`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (809 samples, 4.36%)</title><rect x="68.9356%" y="789" width="4.3600%" height="15" fill="rgb(249,193,18)" fg:x="12791" fg:w="809"/><text x="69.1856%" y="799.50">rust-..</text></g><g><title>rust-eyetracking`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.11%)</title><rect x="73.1824%" y="773" width="0.1132%" height="15" fill="rgb(209,133,39)" fg:x="13579" fg:w="21"/><text x="73.4324%" y="783.50"></text></g><g><title>rust-eyetracking`alloc::raw_vec::finish_grow (21 samples, 0.11%)</title><rect x="73.1824%" y="757" width="0.1132%" height="15" fill="rgb(232,100,14)" fg:x="13579" fg:w="21"/><text x="73.4324%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.11%)</title><rect x="73.1824%" y="741" width="0.1132%" height="15" fill="rgb(224,185,1)" fg:x="13579" fg:w="21"/><text x="73.4324%" y="751.50"></text></g><g><title>rust-eyetracking`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.38%)</title><rect x="73.2956%" y="789" width="0.3826%" height="15" fill="rgb(223,139,8)" fg:x="13600" fg:w="71"/><text x="73.5456%" y="799.50"></text></g><g><title>rust-eyetracking`&lt;core::time::Duration as core::iter::traits::accum::Sum&lt;&amp;core::time::Duration&gt;&gt;::sum (2 samples, 0.01%)</title><rect x="73.6783%" y="789" width="0.0108%" height="15" fill="rgb(232,213,38)" fg:x="13671" fg:w="2"/><text x="73.9283%" y="799.50"></text></g><g><title>rust-eyetracking`&lt;image::imageops::sample::FloatNearest as num_traits::cast::ToPrimitive&gt;::to_u8 (47 samples, 0.25%)</title><rect x="73.6890%" y="789" width="0.2533%" height="15" fill="rgb(207,94,22)" fg:x="13673" fg:w="47"/><text x="73.9390%" y="799.50"></text></g><g><title>AVFCapture`-[AVCaptureDeviceInput_Tundra addInputUnitsForInputPort:toGraph:ofCaptureSession:error:] (3 samples, 0.02%)</title><rect x="73.9639%" y="629" width="0.0162%" height="15" fill="rgb(219,183,54)" fg:x="13724" fg:w="3"/><text x="74.2139%" y="639.50"></text></g><g><title>CoreMediaIO`CMIOGraphCreateNode (2 samples, 0.01%)</title><rect x="73.9693%" y="613" width="0.0108%" height="15" fill="rgb(216,185,54)" fg:x="13725" fg:w="2"/><text x="74.2193%" y="623.50"></text></g><g><title>CoreMediaIO`CMIOGraph::CreateNode (2 samples, 0.01%)</title><rect x="73.9693%" y="597" width="0.0108%" height="15" fill="rgb(254,217,39)" fg:x="13725" fg:w="2"/><text x="74.2193%" y="607.50"></text></g><g><title>CoreMediaIO`CMIOUnitNodeInfo::Open (2 samples, 0.01%)</title><rect x="73.9693%" y="581" width="0.0108%" height="15" fill="rgb(240,178,23)" fg:x="13725" fg:w="2"/><text x="74.2193%" y="591.50"></text></g><g><title>CoreMediaIO`CMIOUnitCreateFromDescription (2 samples, 0.01%)</title><rect x="73.9693%" y="565" width="0.0108%" height="15" fill="rgb(218,11,47)" fg:x="13725" fg:w="2"/><text x="74.2193%" y="575.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra _buildGraphUnitsForInputPort:error:] (4 samples, 0.02%)</title><rect x="73.9639%" y="645" width="0.0216%" height="15" fill="rgb(218,51,51)" fg:x="13724" fg:w="4"/><text x="74.2139%" y="655.50"></text></g><g><title>CoreFoundation`-[NSObject(NSObject) _copyDescription] (2 samples, 0.01%)</title><rect x="73.9908%" y="389" width="0.0108%" height="15" fill="rgb(238,126,27)" fg:x="13729" fg:w="2"/><text x="74.2408%" y="399.50"></text></g><g><title>CoreFoundation`-[NSDictionary descriptionWithLocale:indent:] (2 samples, 0.01%)</title><rect x="73.9908%" y="373" width="0.0108%" height="15" fill="rgb(249,202,22)" fg:x="13729" fg:w="2"/><text x="74.2408%" y="383.50"></text></g><g><title>CoreFoundation`-[NSDictionary descriptionWithLocale:indent:] (2 samples, 0.01%)</title><rect x="73.9908%" y="357" width="0.0108%" height="15" fill="rgb(254,195,49)" fg:x="13729" fg:w="2"/><text x="74.2408%" y="367.50"></text></g><g><title>CMIOUnits`0x000000010f6b5970 (3 samples, 0.02%)</title><rect x="73.9908%" y="549" width="0.0162%" height="15" fill="rgb(208,123,14)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="559.50"></text></g><g><title>CMIOUnits`0x000000010f6b5d88 (3 samples, 0.02%)</title><rect x="73.9908%" y="533" width="0.0162%" height="15" fill="rgb(224,200,8)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="543.50"></text></g><g><title>CMIOUnits`0x000000010f6d4044 (3 samples, 0.02%)</title><rect x="73.9908%" y="517" width="0.0162%" height="15" fill="rgb(217,61,36)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (3 samples, 0.02%)</title><rect x="73.9908%" y="501" width="0.0162%" height="15" fill="rgb(206,35,45)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (3 samples, 0.02%)</title><rect x="73.9908%" y="485" width="0.0162%" height="15" fill="rgb(217,65,33)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (3 samples, 0.02%)</title><rect x="73.9908%" y="469" width="0.0162%" height="15" fill="rgb(222,158,48)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="479.50"></text></g><g><title>CMIOUnits`0x000000010f6d2d4c (3 samples, 0.02%)</title><rect x="73.9908%" y="453" width="0.0162%" height="15" fill="rgb(254,2,54)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="463.50"></text></g><g><title>CMIOUnits`0x000000010f6d3884 (3 samples, 0.02%)</title><rect x="73.9908%" y="437" width="0.0162%" height="15" fill="rgb(250,143,38)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="447.50"></text></g><g><title>CoreFoundation`CFCopyDescription (3 samples, 0.02%)</title><rect x="73.9908%" y="421" width="0.0162%" height="15" fill="rgb(248,25,0)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="431.50"></text></g><g><title>CoreMedia`figFormatDescriptionCopyDebugDesc (3 samples, 0.02%)</title><rect x="73.9908%" y="405" width="0.0162%" height="15" fill="rgb(206,152,27)" fg:x="13729" fg:w="3"/><text x="74.2408%" y="415.50"></text></g><g><title>CMIOUnits`0x000000010f6c042c (2 samples, 0.01%)</title><rect x="74.0070%" y="549" width="0.0108%" height="15" fill="rgb(240,77,30)" fg:x="13732" fg:w="2"/><text x="74.2570%" y="559.50"></text></g><g><title>CMIOUnits`0x000000010f6c0838 (2 samples, 0.01%)</title><rect x="74.0070%" y="533" width="0.0108%" height="15" fill="rgb(231,5,3)" fg:x="13732" fg:w="2"/><text x="74.2570%" y="543.50"></text></g><g><title>CMIOUnits`0x000000010f6d73c0 (2 samples, 0.01%)</title><rect x="74.0070%" y="517" width="0.0108%" height="15" fill="rgb(207,226,32)" fg:x="13732" fg:w="2"/><text x="74.2570%" y="527.50"></text></g><g><title>CoreMediaIO`CMIOGraph::Initialize (7 samples, 0.04%)</title><rect x="73.9854%" y="645" width="0.0377%" height="15" fill="rgb(222,207,47)" fg:x="13728" fg:w="7"/><text x="74.2354%" y="655.50"></text></g><g><title>CoreMediaIO`CMIOUnitNodeInfo::Initialize (7 samples, 0.04%)</title><rect x="73.9854%" y="629" width="0.0377%" height="15" fill="rgb(229,115,45)" fg:x="13728" fg:w="7"/><text x="74.2354%" y="639.50"></text></g><g><title>CMIOBaseUnits`0x000000010f586e58 (7 samples, 0.04%)</title><rect x="73.9854%" y="613" width="0.0377%" height="15" fill="rgb(224,191,6)" fg:x="13728" fg:w="7"/><text x="74.2354%" y="623.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5789a0 (7 samples, 0.04%)</title><rect x="73.9854%" y="597" width="0.0377%" height="15" fill="rgb(230,227,24)" fg:x="13728" fg:w="7"/><text x="74.2354%" y="607.50"></text></g><g><title>CMIOBaseUnits`0x000000010f5b7bf4 (7 samples, 0.04%)</title><rect x="73.9854%" y="581" width="0.0377%" height="15" fill="rgb(228,80,19)" fg:x="13728" fg:w="7"/><text x="74.2354%" y="591.50"></text></g><g><title>CoreMediaIO`CMIOUnitCreateFromDescription (6 samples, 0.03%)</title><rect x="73.9908%" y="565" width="0.0323%" height="15" fill="rgb(247,229,0)" fg:x="13729" fg:w="6"/><text x="74.2408%" y="575.50"></text></g><g><title>rust-eyetracking`&lt;nokhwa::backends::capture::avfoundation::AVFoundationCaptureDevice as nokhwa_core::traits::CaptureBackendTrait&gt;::open_stream (15 samples, 0.08%)</title><rect x="73.9477%" y="789" width="0.0808%" height="15" fill="rgb(237,194,15)" fg:x="13721" fg:w="15"/><text x="74.1977%" y="799.50"></text></g><g><title>rust-eyetracking`nokhwa_bindings_macos::internal::AVCaptureSession::start (13 samples, 0.07%)</title><rect x="73.9585%" y="773" width="0.0701%" height="15" fill="rgb(219,203,20)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="783.50"></text></g><g><title>rust-eyetracking`std::panicking::try (13 samples, 0.07%)</title><rect x="73.9585%" y="757" width="0.0701%" height="15" fill="rgb(234,128,8)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="767.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (13 samples, 0.07%)</title><rect x="73.9585%" y="741" width="0.0701%" height="15" fill="rgb(248,202,8)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="751.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (13 samples, 0.07%)</title><rect x="73.9585%" y="725" width="0.0701%" height="15" fill="rgb(206,104,37)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="735.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (13 samples, 0.07%)</title><rect x="73.9585%" y="709" width="0.0701%" height="15" fill="rgb(223,8,27)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="719.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra startRunning] (13 samples, 0.07%)</title><rect x="73.9585%" y="693" width="0.0701%" height="15" fill="rgb(216,217,28)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="703.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra _setRunning:] (13 samples, 0.07%)</title><rect x="73.9585%" y="677" width="0.0701%" height="15" fill="rgb(249,199,1)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="687.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra _buildAndRunGraph] (13 samples, 0.07%)</title><rect x="73.9585%" y="661" width="0.0701%" height="15" fill="rgb(240,85,17)" fg:x="13723" fg:w="13"/><text x="74.2085%" y="671.50"></text></g><g><title>rust-eyetracking`DYLD-STUB$$memset_pattern16 (12 samples, 0.06%)</title><rect x="74.0286%" y="789" width="0.0647%" height="15" fill="rgb(206,108,45)" fg:x="13736" fg:w="12"/><text x="74.2786%" y="799.50"></text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;ndarray::ArrayBase&lt;ndarray::CowRepr&lt;f32&gt;,ndarray::dimension::dim::Dim&lt;ndarray::dimension::dynindeximpl::IxDynImpl&gt;&gt;&gt; (46 samples, 0.25%)</title><rect x="74.0986%" y="789" width="0.2479%" height="15" fill="rgb(245,210,41)" fg:x="13749" fg:w="46"/><text x="74.3486%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (46 samples, 0.25%)</title><rect x="74.0986%" y="773" width="0.2479%" height="15" fill="rgb(206,13,37)" fg:x="13749" fg:w="46"/><text x="74.3486%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.24%)</title><rect x="74.1040%" y="757" width="0.2425%" height="15" fill="rgb(250,61,18)" fg:x="13750" fg:w="45"/><text x="74.3540%" y="767.50"></text></g><g><title>AVFCore`AVLocalizedError (2 samples, 0.01%)</title><rect x="74.3465%" y="629" width="0.0108%" height="15" fill="rgb(235,172,48)" fg:x="13795" fg:w="2"/><text x="74.5965%" y="639.50"></text></g><g><title>AVFCore`AVLocalizedStringFromTable (2 samples, 0.01%)</title><rect x="74.3465%" y="613" width="0.0108%" height="15" fill="rgb(249,201,17)" fg:x="13795" fg:w="2"/><text x="74.5965%" y="623.50"></text></g><g><title>rust-eyetracking`&lt;nokhwa::camera::Camera as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="74.3465%" y="773" width="0.0162%" height="15" fill="rgb(219,208,6)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="783.50"></text></g><g><title>rust-eyetracking`&lt;nokhwa::backends::capture::avfoundation::AVFoundationCaptureDevice as nokhwa_core::traits::CaptureBackendTrait&gt;::stop_stream (3 samples, 0.02%)</title><rect x="74.3465%" y="757" width="0.0162%" height="15" fill="rgb(248,31,23)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="767.50"></text></g><g><title>rust-eyetracking`nokhwa_bindings_macos::internal::AVCaptureSession::remove_output (3 samples, 0.02%)</title><rect x="74.3465%" y="741" width="0.0162%" height="15" fill="rgb(245,15,42)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="751.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (3 samples, 0.02%)</title><rect x="74.3465%" y="725" width="0.0162%" height="15" fill="rgb(222,217,39)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="735.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (3 samples, 0.02%)</title><rect x="74.3465%" y="709" width="0.0162%" height="15" fill="rgb(210,219,27)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="719.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (3 samples, 0.02%)</title><rect x="74.3465%" y="693" width="0.0162%" height="15" fill="rgb(252,166,36)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="703.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra removeOutput:] (3 samples, 0.02%)</title><rect x="74.3465%" y="677" width="0.0162%" height="15" fill="rgb(245,132,34)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="687.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra _doSessionUpdates] (3 samples, 0.02%)</title><rect x="74.3465%" y="661" width="0.0162%" height="15" fill="rgb(236,54,3)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="671.50"></text></g><g><title>AVFCapture`-[AVCaptureSession_Tundra _stopAndTearDownGraph] (3 samples, 0.02%)</title><rect x="74.3465%" y="645" width="0.0162%" height="15" fill="rgb(241,173,43)" fg:x="13795" fg:w="3"/><text x="74.5965%" y="655.50"></text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;nokhwa::camera::Camera&gt; (6 samples, 0.03%)</title><rect x="74.3465%" y="789" width="0.0323%" height="15" fill="rgb(215,190,9)" fg:x="13795" fg:w="6"/><text x="74.5965%" y="799.50"></text></g><g><title>rust-eyetracking`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.02%)</title><rect x="74.3627%" y="773" width="0.0162%" height="15" fill="rgb(242,101,16)" fg:x="13798" fg:w="3"/><text x="74.6127%" y="783.50"></text></g><g><title>rust-eyetracking`alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.02%)</title><rect x="74.3627%" y="757" width="0.0162%" height="15" fill="rgb(223,190,21)" fg:x="13798" fg:w="3"/><text x="74.6127%" y="767.50"></text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;flume::Chan&lt;(alloc::vec::Vec&lt;u8&gt;,nokhwa_core::types::FrameFormat)&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="74.3627%" y="741" width="0.0162%" height="15" fill="rgb(215,228,25)" fg:x="13798" fg:w="3"/><text x="74.6127%" y="751.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="74.3627%" y="725" width="0.0162%" height="15" fill="rgb(225,36,22)" fg:x="13798" fg:w="3"/><text x="74.6127%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="74.3627%" y="709" width="0.0162%" height="15" fill="rgb(251,106,46)" fg:x="13798" fg:w="3"/><text x="74.6127%" y="719.50"></text></g><g><title>libobjc.A.dylib`_objc_rootDealloc (2 samples, 0.01%)</title><rect x="74.3843%" y="629" width="0.0108%" height="15" fill="rgb(208,90,1)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="639.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (2 samples, 0.01%)</title><rect x="74.3843%" y="613" width="0.0108%" height="15" fill="rgb(243,10,4)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="623.50"></text></g><g><title>libobjc.A.dylib`object_cxxDestructFromClass(objc_object*, objc_class*) (2 samples, 0.01%)</title><rect x="74.3843%" y="597" width="0.0108%" height="15" fill="rgb(212,137,27)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="607.50"></text></g><g><title>libonnxruntime.dylib`-[CoreMLExecution .cxx_destruct] (2 samples, 0.01%)</title><rect x="74.3843%" y="581" width="0.0108%" height="15" fill="rgb(231,220,49)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="591.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine dealloc] (2 samples, 0.01%)</title><rect x="74.3843%" y="565" width="0.0108%" height="15" fill="rgb(237,96,20)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="575.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine _deallocContextAndPlan] (2 samples, 0.01%)</title><rect x="74.3843%" y="549" width="0.0108%" height="15" fill="rgb(239,229,30)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="559.50"></text></g><g><title>Espresso`espresso_plan_destroy (2 samples, 0.01%)</title><rect x="74.3843%" y="533" width="0.0108%" height="15" fill="rgb(219,65,33)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="543.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::~espresso_plan (2 samples, 0.01%)</title><rect x="74.3843%" y="517" width="0.0108%" height="15" fill="rgb(243,134,7)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="527.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::~espresso_plan (2 samples, 0.01%)</title><rect x="74.3843%" y="501" width="0.0108%" height="15" fill="rgb(216,177,54)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="511.50"></text></g><g><title>Espresso`std::__1::unique_ptr&lt;EspressoLight::espresso_plan::priv_t, std::__1::default_delete&lt;EspressoLight::espresso_plan::priv_t&gt;&gt;::reset[abi:v15006] (2 samples, 0.01%)</title><rect x="74.3843%" y="485" width="0.0108%" height="15" fill="rgb(211,160,20)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="495.50"></text></g><g><title>Espresso`std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::net&gt;&gt;&gt;::~vector[abi:v15006] (2 samples, 0.01%)</title><rect x="74.3843%" y="469" width="0.0108%" height="15" fill="rgb(239,85,39)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="479.50"></text></g><g><title>Espresso`std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::net&gt;&gt;&gt;::__clear[abi:v15006] (2 samples, 0.01%)</title><rect x="74.3843%" y="453" width="0.0108%" height="15" fill="rgb(232,125,22)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="463.50"></text></g><g><title>Espresso`std::__1::__shared_weak_count::__release_shared[abi:v15006] (2 samples, 0.01%)</title><rect x="74.3843%" y="437" width="0.0108%" height="15" fill="rgb(244,57,34)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="447.50"></text></g><g><title>Espresso`Espresso::net::~net (2 samples, 0.01%)</title><rect x="74.3843%" y="421" width="0.0108%" height="15" fill="rgb(214,203,32)" fg:x="13802" fg:w="2"/><text x="74.6343%" y="431.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::CoreMLExecutionProvider::~CoreMLExecutionProvider (5 samples, 0.03%)</title><rect x="74.3843%" y="677" width="0.0269%" height="15" fill="rgb(207,58,43)" fg:x="13802" fg:w="5"/><text x="74.6343%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::coreml::Model::~Model (5 samples, 0.03%)</title><rect x="74.3843%" y="661" width="0.0269%" height="15" fill="rgb(215,193,15)" fg:x="13802" fg:w="5"/><text x="74.6343%" y="671.50"></text></g><g><title>libonnxruntime.dylib`-[CoreMLExecution dealloc] (5 samples, 0.03%)</title><rect x="74.3843%" y="645" width="0.0269%" height="15" fill="rgb(232,15,44)" fg:x="13802" fg:w="5"/><text x="74.6343%" y="655.50"></text></g><g><title>libonnxruntime.dylib`-[CoreMLExecution cleanup] (3 samples, 0.02%)</title><rect x="74.3950%" y="629" width="0.0162%" height="15" fill="rgb(212,3,48)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="639.50"></text></g><g><title>Foundation`-[NSFileManager removeItemAtPath:error:] (3 samples, 0.02%)</title><rect x="74.3950%" y="613" width="0.0162%" height="15" fill="rgb(218,128,7)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="623.50"></text></g><g><title>Foundation`-[NSOperation start] (3 samples, 0.02%)</title><rect x="74.3950%" y="597" width="0.0162%" height="15" fill="rgb(226,216,39)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="607.50"></text></g><g><title>Foundation`__NSOPERATION_IS_INVOKING_MAIN__ (3 samples, 0.02%)</title><rect x="74.3950%" y="581" width="0.0162%" height="15" fill="rgb(243,47,51)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="591.50"></text></g><g><title>Foundation`-[NSFilesystemItemRemoveOperation main] (3 samples, 0.02%)</title><rect x="74.3950%" y="565" width="0.0162%" height="15" fill="rgb(241,183,40)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="575.50"></text></g><g><title>libremovefile.dylib`removefile (3 samples, 0.02%)</title><rect x="74.3950%" y="549" width="0.0162%" height="15" fill="rgb(231,217,32)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="559.50"></text></g><g><title>libremovefile.dylib`__removefile_tree_walker (3 samples, 0.02%)</title><rect x="74.3950%" y="533" width="0.0162%" height="15" fill="rgb(229,61,38)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (3 samples, 0.02%)</title><rect x="74.3950%" y="517" width="0.0162%" height="15" fill="rgb(225,210,5)" fg:x="13804" fg:w="3"/><text x="74.6450%" y="527.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionProviders::~ExecutionProviders (7 samples, 0.04%)</title><rect x="74.3789%" y="709" width="0.0377%" height="15" fill="rgb(231,79,45)" fg:x="13801" fg:w="7"/><text x="74.6289%" y="719.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::CoreMLExecutionProvider::~CoreMLExecutionProvider (6 samples, 0.03%)</title><rect x="74.3843%" y="693" width="0.0323%" height="15" fill="rgb(224,100,7)" fg:x="13802" fg:w="6"/><text x="74.6343%" y="703.50"></text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;ort::session::InMemorySession&gt; (8 samples, 0.04%)</title><rect x="74.3789%" y="789" width="0.0431%" height="15" fill="rgb(241,198,18)" fg:x="13801" fg:w="8"/><text x="74.6289%" y="799.50"></text></g><g><title>rust-eyetracking`alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.04%)</title><rect x="74.3789%" y="773" width="0.0431%" height="15" fill="rgb(252,97,53)" fg:x="13801" fg:w="8"/><text x="74.6289%" y="783.50"></text></g><g><title>rust-eyetracking`&lt;ort::session::SessionPointerHolder as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="74.3789%" y="757" width="0.0431%" height="15" fill="rgb(220,88,7)" fg:x="13801" fg:w="8"/><text x="74.6289%" y="767.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::~InferenceSession (8 samples, 0.04%)</title><rect x="74.3789%" y="741" width="0.0431%" height="15" fill="rgb(213,176,14)" fg:x="13801" fg:w="8"/><text x="74.6289%" y="751.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::~InferenceSession (8 samples, 0.04%)</title><rect x="74.3789%" y="725" width="0.0431%" height="15" fill="rgb(246,73,7)" fg:x="13801" fg:w="8"/><text x="74.6289%" y="735.50"></text></g><g><title>libsystem_platform.dylib`__bzero (17 samples, 0.09%)</title><rect x="76.0550%" y="757" width="0.0916%" height="15" fill="rgb(245,64,36)" fg:x="14112" fg:w="17"/><text x="76.3050%" y="767.50"></text></g><g><title>rust-eyetracking`image::image::SubImage&lt;I&gt;::to_image (321 samples, 1.73%)</title><rect x="74.4220%" y="789" width="1.7300%" height="15" fill="rgb(245,80,10)" fg:x="13809" fg:w="321"/><text x="74.6720%" y="799.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.10%)</title><rect x="76.0550%" y="773" width="0.0970%" height="15" fill="rgb(232,107,50)" fg:x="14112" fg:w="18"/><text x="76.3050%" y="783.50"></text></g><g><title>rust-eyetracking`image::imageops::affine::flip_horizontal (464 samples, 2.50%)</title><rect x="76.1520%" y="789" width="2.5007%" height="15" fill="rgb(253,3,0)" fg:x="14130" fg:w="464"/><text x="76.4020%" y="799.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (34 samples, 0.18%)</title><rect x="78.4694%" y="773" width="0.1832%" height="15" fill="rgb(212,99,53)" fg:x="14560" fg:w="34"/><text x="78.7194%" y="783.50"></text></g><g><title>libsystem_platform.dylib`__bzero (34 samples, 0.18%)</title><rect x="78.4694%" y="757" width="0.1832%" height="15" fill="rgb(249,111,54)" fg:x="14560" fg:w="34"/><text x="78.7194%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (42 samples, 0.23%)</title><rect x="80.8300%" y="773" width="0.2264%" height="15" fill="rgb(249,55,30)" fg:x="14998" fg:w="42"/><text x="81.0800%" y="783.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.23%)</title><rect x="80.8300%" y="757" width="0.2264%" height="15" fill="rgb(237,47,42)" fg:x="14998" fg:w="42"/><text x="81.0800%" y="767.50"></text></g><g><title>rust-eyetracking`image::imageops::sample::resize (552 samples, 2.97%)</title><rect x="78.6527%" y="789" width="2.9749%" height="15" fill="rgb(211,20,18)" fg:x="14594" fg:w="552"/><text x="78.9027%" y="799.50">rus..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (106 samples, 0.57%)</title><rect x="81.0563%" y="773" width="0.5713%" height="15" fill="rgb(231,203,46)" fg:x="15040" fg:w="106"/><text x="81.3063%" y="783.50"></text></g><g><title>libsystem_platform.dylib`__bzero (106 samples, 0.57%)</title><rect x="81.0563%" y="757" width="0.5713%" height="15" fill="rgb(237,142,3)" fg:x="15040" fg:w="106"/><text x="81.3063%" y="767.50"></text></g><g><title>rust-eyetracking`ttf_parser::tables::glyf::outline_impl (3 samples, 0.02%)</title><rect x="81.6330%" y="725" width="0.0162%" height="15" fill="rgb(241,107,1)" fg:x="15147" fg:w="3"/><text x="81.8830%" y="735.50"></text></g><g><title>rust-eyetracking`rusttype::ScaledGlyph::positioned (5 samples, 0.03%)</title><rect x="81.6276%" y="757" width="0.0269%" height="15" fill="rgb(229,83,13)" fg:x="15146" fg:w="5"/><text x="81.8776%" y="767.50"></text></g><g><title>rust-eyetracking`ttf_parser::Face::outline_glyph (5 samples, 0.03%)</title><rect x="81.6276%" y="741" width="0.0269%" height="15" fill="rgb(241,91,40)" fg:x="15146" fg:w="5"/><text x="81.8776%" y="751.50"></text></g><g><title>rust-eyetracking`&lt;rusttype::LayoutIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.03%)</title><rect x="81.6276%" y="773" width="0.0323%" height="15" fill="rgb(225,3,45)" fg:x="15146" fg:w="6"/><text x="81.8776%" y="783.50"></text></g><g><title>rust-eyetracking`&lt;u8 as imageproc::definitions::Clamp&lt;f32&gt;&gt;::clamp (4 samples, 0.02%)</title><rect x="81.6653%" y="757" width="0.0216%" height="15" fill="rgb(244,223,14)" fg:x="15153" fg:w="4"/><text x="81.9153%" y="767.50"></text></g><g><title>rust-eyetracking`imageproc::drawing::text::draw_text_mut (16 samples, 0.09%)</title><rect x="81.6276%" y="789" width="0.0862%" height="15" fill="rgb(224,124,37)" fg:x="15146" fg:w="16"/><text x="81.8776%" y="799.50"></text></g><g><title>rust-eyetracking`rusttype::PositionedGlyph::draw (10 samples, 0.05%)</title><rect x="81.6599%" y="773" width="0.0539%" height="15" fill="rgb(251,171,30)" fg:x="15152" fg:w="10"/><text x="81.9099%" y="783.50"></text></g><g><title>rust-eyetracking`ttf_parser::tables::glyf::outline_impl (5 samples, 0.03%)</title><rect x="81.6869%" y="757" width="0.0269%" height="15" fill="rgb(236,46,54)" fg:x="15157" fg:w="5"/><text x="81.9369%" y="767.50"></text></g><g><title>rust-eyetracking`&lt;rusttype::outliner::OutlineRasterizer as ttf_parser::OutlineBuilder&gt;::quad_to (2 samples, 0.01%)</title><rect x="81.7030%" y="741" width="0.0108%" height="15" fill="rgb(245,213,5)" fg:x="15160" fg:w="2"/><text x="81.9530%" y="751.50"></text></g><g><title>rust-eyetracking`ab_glyph_rasterizer::raster::Rasterizer::draw_line_scalar (2 samples, 0.01%)</title><rect x="81.7030%" y="725" width="0.0108%" height="15" fill="rgb(230,144,27)" fg:x="15160" fg:w="2"/><text x="81.9530%" y="735.50"></text></g><g><title>rust-eyetracking`ndarray::stacking::concatenate (3 samples, 0.02%)</title><rect x="81.7138%" y="789" width="0.0162%" height="15" fill="rgb(220,86,6)" fg:x="15162" fg:w="3"/><text x="81.9638%" y="799.50"></text></g><g><title>rust-eyetracking`ndarray::zip::Zip&lt;(P1,P2),D&gt;::for_each (2 samples, 0.01%)</title><rect x="81.7192%" y="773" width="0.0108%" height="15" fill="rgb(240,20,13)" fg:x="15163" fg:w="2"/><text x="81.9692%" y="783.50"></text></g><g><title>AVFCapture`+[AVCaptureDALDevice devices] (5 samples, 0.03%)</title><rect x="81.7354%" y="629" width="0.0269%" height="15" fill="rgb(217,89,34)" fg:x="15166" fg:w="5"/><text x="81.9854%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (5 samples, 0.03%)</title><rect x="81.7354%" y="613" width="0.0269%" height="15" fill="rgb(229,13,5)" fg:x="15166" fg:w="5"/><text x="81.9854%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (5 samples, 0.03%)</title><rect x="81.7354%" y="597" width="0.0269%" height="15" fill="rgb(244,67,35)" fg:x="15166" fg:w="5"/><text x="81.9854%" y="607.50"></text></g><g><title>AVFCapture`__39+[AVCaptureDALDevice _ensureDeviceList]_block_invoke (5 samples, 0.03%)</title><rect x="81.7354%" y="581" width="0.0269%" height="15" fill="rgb(221,40,2)" fg:x="15166" fg:w="5"/><text x="81.9854%" y="591.50"></text></g><g><title>AVFCapture`+[AVCaptureDALDevice _refreshDevices] (5 samples, 0.03%)</title><rect x="81.7354%" y="565" width="0.0269%" height="15" fill="rgb(237,157,21)" fg:x="15166" fg:w="5"/><text x="81.9854%" y="575.50"></text></g><g><title>CoreMediaIO`CMIOObjectGetPropertyDataSize (3 samples, 0.02%)</title><rect x="81.7462%" y="549" width="0.0162%" height="15" fill="rgb(222,94,11)" fg:x="15168" fg:w="3"/><text x="81.9962%" y="559.50"></text></g><g><title>CoreMediaIO`CMIO::DAL::System::CheckOutInstance (3 samples, 0.02%)</title><rect x="81.7462%" y="533" width="0.0162%" height="15" fill="rgb(249,113,6)" fg:x="15168" fg:w="3"/><text x="81.9962%" y="543.50"></text></g><g><title>CoreMediaIO`CMIO::DAL::System::InitializeDevices (3 samples, 0.02%)</title><rect x="81.7462%" y="517" width="0.0162%" height="15" fill="rgb(238,137,36)" fg:x="15168" fg:w="3"/><text x="81.9962%" y="527.50"></text></g><g><title>CoreMediaIO`CMIO::DAL::PlugInManagement::Initialize (3 samples, 0.02%)</title><rect x="81.7462%" y="501" width="0.0162%" height="15" fill="rgb(210,102,26)" fg:x="15168" fg:w="3"/><text x="81.9962%" y="511.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (2 samples, 0.01%)</title><rect x="81.7515%" y="485" width="0.0108%" height="15" fill="rgb(218,30,30)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="495.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="81.7515%" y="469" width="0.0108%" height="15" fill="rgb(214,67,26)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="479.50"></text></g><g><title>CoreMediaIO`invocation function for block in CMIO::DAL::PlugInManagement::InitializeExtensionPlugIns (2 samples, 0.01%)</title><rect x="81.7515%" y="453" width="0.0108%" height="15" fill="rgb(251,9,53)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="463.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (2 samples, 0.01%)</title><rect x="81.7515%" y="437" width="0.0108%" height="15" fill="rgb(228,204,25)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="447.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="81.7515%" y="421" width="0.0108%" height="15" fill="rgb(207,153,8)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="431.50"></text></g><g><title>CoreMediaIO`invocation function for block in CMIO::DAL::CMIOExtension::PlugIn::InitializeExtensionPlugIns (2 samples, 0.01%)</title><rect x="81.7515%" y="405" width="0.0108%" height="15" fill="rgb(242,9,16)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="415.50"></text></g><g><title>CoreMediaIO`-[CMIODALExtensionSession init] (2 samples, 0.01%)</title><rect x="81.7515%" y="389" width="0.0108%" height="15" fill="rgb(217,211,10)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="399.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (2 samples, 0.01%)</title><rect x="81.7515%" y="373" width="0.0108%" height="15" fill="rgb(219,228,52)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="383.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="81.7515%" y="357" width="0.0108%" height="15" fill="rgb(231,92,29)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="367.50"></text></g><g><title>CoreMediaIO`-[CMIODALExtensionSession updateStateWithExtensionsArrived:extensionsRemoved:] (2 samples, 0.01%)</title><rect x="81.7515%" y="341" width="0.0108%" height="15" fill="rgb(232,8,23)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="351.50"></text></g><g><title>CoreMediaIO`CMIO::DAL::CMIOExtension::PlugIn::Initialize (2 samples, 0.01%)</title><rect x="81.7515%" y="325" width="0.0108%" height="15" fill="rgb(216,211,34)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="335.50"></text></g><g><title>CoreMediaIO`-[CMIODALExtensionPlugIn initWithPlugIn:endpoint:] (2 samples, 0.01%)</title><rect x="81.7515%" y="309" width="0.0108%" height="15" fill="rgb(236,151,0)" fg:x="15169" fg:w="2"/><text x="82.0015%" y="319.50"></text></g><g><title>AudioToolboxCore`AudioFormatGetPropertyInfo (2 samples, 0.01%)</title><rect x="81.7677%" y="453" width="0.0108%" height="15" fill="rgb(209,168,3)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="463.50"></text></g><g><title>AudioToolboxCore`FetchFormatListFromCodecs(int (*)(OpaqueAudioComponentInstance*, AudioFormatInfo const*, unsigned int*, AudioFormatListItem*), AudioFormatInfo const*, unsigned int, unsigned int*, AudioFormatListItem*) (2 samples, 0.01%)</title><rect x="81.7677%" y="437" width="0.0108%" height="15" fill="rgb(208,129,28)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="447.50"></text></g><g><title>AudioToolboxCore`OpenCodecComponent(unsigned int, OpaqueAudioComponentInstance*&amp;, unsigned int) (2 samples, 0.01%)</title><rect x="81.7677%" y="421" width="0.0108%" height="15" fill="rgb(229,78,22)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="431.50"></text></g><g><title>AudioToolboxCore`AudioComponentFindNext (2 samples, 0.01%)</title><rect x="81.7677%" y="405" width="0.0108%" height="15" fill="rgb(228,187,13)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="415.50"></text></g><g><title>AudioToolboxCore`GlobalComponentPluginMgr() (2 samples, 0.01%)</title><rect x="81.7677%" y="389" width="0.0108%" height="15" fill="rgb(240,119,24)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="399.50"></text></g><g><title>AudioToolboxCore`AudioComponentMgr_RegistrarService::retrieveComponents (2 samples, 0.01%)</title><rect x="81.7677%" y="373" width="0.0108%" height="15" fill="rgb(209,194,42)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="383.50"></text></g><g><title>CoreFoundation`_CF_forwarding_prep_0 (2 samples, 0.01%)</title><rect x="81.7677%" y="357" width="0.0108%" height="15" fill="rgb(247,200,46)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="367.50"></text></g><g><title>CoreFoundation`___forwarding___ (2 samples, 0.01%)</title><rect x="81.7677%" y="341" width="0.0108%" height="15" fill="rgb(218,76,16)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="351.50"></text></g><g><title>Foundation`-[NSXPCConnection _sendInvocation:orArguments:count:methodSignature:selector:withProxy:] (2 samples, 0.01%)</title><rect x="81.7677%" y="325" width="0.0108%" height="15" fill="rgb(225,21,48)" fg:x="15172" fg:w="2"/><text x="82.0177%" y="335.50"></text></g><g><title>AVFCapture`-[AVCaptureHALDevice _refreshFormatsAndKVONotify:] (3 samples, 0.02%)</title><rect x="81.7677%" y="501" width="0.0162%" height="15" fill="rgb(239,223,50)" fg:x="15172" fg:w="3"/><text x="82.0177%" y="511.50"></text></g><g><title>AVFCapture`+[AVCaptureHALDevice _deviceFormatWithASBD:deviceChannelCount:] (3 samples, 0.02%)</title><rect x="81.7677%" y="485" width="0.0162%" height="15" fill="rgb(244,45,21)" fg:x="15172" fg:w="3"/><text x="82.0177%" y="495.50"></text></g><g><title>CoreMedia`CMAudioFormatDescriptionCreate (3 samples, 0.02%)</title><rect x="81.7677%" y="469" width="0.0162%" height="15" fill="rgb(232,33,43)" fg:x="15172" fg:w="3"/><text x="82.0177%" y="479.50"></text></g><g><title>AVFCapture`-[AVCaptureHALDevice initWithUniqueID:connectionID:isHidden:] (5 samples, 0.03%)</title><rect x="81.7677%" y="549" width="0.0269%" height="15" fill="rgb(209,8,3)" fg:x="15172" fg:w="5"/><text x="82.0177%" y="559.50"></text></g><g><title>AVFCapture`-[AVCaptureHALDevice _refreshConnectionID:KVONotify:] (5 samples, 0.03%)</title><rect x="81.7677%" y="533" width="0.0269%" height="15" fill="rgb(214,25,53)" fg:x="15172" fg:w="5"/><text x="82.0177%" y="543.50"></text></g><g><title>AVFCapture`-[AVCaptureHALDevice _refreshPropertiesAndKVONotify:] (5 samples, 0.03%)</title><rect x="81.7677%" y="517" width="0.0269%" height="15" fill="rgb(254,186,54)" fg:x="15172" fg:w="5"/><text x="82.0177%" y="527.50"></text></g><g><title>CoreAudio`AudioObjectGetPropertyData (2 samples, 0.01%)</title><rect x="81.7839%" y="501" width="0.0108%" height="15" fill="rgb(208,174,49)" fg:x="15175" fg:w="2"/><text x="82.0339%" y="511.50"></text></g><g><title>CoreAudio`HALC_ShellPlugIn::ReconcileDeviceList (3 samples, 0.02%)</title><rect x="81.7947%" y="453" width="0.0162%" height="15" fill="rgb(233,191,51)" fg:x="15177" fg:w="3"/><text x="82.0447%" y="463.50"></text></g><g><title>CoreAudio`HALC_ShellObject::ExecuteCommand(void  (3 samples, 0.02%)</title><rect x="81.7947%" y="437" width="0.0162%" height="15" fill="rgb(222,134,10)" fg:x="15177" fg:w="3"/><text x="82.0447%" y="447.50"></text></g><g><title>CoreAudio`HALB_CommandGate::ExecuteCommand(void  (3 samples, 0.02%)</title><rect x="81.7947%" y="421" width="0.0162%" height="15" fill="rgb(230,226,20)" fg:x="15177" fg:w="3"/><text x="82.0447%" y="431.50"></text></g><g><title>CoreAudio`HALC_ShellPlugIn::_ReconcileDeviceList(bool, bool, std::__1::vector&lt;unsigned int, std::__1::allocator&lt;unsigned int&gt;&gt;&amp;, std::__1::vector&lt;unsigned int, std::__1::allocator (3 samples, 0.02%)</title><rect x="81.7947%" y="405" width="0.0162%" height="15" fill="rgb(251,111,25)" fg:x="15177" fg:w="3"/><text x="82.0447%" y="415.50"></text></g><g><title>CoreAudio`HALC_ShellObjectMap::CreateObject (2 samples, 0.01%)</title><rect x="81.8001%" y="389" width="0.0108%" height="15" fill="rgb(224,40,46)" fg:x="15178" fg:w="2"/><text x="82.0501%" y="399.50"></text></g><g><title>rust-eyetracking`nokhwa::query::query (15 samples, 0.08%)</title><rect x="81.7354%" y="789" width="0.0808%" height="15" fill="rgb(236,108,47)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="799.50"></text></g><g><title>rust-eyetracking`nokhwa_bindings_macos::internal::query_avfoundation (15 samples, 0.08%)</title><rect x="81.7354%" y="773" width="0.0808%" height="15" fill="rgb(234,93,0)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="783.50"></text></g><g><title>rust-eyetracking`nokhwa_bindings_macos::internal::AVCaptureDeviceDiscoverySession::new (15 samples, 0.08%)</title><rect x="81.7354%" y="757" width="0.0808%" height="15" fill="rgb(224,213,32)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="767.50"></text></g><g><title>rust-eyetracking`objc::message::platform::send_unverified (15 samples, 0.08%)</title><rect x="81.7354%" y="741" width="0.0808%" height="15" fill="rgb(251,11,48)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="751.50"></text></g><g><title>rust-eyetracking`RustObjCExceptionTryCatch (15 samples, 0.08%)</title><rect x="81.7354%" y="725" width="0.0808%" height="15" fill="rgb(236,173,5)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="735.50"></text></g><g><title>rust-eyetracking`objc_exception::try_no_ret::try_objc_execute_closure (15 samples, 0.08%)</title><rect x="81.7354%" y="709" width="0.0808%" height="15" fill="rgb(230,95,12)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="719.50"></text></g><g><title>AVFCapture`+[AVCaptureDeviceDiscoverySession_Tundra discoverySessionWithDeviceTypes:mediaType:position:] (15 samples, 0.08%)</title><rect x="81.7354%" y="693" width="0.0808%" height="15" fill="rgb(232,209,1)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="703.50"></text></g><g><title>AVFCapture`-[AVCaptureDeviceDiscoverySession_Tundra _initWithDeviceTypes:mediaType:position:allowIOSMacEnvironment:prefersUnsuspendedAndAllowsAnyPosition:] (15 samples, 0.08%)</title><rect x="81.7354%" y="677" width="0.0808%" height="15" fill="rgb(232,6,1)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="687.50"></text></g><g><title>AVFCapture`+[AVCaptureDevice_Tundra _devicesWithDeviceTypes:mediaType:position:allowIOSMacEnvironment:] (15 samples, 0.08%)</title><rect x="81.7354%" y="661" width="0.0808%" height="15" fill="rgb(210,224,50)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="671.50"></text></g><g><title>AVFCapture`+[AVCaptureDevice_Tundra _devicesWithAllowIOSMacEnvironment:] (15 samples, 0.08%)</title><rect x="81.7354%" y="645" width="0.0808%" height="15" fill="rgb(228,127,35)" fg:x="15166" fg:w="15"/><text x="81.9854%" y="655.50"></text></g><g><title>AVFCapture`+[AVCaptureHALDevice devices] (9 samples, 0.05%)</title><rect x="81.7677%" y="629" width="0.0485%" height="15" fill="rgb(245,102,45)" fg:x="15172" fg:w="9"/><text x="82.0177%" y="639.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (9 samples, 0.05%)</title><rect x="81.7677%" y="613" width="0.0485%" height="15" fill="rgb(214,1,49)" fg:x="15172" fg:w="9"/><text x="82.0177%" y="623.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (9 samples, 0.05%)</title><rect x="81.7677%" y="597" width="0.0485%" height="15" fill="rgb(226,163,40)" fg:x="15172" fg:w="9"/><text x="82.0177%" y="607.50"></text></g><g><title>AVFCapture`__39+[AVCaptureHALDevice _ensureDeviceList]_block_invoke (9 samples, 0.05%)</title><rect x="81.7677%" y="581" width="0.0485%" height="15" fill="rgb(239,212,28)" fg:x="15172" fg:w="9"/><text x="82.0177%" y="591.50"></text></g><g><title>AVFCapture`+[AVCaptureHALDevice _refreshDevices] (9 samples, 0.05%)</title><rect x="81.7677%" y="565" width="0.0485%" height="15" fill="rgb(220,20,13)" fg:x="15172" fg:w="9"/><text x="82.0177%" y="575.50"></text></g><g><title>CoreAudio`AudioObjectGetPropertyDataSize (4 samples, 0.02%)</title><rect x="81.7947%" y="549" width="0.0216%" height="15" fill="rgb(210,164,35)" fg:x="15177" fg:w="4"/><text x="82.0447%" y="559.50"></text></g><g><title>CoreAudio`HALSystem::CheckOutInstance (4 samples, 0.02%)</title><rect x="81.7947%" y="533" width="0.0216%" height="15" fill="rgb(248,109,41)" fg:x="15177" fg:w="4"/><text x="82.0447%" y="543.50"></text></g><g><title>CoreAudio`HALSystem::InitializeDevices (4 samples, 0.02%)</title><rect x="81.7947%" y="517" width="0.0216%" height="15" fill="rgb(238,23,50)" fg:x="15177" fg:w="4"/><text x="82.0447%" y="527.50"></text></g><g><title>CoreAudio`HALPlugInManagement::CreateHALPlugIn (4 samples, 0.02%)</title><rect x="81.7947%" y="501" width="0.0216%" height="15" fill="rgb(211,48,49)" fg:x="15177" fg:w="4"/><text x="82.0447%" y="511.50"></text></g><g><title>CoreAudio`HAL_HardwarePlugIn_InitializeWithObjectID(AudioHardwarePlugInInterface**, unsigned int) (4 samples, 0.02%)</title><rect x="81.7947%" y="485" width="0.0216%" height="15" fill="rgb(223,36,21)" fg:x="15177" fg:w="4"/><text x="82.0447%" y="495.50"></text></g><g><title>CoreAudio`HALC_ShellPlugIn::ConnectToServer (4 samples, 0.02%)</title><rect x="81.7947%" y="469" width="0.0216%" height="15" fill="rgb(207,123,46)" fg:x="15177" fg:w="4"/><text x="82.0447%" y="479.50"></text></g><g><title>libonnxruntime.dylib`onnx::RegisterOnnxOperatorSetSchema (6 samples, 0.03%)</title><rect x="81.8162%" y="645" width="0.0323%" height="15" fill="rgb(240,218,32)" fg:x="15181" fg:w="6"/><text x="82.0662%" y="655.50"></text></g><g><title>libonnxruntime.dylib`OrtApis::CreateEnvWithCustomLogger(void (*) (9 samples, 0.05%)</title><rect x="81.8162%" y="741" width="0.0485%" height="15" fill="rgb(252,5,43)" fg:x="15181" fg:w="9"/><text x="82.0662%" y="751.50"></text></g><g><title>libonnxruntime.dylib`OrtEnv::GetInstance (9 samples, 0.05%)</title><rect x="81.8162%" y="725" width="0.0485%" height="15" fill="rgb(252,84,19)" fg:x="15181" fg:w="9"/><text x="82.0662%" y="735.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Environment::Create(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete&lt;onnxruntime::logging::LoggingManager&gt;&gt;, std::__1::unique_ptr&lt;onnxruntime::Environment, std::__1::default_delete (9 samples, 0.05%)</title><rect x="81.8162%" y="709" width="0.0485%" height="15" fill="rgb(243,152,39)" fg:x="15181" fg:w="9"/><text x="82.0662%" y="719.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Environment::Initialize(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete (9 samples, 0.05%)</title><rect x="81.8162%" y="693" width="0.0485%" height="15" fill="rgb(234,160,15)" fg:x="15181" fg:w="9"/><text x="82.0662%" y="703.50"></text></g><g><title>libc++.1.dylib`std::__1::__call_once(unsigned long volatile&amp;, void*, void (*) (9 samples, 0.05%)</title><rect x="81.8162%" y="677" width="0.0485%" height="15" fill="rgb(237,34,20)" fg:x="15181" fg:w="9"/><text x="82.0662%" y="687.50"></text></g><g><title>libonnxruntime.dylib`void std::__1::__call_once_proxy&lt;std::__1::tuple&lt;onnxruntime::Environment::Initialize(std::__1::unique_ptr&lt;onnxruntime::logging::LoggingManager, std::__1::default_delete&lt;onnxruntime::logging::LoggingManager&gt;&gt;, OrtThreadingOptions const*, bool)::$_4&amp;&amp;&gt;&gt; (9 samples, 0.05%)</title><rect x="81.8162%" y="661" width="0.0485%" height="15" fill="rgb(229,97,13)" fg:x="15181" fg:w="9"/><text x="82.0662%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::contrib::OpSet_Microsoft_ver1::ForEachSchema(std::__1::function&lt;void  (3 samples, 0.02%)</title><rect x="81.8486%" y="645" width="0.0162%" height="15" fill="rgb(234,71,50)" fg:x="15187" fg:w="3"/><text x="82.0986%" y="655.50"></text></g><g><title>rust-eyetracking`ort::environment::EnvBuilder::build (11 samples, 0.06%)</title><rect x="81.8162%" y="789" width="0.0593%" height="15" fill="rgb(253,155,4)" fg:x="15181" fg:w="11"/><text x="82.0662%" y="799.50"></text></g><g><title>rust-eyetracking`ort::environment::Environment::new (11 samples, 0.06%)</title><rect x="81.8162%" y="773" width="0.0593%" height="15" fill="rgb(222,185,37)" fg:x="15181" fg:w="11"/><text x="82.0662%" y="783.50"></text></g><g><title>rust-eyetracking`ort::environment::Environment::create_custom_log_env (11 samples, 0.06%)</title><rect x="81.8162%" y="757" width="0.0593%" height="15" fill="rgb(251,177,13)" fg:x="15181" fg:w="11"/><text x="82.0662%" y="767.50"></text></g><g><title>rust-eyetracking`ort::ort (2 samples, 0.01%)</title><rect x="81.8647%" y="741" width="0.0108%" height="15" fill="rgb(250,179,40)" fg:x="15190" fg:w="2"/><text x="82.1147%" y="751.50"></text></g><g><title>rust-eyetracking`std::sys_common::once::queue::Once::call (2 samples, 0.01%)</title><rect x="81.8647%" y="725" width="0.0108%" height="15" fill="rgb(242,44,2)" fg:x="15190" fg:w="2"/><text x="82.1147%" y="735.50"></text></g><g><title>rust-eyetracking`std::sync::once::Once::call_once::_{{closure}} (2 samples, 0.01%)</title><rect x="81.8647%" y="709" width="0.0108%" height="15" fill="rgb(216,177,13)" fg:x="15190" fg:w="2"/><text x="82.1147%" y="719.50"></text></g><g><title>rust-eyetracking`std::sys_common::once::queue::Once::call (2 samples, 0.01%)</title><rect x="81.8647%" y="693" width="0.0108%" height="15" fill="rgb(216,106,43)" fg:x="15190" fg:w="2"/><text x="82.1147%" y="703.50"></text></g><g><title>rust-eyetracking`std::sync::once::Once::call_once::_{{closure}} (2 samples, 0.01%)</title><rect x="81.8647%" y="677" width="0.0108%" height="15" fill="rgb(216,183,2)" fg:x="15190" fg:w="2"/><text x="82.1147%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::LaunchKernelStep::Execute (2 samples, 0.01%)</title><rect x="81.9132%" y="677" width="0.0108%" height="15" fill="rgb(249,75,3)" fg:x="15199" fg:w="2"/><text x="82.1632%" y="687.50"></text></g><g><title>libonnxruntime.dylib`MlasActivation(MLAS_ACTIVATION const*, float*, float const*, unsigned long, unsigned long, unsigned long) (476 samples, 2.57%)</title><rect x="81.9725%" y="597" width="2.5653%" height="15" fill="rgb(219,67,39)" fg:x="15210" fg:w="476"/><text x="82.2225%" y="607.50">li..</text></g><g><title>libonnxruntime.dylib`MlasConvIm2Col(MLAS_CONV_PARAMETERS const*, float const*, float*, unsigned long, unsigned long, unsigned long, unsigned long) (3 samples, 0.02%)</title><rect x="84.5432%" y="597" width="0.0162%" height="15" fill="rgb(253,228,2)" fg:x="15687" fg:w="3"/><text x="84.7932%" y="607.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.MultiplyAccumulateBy64 (46 samples, 0.25%)</title><rect x="84.5702%" y="581" width="0.2479%" height="15" fill="rgb(235,138,27)" fg:x="15692" fg:w="46"/><text x="84.8202%" y="591.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.StoreOutputBy64 (3 samples, 0.02%)</title><rect x="84.8235%" y="581" width="0.0162%" height="15" fill="rgb(236,97,51)" fg:x="15739" fg:w="3"/><text x="85.0735%" y="591.50"></text></g><g><title>libonnxruntime.dylib`MlasActivation(MLAS_ACTIVATION const*, float*, float const*, unsigned long, unsigned long, unsigned long) (22 samples, 0.12%)</title><rect x="84.8451%" y="581" width="0.1186%" height="15" fill="rgb(240,80,30)" fg:x="15743" fg:w="22"/><text x="85.0951%" y="591.50"></text></g><g><title>libonnxruntime.dylib`MlasConvIm2Col(MLAS_CONV_PARAMETERS const*, float const*, float*, unsigned long, unsigned long, unsigned long, unsigned long) (323 samples, 1.74%)</title><rect x="84.9636%" y="581" width="1.7408%" height="15" fill="rgb(230,178,19)" fg:x="15765" fg:w="323"/><text x="85.2136%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.03%)</title><rect x="86.7044%" y="581" width="0.0269%" height="15" fill="rgb(210,190,27)" fg:x="16088" fg:w="5"/><text x="86.9544%" y="591.50"></text></g><g><title>libonnxruntime.dylib`MlasConvOperation(MLAS_CONV_PARAMETERS const*, float const*, float const*, float const*, float*, float*, unsigned long, unsigned long) (404 samples, 2.18%)</title><rect x="84.5594%" y="597" width="2.1773%" height="15" fill="rgb(222,107,31)" fg:x="15690" fg:w="404"/><text x="84.8094%" y="607.50">l..</text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (2 samples, 0.01%)</title><rect x="86.7421%" y="565" width="0.0108%" height="15" fill="rgb(216,127,34)" fg:x="16095" fg:w="2"/><text x="86.9921%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (68 samples, 0.37%)</title><rect x="86.7637%" y="517" width="0.3665%" height="15" fill="rgb(234,116,52)" fg:x="16099" fg:w="68"/><text x="87.0137%" y="527.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::WorkerData::EnsureAwake (2 samples, 0.01%)</title><rect x="87.1302%" y="501" width="0.0108%" height="15" fill="rgb(222,124,15)" fg:x="16167" fg:w="2"/><text x="87.3802%" y="511.50"></text></g><g><title>libonnxruntime.dylib`nsync::wake_waiters (2 samples, 0.01%)</title><rect x="87.1302%" y="485" width="0.0108%" height="15" fill="rgb(231,179,28)" fg:x="16167" fg:w="2"/><text x="87.3802%" y="495.50"></text></g><g><title>libonnxruntime.dylib`nsync::nsync_mu_semaphore_v (2 samples, 0.01%)</title><rect x="87.1302%" y="469" width="0.0108%" height="15" fill="rgb(226,93,45)" fg:x="16167" fg:w="2"/><text x="87.3802%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::condition_variable::notify_all (2 samples, 0.01%)</title><rect x="87.1302%" y="453" width="0.0108%" height="15" fill="rgb(215,8,51)" fg:x="16167" fg:w="2"/><text x="87.3802%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (2 samples, 0.01%)</title><rect x="87.1302%" y="437" width="0.0108%" height="15" fill="rgb(223,106,5)" fg:x="16167" fg:w="2"/><text x="87.3802%" y="447.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallelInternal(onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::PerThread&amp;, onnxruntime::concurrency::ThreadPoolParallelSection&amp;, unsigned int, bool, std::__1::function&lt;void  (5 samples, 0.03%)</title><rect x="87.1302%" y="517" width="0.0269%" height="15" fill="rgb(250,191,5)" fg:x="16167" fg:w="5"/><text x="87.3802%" y="527.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.MultiplyAccumulateBy64 (14 samples, 0.08%)</title><rect x="87.1625%" y="469" width="0.0755%" height="15" fill="rgb(242,132,44)" fg:x="16173" fg:w="14"/><text x="87.4125%" y="479.50"></text></g><g><title>libonnxruntime.dylib`.LSgemvN.StoreOutputBy64 (2 samples, 0.01%)</title><rect x="87.2379%" y="469" width="0.0108%" height="15" fill="rgb(251,152,29)" fg:x="16187" fg:w="2"/><text x="87.4879%" y="479.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy1Loop (3 samples, 0.02%)</title><rect x="87.2487%" y="469" width="0.0162%" height="15" fill="rgb(218,179,5)" fg:x="16189" fg:w="3"/><text x="87.4987%" y="479.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy4Loop (33 samples, 0.18%)</title><rect x="87.2649%" y="469" width="0.1778%" height="15" fill="rgb(227,67,19)" fg:x="16192" fg:w="33"/><text x="87.5149%" y="479.50"></text></g><g><title>libonnxruntime.dylib`.LZero.ProcessNextColumnLoop16x4 (2 samples, 0.01%)</title><rect x="87.4427%" y="469" width="0.0108%" height="15" fill="rgb(233,119,31)" fg:x="16225" fg:w="2"/><text x="87.6927%" y="479.50"></text></g><g><title>libonnxruntime.dylib`MlasActivation(MLAS_ACTIVATION const*, float*, float const*, unsigned long, unsigned long, unsigned long) (4 samples, 0.02%)</title><rect x="87.4535%" y="469" width="0.0216%" height="15" fill="rgb(241,120,22)" fg:x="16227" fg:w="4"/><text x="87.7035%" y="479.50"></text></g><g><title>libonnxruntime.dylib`MlasConvIm2Col(MLAS_CONV_PARAMETERS const*, float const*, float*, unsigned long, unsigned long, unsigned long, unsigned long) (96 samples, 0.52%)</title><rect x="87.4751%" y="469" width="0.5174%" height="15" fill="rgb(224,102,30)" fg:x="16231" fg:w="96"/><text x="87.7251%" y="479.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (161 samples, 0.87%)</title><rect x="87.1571%" y="517" width="0.8677%" height="15" fill="rgb(210,164,37)" fg:x="16172" fg:w="161"/><text x="87.4071%" y="527.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (161 samples, 0.87%)</title><rect x="87.1571%" y="501" width="0.8677%" height="15" fill="rgb(226,191,16)" fg:x="16172" fg:w="161"/><text x="87.4071%" y="511.50"></text></g><g><title>libonnxruntime.dylib`MlasConvOperation(MLAS_CONV_PARAMETERS const*, float const*, float const*, float const*, float*, float*, unsigned long, unsigned long) (161 samples, 0.87%)</title><rect x="87.1571%" y="485" width="0.8677%" height="15" fill="rgb(214,40,45)" fg:x="16172" fg:w="161"/><text x="87.4071%" y="495.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (6 samples, 0.03%)</title><rect x="87.9925%" y="469" width="0.0323%" height="15" fill="rgb(244,29,26)" fg:x="16327" fg:w="6"/><text x="88.2425%" y="479.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (239 samples, 1.29%)</title><rect x="86.7583%" y="533" width="1.2881%" height="15" fill="rgb(216,16,5)" fg:x="16098" fg:w="239"/><text x="87.0083%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="88.0356%" y="517" width="0.0108%" height="15" fill="rgb(249,76,35)" fg:x="16335" fg:w="2"/><text x="88.2856%" y="527.50"></text></g><g><title>libonnxruntime.dylib`MlasExecuteThreaded(void (*)(void*, long), void*, long, onnxruntime::concurrency::ThreadPool*) (244 samples, 1.32%)</title><rect x="86.7367%" y="597" width="1.3150%" height="15" fill="rgb(207,11,44)" fg:x="16094" fg:w="244"/><text x="86.9867%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (243 samples, 1.31%)</title><rect x="86.7421%" y="581" width="1.3096%" height="15" fill="rgb(228,190,49)" fg:x="16095" fg:w="243"/><text x="86.9921%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (241 samples, 1.30%)</title><rect x="86.7529%" y="565" width="1.2988%" height="15" fill="rgb(214,173,12)" fg:x="16097" fg:w="241"/><text x="87.0029%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (240 samples, 1.29%)</title><rect x="86.7583%" y="549" width="1.2935%" height="15" fill="rgb(218,26,35)" fg:x="16098" fg:w="240"/><text x="87.0083%" y="559.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Compute8.x4.BlockBy4Loop (2 samples, 0.01%)</title><rect x="88.0517%" y="533" width="0.0108%" height="15" fill="rgb(220,200,19)" fg:x="16338" fg:w="2"/><text x="88.3017%" y="543.50"></text></g><g><title>libonnxruntime.dylib`MlasTrySimpleParallel(onnxruntime::concurrency::ThreadPool*, long, std::__1::function&lt;void  (7 samples, 0.04%)</title><rect x="88.0517%" y="581" width="0.0377%" height="15" fill="rgb(239,95,49)" fg:x="16338" fg:w="7"/><text x="88.3017%" y="591.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (7 samples, 0.04%)</title><rect x="88.0517%" y="565" width="0.0377%" height="15" fill="rgb(235,85,53)" fg:x="16338" fg:w="7"/><text x="88.3017%" y="575.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (7 samples, 0.04%)</title><rect x="88.0517%" y="549" width="0.0377%" height="15" fill="rgb(233,133,31)" fg:x="16338" fg:w="7"/><text x="88.3017%" y="559.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute8.x4.BlockBy4Loop (5 samples, 0.03%)</title><rect x="88.0625%" y="533" width="0.0269%" height="15" fill="rgb(218,25,20)" fg:x="16340" fg:w="5"/><text x="88.3125%" y="543.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (3 samples, 0.02%)</title><rect x="88.0895%" y="581" width="0.0162%" height="15" fill="rgb(252,210,38)" fg:x="16345" fg:w="3"/><text x="88.3395%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (88 samples, 0.47%)</title><rect x="88.1164%" y="517" width="0.4743%" height="15" fill="rgb(242,134,21)" fg:x="16350" fg:w="88"/><text x="88.3664%" y="527.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Compute16.x2.BlockBy4Loop (2 samples, 0.01%)</title><rect x="88.6015%" y="453" width="0.0108%" height="15" fill="rgb(213,28,48)" fg:x="16440" fg:w="2"/><text x="88.8515%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Compute16.x4.BlockBy4Loop (68 samples, 0.37%)</title><rect x="88.6122%" y="453" width="0.3665%" height="15" fill="rgb(250,196,2)" fg:x="16442" fg:w="68"/><text x="88.8622%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.Output16.x4.Block (6 samples, 0.03%)</title><rect x="88.9841%" y="453" width="0.0323%" height="15" fill="rgb(227,5,17)" fg:x="16511" fg:w="6"/><text x="89.2341%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LAdd.ProcessNextColumnLoop16x4 (2 samples, 0.01%)</title><rect x="89.0164%" y="453" width="0.0108%" height="15" fill="rgb(221,226,24)" fg:x="16517" fg:w="2"/><text x="89.2664%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute16.x4.BlockBy4Loop (61 samples, 0.33%)</title><rect x="89.0272%" y="453" width="0.3288%" height="15" fill="rgb(211,5,48)" fg:x="16519" fg:w="61"/><text x="89.2772%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Compute8.x4.BlockBy4Loop (11 samples, 0.06%)</title><rect x="89.3560%" y="453" width="0.0593%" height="15" fill="rgb(219,150,6)" fg:x="16580" fg:w="11"/><text x="89.6060%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LZero.Output16.x4.Block (2 samples, 0.01%)</title><rect x="89.4153%" y="453" width="0.0108%" height="15" fill="rgb(251,46,16)" fg:x="16591" fg:w="2"/><text x="89.6653%" y="463.50"></text></g><g><title>libonnxruntime.dylib`.LZero.ProcessNextColumnLoop16x4 (4 samples, 0.02%)</title><rect x="89.4260%" y="453" width="0.0216%" height="15" fill="rgb(220,204,40)" fg:x="16593" fg:w="4"/><text x="89.6760%" y="463.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmCopyPackB(float*, float const*, unsigned long, unsigned long, unsigned long) (34 samples, 0.18%)</title><rect x="89.4476%" y="453" width="0.1832%" height="15" fill="rgb(211,85,2)" fg:x="16597" fg:w="34"/><text x="89.6976%" y="463.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (194 samples, 1.05%)</title><rect x="88.5961%" y="517" width="1.0455%" height="15" fill="rgb(229,17,7)" fg:x="16439" fg:w="194"/><text x="88.8461%" y="527.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (194 samples, 1.05%)</title><rect x="88.5961%" y="501" width="1.0455%" height="15" fill="rgb(239,72,28)" fg:x="16439" fg:w="194"/><text x="88.8461%" y="511.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0, std::__1::allocator&lt;MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*)::$_0&gt;, void (long)&gt;::operator() (194 samples, 1.05%)</title><rect x="88.5961%" y="485" width="1.0455%" height="15" fill="rgb(230,47,54)" fg:x="16439" fg:w="194"/><text x="88.8461%" y="495.50"></text></g><g><title>libonnxruntime.dylib`MlasSgemmThreaded(long, long, CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, long) (194 samples, 1.05%)</title><rect x="88.5961%" y="469" width="1.0455%" height="15" fill="rgb(214,50,8)" fg:x="16439" fg:w="194"/><text x="88.8461%" y="479.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (285 samples, 1.54%)</title><rect x="88.1164%" y="533" width="1.5360%" height="15" fill="rgb(216,198,43)" fg:x="16350" fg:w="285"/><text x="88.3664%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="89.6416%" y="517" width="0.0108%" height="15" fill="rgb(234,20,35)" fg:x="16633" fg:w="2"/><text x="89.8916%" y="527.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (288 samples, 1.55%)</title><rect x="88.1056%" y="565" width="1.5521%" height="15" fill="rgb(254,45,19)" fg:x="16348" fg:w="288"/><text x="88.3556%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (287 samples, 1.55%)</title><rect x="88.1110%" y="549" width="1.5468%" height="15" fill="rgb(219,14,44)" fg:x="16349" fg:w="287"/><text x="88.3610%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (289 samples, 1.56%)</title><rect x="88.1056%" y="581" width="1.5575%" height="15" fill="rgb(217,220,26)" fg:x="16348" fg:w="289"/><text x="88.3556%" y="591.50"></text></g><g><title>libonnxruntime.dylib`MlasConv(MLAS_CONV_PARAMETERS const*, float const*, float const*, float const*, float*, float*, onnxruntime::concurrency::ThreadPool*) (1,431 samples, 7.71%)</title><rect x="81.9563%" y="613" width="7.7122%" height="15" fill="rgb(213,158,28)" fg:x="15207" fg:w="1431"/><text x="82.2063%" y="623.50">libonnxrunt..</text></g><g><title>libonnxruntime.dylib`MlasGemmBatch(CBLAS_TRANSPOSE, CBLAS_TRANSPOSE, unsigned long, unsigned long, unsigned long, MLAS_SGEMM_DATA_PARAMS const*, unsigned long, onnxruntime::concurrency::ThreadPool*) (300 samples, 1.62%)</title><rect x="88.0517%" y="597" width="1.6168%" height="15" fill="rgb(252,51,52)" fg:x="16338" fg:w="300"/><text x="88.3017%" y="607.50"></text></g><g><title>libonnxruntime.dylib`MlasConvOperation(MLAS_CONV_PARAMETERS const*, float const*, float const*, float const*, float*, float*, unsigned long, unsigned long) (2 samples, 0.01%)</title><rect x="89.6686%" y="613" width="0.0108%" height="15" fill="rgb(246,89,16)" fg:x="16638" fg:w="2"/><text x="89.9186%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::BFCArena::FreeAndMaybeCoalesce (2 samples, 0.01%)</title><rect x="89.6847%" y="597" width="0.0108%" height="15" fill="rgb(216,158,49)" fg:x="16641" fg:w="2"/><text x="89.9347%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::BFCArena::Free (3 samples, 0.02%)</title><rect x="89.6847%" y="613" width="0.0162%" height="15" fill="rgb(236,107,19)" fg:x="16641" fg:w="3"/><text x="89.9347%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ConvAttributes::InferPadsAndOutputShape(onnxruntime::TensorShape const&amp;, gsl::span&lt;long long const, 18446744073709551615ul&gt; const&amp;, gsl::span&lt;long long const, 18446744073709551615ul&gt; const&amp;, gsl::span&lt;long long const, 18446744073709551615ul&gt; const&amp;, absl::lts_20220623::InlinedVector&lt;long long, 10ul, std::__1::allocator&lt;long long&gt;&gt;&amp;, absl::lts_20220623::InlinedVector&lt;long long, 5ul, std::__1::allocator (3 samples, 0.02%)</title><rect x="89.7063%" y="613" width="0.0162%" height="15" fill="rgb(228,185,30)" fg:x="16645" fg:w="3"/><text x="89.9563%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::SessionState::GetAllocator (3 samples, 0.02%)</title><rect x="89.7386%" y="533" width="0.0162%" height="15" fill="rgb(246,134,8)" fg:x="16651" fg:w="3"/><text x="89.9886%" y="543.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::IExecutionProvider::GetAllocator (3 samples, 0.02%)</title><rect x="89.7386%" y="517" width="0.0162%" height="15" fill="rgb(214,143,50)" fg:x="16651" fg:w="3"/><text x="89.9886%" y="527.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer (5 samples, 0.03%)</title><rect x="89.7332%" y="549" width="0.0269%" height="15" fill="rgb(228,75,8)" fg:x="16650" fg:w="5"/><text x="89.9832%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContext::Output (9 samples, 0.05%)</title><rect x="89.7224%" y="613" width="0.0485%" height="15" fill="rgb(207,175,4)" fg:x="16648" fg:w="9"/><text x="89.9724%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContext::OutputMLValue (9 samples, 0.05%)</title><rect x="89.7224%" y="597" width="0.0485%" height="15" fill="rgb(205,108,24)" fg:x="16648" fg:w="9"/><text x="89.9724%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (8 samples, 0.04%)</title><rect x="89.7278%" y="581" width="0.0431%" height="15" fill="rgb(244,120,49)" fg:x="16649" fg:w="8"/><text x="89.9778%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (8 samples, 0.04%)</title><rect x="89.7278%" y="565" width="0.0431%" height="15" fill="rgb(223,47,38)" fg:x="16649" fg:w="8"/><text x="89.9778%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Conv&lt;float&gt;::Compute (1,454 samples, 7.84%)</title><rect x="81.9456%" y="629" width="7.8362%" height="15" fill="rgb(229,179,11)" fg:x="15205" fg:w="1454"/><text x="82.1956%" y="639.50">libonnxrunt..</text></g><g><title>libonnxruntime.dylib`onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; (2 samples, 0.01%)</title><rect x="89.7710%" y="613" width="0.0108%" height="15" fill="rgb(231,122,1)" fg:x="16657" fg:w="2"/><text x="90.0210%" y="623.50"></text></g><g><title>libobjc.A.dylib`AutoreleasePoolPage::releaseUntil (12 samples, 0.06%)</title><rect x="89.7871%" y="581" width="0.0647%" height="15" fill="rgb(245,119,9)" fg:x="16660" fg:w="12"/><text x="90.0371%" y="591.50"></text></g><g><title>libobjc.A.dylib`_objc_rootDealloc (11 samples, 0.06%)</title><rect x="89.7925%" y="565" width="0.0593%" height="15" fill="rgb(241,163,25)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="575.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (11 samples, 0.06%)</title><rect x="89.7925%" y="549" width="0.0593%" height="15" fill="rgb(217,214,3)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="559.50"></text></g><g><title>libobjc.A.dylib`object_cxxDestructFromClass(objc_object*, objc_class*) (11 samples, 0.06%)</title><rect x="89.7925%" y="533" width="0.0593%" height="15" fill="rgb(240,86,28)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="543.50"></text></g><g><title>CoreML`std::__1::default_delete&lt;StorageManager&gt;::operator()[abi:v15006] (11 samples, 0.06%)</title><rect x="89.7925%" y="517" width="0.0593%" height="15" fill="rgb(215,47,9)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="527.50"></text></g><g><title>CoreML`std::__1::__shared_weak_count::__release_shared[abi:v15006] (11 samples, 0.06%)</title><rect x="89.7925%" y="501" width="0.0593%" height="15" fill="rgb(252,25,45)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="511.50"></text></g><g><title>CoreML`CoreML::MultiArrayBuffer::~MultiArrayBuffer (11 samples, 0.06%)</title><rect x="89.7925%" y="485" width="0.0593%" height="15" fill="rgb(251,164,9)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="495.50"></text></g><g><title>CoreML`std::__1::__shared_weak_count::__release_shared[abi:v15006] (11 samples, 0.06%)</title><rect x="89.7925%" y="469" width="0.0593%" height="15" fill="rgb(233,194,0)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.06%)</title><rect x="89.7925%" y="453" width="0.0593%" height="15" fill="rgb(249,111,24)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.06%)</title><rect x="89.7925%" y="437" width="0.0593%" height="15" fill="rgb(250,223,3)" fg:x="16661" fg:w="11"/><text x="90.0425%" y="447.50"></text></g><g><title>libobjc.A.dylib`objc_autoreleasePoolPop (47 samples, 0.25%)</title><rect x="89.7871%" y="597" width="0.2533%" height="15" fill="rgb(236,178,37)" fg:x="16660" fg:w="47"/><text x="90.0371%" y="607.50"></text></g><g><title>libobjc.A.dylib`_objc_rootDealloc (35 samples, 0.19%)</title><rect x="89.8518%" y="581" width="0.1886%" height="15" fill="rgb(241,158,50)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="591.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (35 samples, 0.19%)</title><rect x="89.8518%" y="565" width="0.1886%" height="15" fill="rgb(213,121,41)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="575.50"></text></g><g><title>libobjc.A.dylib`object_cxxDestructFromClass(objc_object*, objc_class*) (35 samples, 0.19%)</title><rect x="89.8518%" y="549" width="0.1886%" height="15" fill="rgb(240,92,3)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="559.50"></text></g><g><title>CoreML`std::__1::default_delete&lt;StorageManager&gt;::operator()[abi:v15006] (35 samples, 0.19%)</title><rect x="89.8518%" y="533" width="0.1886%" height="15" fill="rgb(205,123,3)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="543.50"></text></g><g><title>CoreML`std::__1::__shared_weak_count::__release_shared[abi:v15006] (35 samples, 0.19%)</title><rect x="89.8518%" y="517" width="0.1886%" height="15" fill="rgb(205,97,47)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="527.50"></text></g><g><title>CoreML`CoreML::MultiArrayBuffer::~MultiArrayBuffer (35 samples, 0.19%)</title><rect x="89.8518%" y="501" width="0.1886%" height="15" fill="rgb(247,152,14)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="511.50"></text></g><g><title>CoreML`std::__1::__shared_weak_count::__release_shared[abi:v15006] (35 samples, 0.19%)</title><rect x="89.8518%" y="485" width="0.1886%" height="15" fill="rgb(248,195,53)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (35 samples, 0.19%)</title><rect x="89.8518%" y="469" width="0.1886%" height="15" fill="rgb(226,201,16)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 0.19%)</title><rect x="89.8518%" y="453" width="0.1886%" height="15" fill="rgb(205,98,0)" fg:x="16672" fg:w="35"/><text x="90.1018%" y="463.50"></text></g><g><title>libonnxruntime.dylib`OrtApis::GetTensorTypeAndShape (3 samples, 0.02%)</title><rect x="90.0458%" y="597" width="0.0162%" height="15" fill="rgb(214,191,48)" fg:x="16708" fg:w="3"/><text x="90.2958%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="90.0512%" y="581" width="0.0108%" height="15" fill="rgb(237,112,39)" fg:x="16709" fg:w="2"/><text x="90.3012%" y="591.50"></text></g><g><title>libonnxruntime.dylib`OrtApis::KernelContext_GetOutput (3 samples, 0.02%)</title><rect x="90.0674%" y="597" width="0.0162%" height="15" fill="rgb(247,203,27)" fg:x="16712" fg:w="3"/><text x="90.3174%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContext::OutputMLValue (3 samples, 0.02%)</title><rect x="90.0674%" y="581" width="0.0162%" height="15" fill="rgb(235,124,28)" fg:x="16712" fg:w="3"/><text x="90.3174%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (3 samples, 0.02%)</title><rect x="90.0674%" y="565" width="0.0162%" height="15" fill="rgb(208,207,46)" fg:x="16712" fg:w="3"/><text x="90.3174%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (3 samples, 0.02%)</title><rect x="90.0674%" y="549" width="0.0162%" height="15" fill="rgb(234,176,4)" fg:x="16712" fg:w="3"/><text x="90.3174%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::AllocateMLValueTensorSelfOwnBufferHelper (2 samples, 0.01%)</title><rect x="90.0728%" y="533" width="0.0108%" height="15" fill="rgb(230,133,28)" fg:x="16713" fg:w="2"/><text x="90.3228%" y="543.50"></text></g><g><title>CoreML`ElapsedTimeRecorder::~ElapsedTimeRecorder (6 samples, 0.03%)</title><rect x="90.0943%" y="549" width="0.0323%" height="15" fill="rgb(211,137,40)" fg:x="16717" fg:w="6"/><text x="90.3443%" y="559.50"></text></g><g><title>CoreML`-[MLPredictionEvent maybeLogPredictionEvent:] (6 samples, 0.03%)</title><rect x="90.0943%" y="533" width="0.0323%" height="15" fill="rgb(254,35,13)" fg:x="16717" fg:w="6"/><text x="90.3443%" y="543.50"></text></g><g><title>libdispatch.dylib`_dispatch_event_loop_poke (5 samples, 0.03%)</title><rect x="90.0997%" y="517" width="0.0269%" height="15" fill="rgb(225,49,51)" fg:x="16718" fg:w="5"/><text x="90.3497%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`kevent_id (5 samples, 0.03%)</title><rect x="90.0997%" y="501" width="0.0269%" height="15" fill="rgb(251,10,15)" fg:x="16718" fg:w="5"/><text x="90.3497%" y="511.50"></text></g><g><title>CoreML`-[MLModelConfiguration copyWithZone:] (2 samples, 0.01%)</title><rect x="90.1267%" y="469" width="0.0108%" height="15" fill="rgb(228,207,15)" fg:x="16723" fg:w="2"/><text x="90.3767%" y="479.50"></text></g><g><title>CoreML`-[MLModel configuration] (5 samples, 0.03%)</title><rect x="90.1267%" y="485" width="0.0269%" height="15" fill="rgb(241,99,19)" fg:x="16723" fg:w="5"/><text x="90.3767%" y="495.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine _matchEngineToOptions:error:] (7 samples, 0.04%)</title><rect x="90.1267%" y="501" width="0.0377%" height="15" fill="rgb(207,104,49)" fg:x="16723" fg:w="7"/><text x="90.3767%" y="511.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine resetSizes:error:] (2 samples, 0.01%)</title><rect x="90.1698%" y="469" width="0.0108%" height="15" fill="rgb(234,99,18)" fg:x="16731" fg:w="2"/><text x="90.4198%" y="479.50"></text></g><g><title>CoreFoundation`-[__NSDictionaryM objectForKeyedSubscript:] (2 samples, 0.01%)</title><rect x="90.1913%" y="453" width="0.0108%" height="15" fill="rgb(213,191,49)" fg:x="16735" fg:w="2"/><text x="90.4413%" y="463.50"></text></g><g><title>CoreFoundation`-[NSTaggedPointerString isEqual:] (2 samples, 0.01%)</title><rect x="90.1913%" y="437" width="0.0108%" height="15" fill="rgb(210,226,19)" fg:x="16735" fg:w="2"/><text x="90.4413%" y="447.50"></text></g><g><title>CoreFoundation`_NSIsNSString (2 samples, 0.01%)</title><rect x="90.1913%" y="421" width="0.0108%" height="15" fill="rgb(229,97,18)" fg:x="16735" fg:w="2"/><text x="90.4413%" y="431.50"></text></g><g><title>CoreML`-[MLMultiArrayConstraint isAllowedValue:isNeuralNetworkInputOrOutput:usingRank5Mapping:featureName:error:] (2 samples, 0.01%)</title><rect x="90.2129%" y="453" width="0.0108%" height="15" fill="rgb(211,167,15)" fg:x="16739" fg:w="2"/><text x="90.4629%" y="463.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (5 samples, 0.03%)</title><rect x="90.2290%" y="453" width="0.0269%" height="15" fill="rgb(210,169,34)" fg:x="16742" fg:w="5"/><text x="90.4790%" y="463.50"></text></g><g><title>CoreFoundation`__CFStringHash (2 samples, 0.01%)</title><rect x="90.2722%" y="389" width="0.0108%" height="15" fill="rgb(241,121,31)" fg:x="16750" fg:w="2"/><text x="90.5222%" y="399.50"></text></g><g><title>CoreFoundation`__NSSetI_new (4 samples, 0.02%)</title><rect x="90.2722%" y="405" width="0.0216%" height="15" fill="rgb(232,40,11)" fg:x="16750" fg:w="4"/><text x="90.5222%" y="415.50"></text></g><g><title>CoreFoundation`____NSSetI_new_block_invoke (2 samples, 0.01%)</title><rect x="90.2829%" y="389" width="0.0108%" height="15" fill="rgb(205,86,26)" fg:x="16752" fg:w="2"/><text x="90.5329%" y="399.50"></text></g><g><title>CoreFoundation`+[NSSet setWithArray:] (6 samples, 0.03%)</title><rect x="90.2668%" y="437" width="0.0323%" height="15" fill="rgb(231,126,28)" fg:x="16749" fg:w="6"/><text x="90.5168%" y="447.50"></text></g><g><title>CoreFoundation`-[NSSet initWithArray:range:copyItems:] (6 samples, 0.03%)</title><rect x="90.2668%" y="421" width="0.0323%" height="15" fill="rgb(219,221,18)" fg:x="16749" fg:w="6"/><text x="90.5168%" y="431.50"></text></g><g><title>CoreFoundation`__CFSearchStringROM (5 samples, 0.03%)</title><rect x="90.3153%" y="389" width="0.0269%" height="15" fill="rgb(211,40,0)" fg:x="16758" fg:w="5"/><text x="90.5653%" y="399.50"></text></g><g><title>CoreFoundation`__CFStringCreateImmutableFunnel3 (7 samples, 0.04%)</title><rect x="90.3153%" y="405" width="0.0377%" height="15" fill="rgb(239,85,43)" fg:x="16758" fg:w="7"/><text x="90.5653%" y="415.50"></text></g><g><title>CoreFoundation`__CFStrHashEightBit2 (2 samples, 0.01%)</title><rect x="90.3422%" y="389" width="0.0108%" height="15" fill="rgb(231,55,21)" fg:x="16763" fg:w="2"/><text x="90.5922%" y="399.50"></text></g><g><title>Foundation`+[NSString stringWithCString:encoding:] (8 samples, 0.04%)</title><rect x="90.3153%" y="437" width="0.0431%" height="15" fill="rgb(225,184,43)" fg:x="16758" fg:w="8"/><text x="90.5653%" y="447.50"></text></g><g><title>CoreFoundation`CFStringCreateWithBytes (8 samples, 0.04%)</title><rect x="90.3153%" y="421" width="0.0431%" height="15" fill="rgb(251,158,41)" fg:x="16758" fg:w="8"/><text x="90.5653%" y="431.50"></text></g><g><title>libonnxruntime.dylib`-[OnnxTensorFeatureProvider featureNames] (19 samples, 0.10%)</title><rect x="90.2614%" y="453" width="0.1024%" height="15" fill="rgb(234,159,37)" fg:x="16748" fg:w="19"/><text x="90.5114%" y="463.50"></text></g><g><title>CoreML`(anonymous namespace)::NSArrayFromIndexVector(std::__1::vector&lt;unsigned long, std::__1::allocator (2 samples, 0.01%)</title><rect x="90.3800%" y="405" width="0.0108%" height="15" fill="rgb(216,204,22)" fg:x="16770" fg:w="2"/><text x="90.6300%" y="415.50"></text></g><g><title>CoreML`-[MLMultiArray initWithDataPointer:shape:dataType:strides:deallocator:error:] (6 samples, 0.03%)</title><rect x="90.3746%" y="437" width="0.0323%" height="15" fill="rgb(214,17,3)" fg:x="16769" fg:w="6"/><text x="90.6246%" y="447.50"></text></g><g><title>CoreML`-[MLMultiArray initWithBytesNoCopy:shape:dataType:strides:deallocator:mutableShapedBufferProvider:error:] (5 samples, 0.03%)</title><rect x="90.3800%" y="421" width="0.0269%" height="15" fill="rgb(212,111,17)" fg:x="16770" fg:w="5"/><text x="90.6300%" y="431.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine verifyInputs:error:] (42 samples, 0.23%)</title><rect x="90.1859%" y="469" width="0.2264%" height="15" fill="rgb(221,157,24)" fg:x="16734" fg:w="42"/><text x="90.4359%" y="479.50"></text></g><g><title>libonnxruntime.dylib`-[OnnxTensorFeatureProvider featureValueForName:] (9 samples, 0.05%)</title><rect x="90.3638%" y="453" width="0.0485%" height="15" fill="rgb(252,16,13)" fg:x="16767" fg:w="9"/><text x="90.6138%" y="463.50"></text></g><g><title>CoreML`-[MLMultiArray(CopyingAndVectorization) copyIntoMultiArray:error:] (15 samples, 0.08%)</title><rect x="90.4500%" y="357" width="0.0808%" height="15" fill="rgb(221,62,2)" fg:x="16783" fg:w="15"/><text x="90.7000%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.08%)</title><rect x="90.4500%" y="341" width="0.0808%" height="15" fill="rgb(247,87,22)" fg:x="16783" fg:w="15"/><text x="90.7000%" y="351.50"></text></g><g><title>Espresso`espresso_network_bind_buffer (2 samples, 0.01%)</title><rect x="90.5362%" y="357" width="0.0108%" height="15" fill="rgb(215,73,9)" fg:x="16799" fg:w="2"/><text x="90.7862%" y="367.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine bindInputFeatures:bufferIndex:cleanUpBlocks:error:] (23 samples, 0.12%)</title><rect x="90.4338%" y="405" width="0.1240%" height="15" fill="rgb(207,175,33)" fg:x="16780" fg:w="23"/><text x="90.6838%" y="415.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine bindInputFeatureNamed:featureValue:bufferIndex:cleanUpBlocks:error:] (23 samples, 0.12%)</title><rect x="90.4338%" y="389" width="0.1240%" height="15" fill="rgb(243,129,54)" fg:x="16780" fg:w="23"/><text x="90.6838%" y="399.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine bindInputFeatureNamed:convertingMultiArray:bufferIndex:error:] (23 samples, 0.12%)</title><rect x="90.4338%" y="373" width="0.1240%" height="15" fill="rgb(227,119,45)" fg:x="16780" fg:w="23"/><text x="90.6838%" y="383.50"></text></g><g><title>libobjc.A.dylib`_objc_rootDealloc (2 samples, 0.01%)</title><rect x="90.5470%" y="357" width="0.0108%" height="15" fill="rgb(205,109,36)" fg:x="16801" fg:w="2"/><text x="90.7970%" y="367.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (2 samples, 0.01%)</title><rect x="90.5470%" y="341" width="0.0108%" height="15" fill="rgb(205,6,39)" fg:x="16801" fg:w="2"/><text x="90.7970%" y="351.50"></text></g><g><title>libobjc.A.dylib`object_cxxDestructFromClass(objc_object*, objc_class*) (2 samples, 0.01%)</title><rect x="90.5470%" y="325" width="0.0108%" height="15" fill="rgb(221,32,16)" fg:x="16801" fg:w="2"/><text x="90.7970%" y="335.50"></text></g><g><title>CoreML`std::__1::default_delete&lt;StorageManager&gt;::operator()[abi:v15006] (2 samples, 0.01%)</title><rect x="90.5470%" y="309" width="0.0108%" height="15" fill="rgb(228,144,50)" fg:x="16801" fg:w="2"/><text x="90.7970%" y="319.50"></text></g><g><title>CoreFoundation`-[__NSSetM addObject:] (2 samples, 0.01%)</title><rect x="90.5632%" y="389" width="0.0108%" height="15" fill="rgb(229,201,53)" fg:x="16804" fg:w="2"/><text x="90.8132%" y="399.50"></text></g><g><title>CoreML`-[MLFeatureDescription isAllowedValue:error:] (2 samples, 0.01%)</title><rect x="90.5794%" y="373" width="0.0108%" height="15" fill="rgb(249,153,27)" fg:x="16807" fg:w="2"/><text x="90.8294%" y="383.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine _espressoOutputShapeForFeatureName:matchesShapeOfMLMultiArray:] (3 samples, 0.02%)</title><rect x="90.6009%" y="373" width="0.0162%" height="15" fill="rgb(227,106,25)" fg:x="16811" fg:w="3"/><text x="90.8509%" y="383.50"></text></g><g><title>Espresso`espresso_network_query_blob_shape (2 samples, 0.01%)</title><rect x="90.6063%" y="357" width="0.0108%" height="15" fill="rgb(230,65,29)" fg:x="16812" fg:w="2"/><text x="90.8563%" y="367.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine tryToSetOutputBacking:forFeatureName:toEbuf:reportPointerFlags:error:] (10 samples, 0.05%)</title><rect x="90.5794%" y="389" width="0.0539%" height="15" fill="rgb(221,57,46)" fg:x="16807" fg:w="10"/><text x="90.8294%" y="399.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine bindOutputBuffers:outputBackings:automaticOutputBackingMode:directlyBoundOutputFeatureNames:error:] (18 samples, 0.10%)</title><rect x="90.5578%" y="405" width="0.0970%" height="15" fill="rgb(229,161,17)" fg:x="16803" fg:w="18"/><text x="90.8078%" y="415.50"></text></g><g><title>CoreFoundation`-[__NSPlaceholderDictionary initWithDictionary:copyItems:] (3 samples, 0.02%)</title><rect x="90.6602%" y="389" width="0.0162%" height="15" fill="rgb(222,213,11)" fg:x="16822" fg:w="3"/><text x="90.9102%" y="399.50"></text></g><g><title>CoreML`CoreML::MultiArrayBuffer::MultiArrayBuffer(std::__1::vector&lt;unsigned long, std::__1::allocator (40 samples, 0.22%)</title><rect x="90.6818%" y="357" width="0.2156%" height="15" fill="rgb(235,35,13)" fg:x="16826" fg:w="40"/><text x="90.9318%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (40 samples, 0.22%)</title><rect x="90.6818%" y="341" width="0.2156%" height="15" fill="rgb(233,158,34)" fg:x="16826" fg:w="40"/><text x="90.9318%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`medium_memalign (40 samples, 0.22%)</title><rect x="90.6818%" y="325" width="0.2156%" height="15" fill="rgb(215,151,48)" fg:x="16826" fg:w="40"/><text x="90.9318%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (40 samples, 0.22%)</title><rect x="90.6818%" y="309" width="0.2156%" height="15" fill="rgb(229,84,14)" fg:x="16826" fg:w="40"/><text x="90.9318%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 0.22%)</title><rect x="90.6818%" y="293" width="0.2156%" height="15" fill="rgb(229,68,14)" fg:x="16826" fg:w="40"/><text x="90.9318%" y="303.50"></text></g><g><title>CoreML`-[MLMultiArray(PrivateConstruction) initWithShape:dataType:storageOrder:bufferAlignment:] (41 samples, 0.22%)</title><rect x="90.6818%" y="373" width="0.2210%" height="15" fill="rgb(243,106,26)" fg:x="16826" fg:w="41"/><text x="90.9318%" y="383.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine populateMultiArrayShape:strides:forEbuf:featureDescription:ndArrayInterpretation:] (3 samples, 0.02%)</title><rect x="90.9027%" y="373" width="0.0162%" height="15" fill="rgb(206,45,38)" fg:x="16867" fg:w="3"/><text x="91.1527%" y="383.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine outputBackingMultiArrayForFeatureName:] (47 samples, 0.25%)</title><rect x="90.6818%" y="389" width="0.2533%" height="15" fill="rgb(226,6,15)" fg:x="16826" fg:w="47"/><text x="90.9318%" y="399.50"></text></g><g><title>Espresso`espresso_network_query_blob_shape (2 samples, 0.01%)</title><rect x="90.9243%" y="373" width="0.0108%" height="15" fill="rgb(232,22,54)" fg:x="16871" fg:w="2"/><text x="91.1743%" y="383.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::query_blob_shape (2 samples, 0.01%)</title><rect x="90.9243%" y="357" width="0.0108%" height="15" fill="rgb(229,222,32)" fg:x="16871" fg:w="2"/><text x="91.1743%" y="367.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine completeOutputBackings:automaticOutputBackingMode:error:] (54 samples, 0.29%)</title><rect x="90.6548%" y="405" width="0.2910%" height="15" fill="rgb(228,62,29)" fg:x="16821" fg:w="54"/><text x="90.9048%" y="415.50"></text></g><g><title>ANEServices`H11ANE::H11ANEDevice::ANE_ProgramSendRequest (62 samples, 0.33%)</title><rect x="90.9674%" y="229" width="0.3341%" height="15" fill="rgb(251,103,34)" fg:x="16879" fg:w="62"/><text x="91.2174%" y="239.50"></text></g><g><title>IOKit`IOConnectCallAsyncMethod (62 samples, 0.33%)</title><rect x="90.9674%" y="213" width="0.3341%" height="15" fill="rgb(233,12,30)" fg:x="16879" fg:w="62"/><text x="91.2174%" y="223.50"></text></g><g><title>IOKit`io_connect_async_method (62 samples, 0.33%)</title><rect x="90.9674%" y="197" width="0.3341%" height="15" fill="rgb(238,52,0)" fg:x="16879" fg:w="62"/><text x="91.2174%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (62 samples, 0.33%)</title><rect x="90.9674%" y="181" width="0.3341%" height="15" fill="rgb(223,98,5)" fg:x="16879" fg:w="62"/><text x="91.2174%" y="191.50"></text></g><g><title>ANEServices`H11ANE::H11ANEFrameReceiver::ProgramProcessRequest (64 samples, 0.34%)</title><rect x="90.9674%" y="245" width="0.3449%" height="15" fill="rgb(228,75,37)" fg:x="16879" fg:w="64"/><text x="91.2174%" y="255.50"></text></g><g><title>ANEServices`H11ANE::H11ANEFrameReceiver::syncFrameDone (2 samples, 0.01%)</title><rect x="91.3015%" y="229" width="0.0108%" height="15" fill="rgb(205,115,49)" fg:x="16941" fg:w="2"/><text x="91.5515%" y="239.50"></text></g><g><title>ANEServices`H11ANEFrameProcDirect(void*, H11ANE::H11ANEFrameReceiverRequest*) (2 samples, 0.01%)</title><rect x="91.3015%" y="213" width="0.0108%" height="15" fill="rgb(250,154,43)" fg:x="16941" fg:w="2"/><text x="91.5515%" y="223.50"></text></g><g><title>AppleNeuralEngine`__88-[_ANEProgramForEvaluation processRequest:model:qos:qIndex:modelStringID:options:error:]_block_invoke (2 samples, 0.01%)</title><rect x="91.3015%" y="197" width="0.0108%" height="15" fill="rgb(226,43,29)" fg:x="16941" fg:w="2"/><text x="91.5515%" y="207.50"></text></g><g><title>ANEServices`H11ANEProgramProcessRequestDirect (67 samples, 0.36%)</title><rect x="90.9566%" y="261" width="0.3611%" height="15" fill="rgb(249,228,39)" fg:x="16877" fg:w="67"/><text x="91.2066%" y="271.50"></text></g><g><title>AppleNeuralEngine`-[_ANEProgramForEvaluation processRequest:model:qos:qIndex:modelStringID:options:error:] (69 samples, 0.37%)</title><rect x="90.9566%" y="277" width="0.3719%" height="15" fill="rgb(216,79,43)" fg:x="16877" fg:w="69"/><text x="91.2066%" y="287.50"></text></g><g><title>AppleNeuralEngine`-[_ANEClient doEvaluateDirectWithModel:options:request:qos:error:] (70 samples, 0.38%)</title><rect x="90.9566%" y="293" width="0.3773%" height="15" fill="rgb(228,95,12)" fg:x="16877" fg:w="70"/><text x="91.2066%" y="303.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::add_ane_eval_profiling_options (2 samples, 0.01%)</title><rect x="91.3393%" y="293" width="0.0108%" height="15" fill="rgb(249,221,15)" fg:x="16948" fg:w="2"/><text x="91.5893%" y="303.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::create_ane_request(std::__1::shared_ptr&lt;Espresso::abstract_batch&gt; const&amp;, std::__1::shared_ptr (6 samples, 0.03%)</title><rect x="91.3500%" y="293" width="0.0323%" height="15" fill="rgb(233,34,13)" fg:x="16950" fg:w="6"/><text x="91.6000%" y="303.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::get_qos (2 samples, 0.01%)</title><rect x="91.3824%" y="293" width="0.0108%" height="15" fill="rgb(214,103,39)" fg:x="16956" fg:w="2"/><text x="91.6324%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__proc_info (2 samples, 0.01%)</title><rect x="91.3824%" y="277" width="0.0108%" height="15" fill="rgb(251,126,39)" fg:x="16956" fg:w="2"/><text x="91.6324%" y="287.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (2 samples, 0.01%)</title><rect x="91.3985%" y="293" width="0.0108%" height="15" fill="rgb(214,216,36)" fg:x="16959" fg:w="2"/><text x="91.6485%" y="303.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::__forward_segment(std::__1::shared_ptr (85 samples, 0.46%)</title><rect x="90.9566%" y="309" width="0.4581%" height="15" fill="rgb(220,221,8)" fg:x="16877" fg:w="85"/><text x="91.2066%" y="319.50"></text></g><g><title>Espresso`Espresso::net::__forward(std::__1::shared_ptr (90 samples, 0.49%)</title><rect x="90.9512%" y="341" width="0.4850%" height="15" fill="rgb(240,216,3)" fg:x="16876" fg:w="90"/><text x="91.2012%" y="351.50"></text></g><g><title>Espresso`Espresso::net_compiler_segment_based::__forward(std::__1::shared_ptr (90 samples, 0.49%)</title><rect x="90.9512%" y="325" width="0.4850%" height="15" fill="rgb(232,218,17)" fg:x="16876" fg:w="90"/><text x="91.2012%" y="335.50"></text></g><g><title>libobjc.A.dylib`objc_msgSend (2 samples, 0.01%)</title><rect x="91.4255%" y="309" width="0.0108%" height="15" fill="rgb(229,163,45)" fg:x="16964" fg:w="2"/><text x="91.6755%" y="319.50"></text></g><g><title>IOKit`iokit_user_client_trap (3 samples, 0.02%)</title><rect x="91.7004%" y="309" width="0.0162%" height="15" fill="rgb(231,110,42)" fg:x="17015" fg:w="3"/><text x="91.9504%" y="319.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::blob_container::__copy_from_host(std::__1::shared_ptr&lt;Espresso::abstract_batch&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::blob (53 samples, 0.29%)</title><rect x="91.4363%" y="325" width="0.2856%" height="15" fill="rgb(208,170,48)" fg:x="16966" fg:w="53"/><text x="91.6863%" y="335.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::__copy_inputs(std::__1::shared_ptr&lt;EspressoLight::plan_task_t&gt;, std::__1::shared_ptr&lt;Espresso::abstract_batch&gt; const&amp;, int, std::__1::shared_ptr (54 samples, 0.29%)</title><rect x="91.4363%" y="341" width="0.2910%" height="15" fill="rgb(239,116,25)" fg:x="16966" fg:w="54"/><text x="91.6863%" y="351.50"></text></g><g><title>IOKit`iokit_user_client_trap (109 samples, 0.59%)</title><rect x="91.7381%" y="309" width="0.5874%" height="15" fill="rgb(219,200,50)" fg:x="17022" fg:w="109"/><text x="91.9881%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_qos_max_parallelism (2 samples, 0.01%)</title><rect x="92.3363%" y="293" width="0.0108%" height="15" fill="rgb(245,200,0)" fg:x="17133" fg:w="2"/><text x="92.5863%" y="303.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::blob_container::__copy_to_host(std::__1::shared_ptr&lt;Espresso::abstract_batch&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::blob (120 samples, 0.65%)</title><rect x="91.7327%" y="325" width="0.6467%" height="15" fill="rgb(245,119,33)" fg:x="17021" fg:w="120"/><text x="91.9827%" y="335.50"></text></g><g><title>vImage`vImageConvert_Planar16FtoPlanarF (10 samples, 0.05%)</title><rect x="92.3255%" y="309" width="0.0539%" height="15" fill="rgb(231,125,12)" fg:x="17131" fg:w="10"/><text x="92.5755%" y="319.50"></text></g><g><title>vImage`numWorkItemsForGCD (4 samples, 0.02%)</title><rect x="92.3579%" y="293" width="0.0216%" height="15" fill="rgb(216,96,41)" fg:x="17137" fg:w="4"/><text x="92.6079%" y="303.50"></text></g><g><title>Espresso`Espresso::net::get_blob_or_global_with_prefix(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="92.3794%" y="325" width="0.0108%" height="15" fill="rgb(248,43,45)" fg:x="17141" fg:w="2"/><text x="92.6294%" y="335.50"></text></g><g><title>vImage`vConvert_Planar16FtoPlanarF_vec (15 samples, 0.08%)</title><rect x="92.3956%" y="325" width="0.0808%" height="15" fill="rgb(217,222,7)" fg:x="17144" fg:w="15"/><text x="92.6456%" y="335.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::__copy_outputs(std::__1::shared_ptr&lt;EspressoLight::plan_task_t&gt;, std::__1::shared_ptr&lt;Espresso::abstract_batch&gt; const&amp;, int, std::__1::shared_ptr (140 samples, 0.75%)</title><rect x="91.7273%" y="341" width="0.7545%" height="15" fill="rgb(233,28,6)" fg:x="17020" fg:w="140"/><text x="91.9773%" y="351.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine executePlan:error:] (286 samples, 1.54%)</title><rect x="90.9458%" y="405" width="1.5414%" height="15" fill="rgb(231,218,15)" fg:x="16875" fg:w="286"/><text x="91.1958%" y="415.50"></text></g><g><title>Espresso`espresso_plan_execute_sync (286 samples, 1.54%)</title><rect x="90.9458%" y="389" width="1.5414%" height="15" fill="rgb(226,171,48)" fg:x="16875" fg:w="286"/><text x="91.1958%" y="399.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::execute_sync (286 samples, 1.54%)</title><rect x="90.9458%" y="373" width="1.5414%" height="15" fill="rgb(235,201,9)" fg:x="16875" fg:w="286"/><text x="91.1958%" y="383.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::dispatch_task_on_compute_batch(std::__1::shared_ptr&lt;Espresso::abstract_batch&gt; const&amp;, std::__1::shared_ptr (286 samples, 1.54%)</title><rect x="90.9458%" y="357" width="1.5414%" height="15" fill="rgb(217,80,15)" fg:x="16875" fg:w="286"/><text x="91.1958%" y="367.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine updateDynamicOutputBlobIndicatorCacheAndReturnError:] (2 samples, 0.01%)</title><rect x="92.4926%" y="405" width="0.0108%" height="15" fill="rgb(219,152,8)" fg:x="17162" fg:w="2"/><text x="92.7426%" y="415.50"></text></g><g><title>Espresso`espresso_blob_is_dynamic (2 samples, 0.01%)</title><rect x="92.4926%" y="389" width="0.0108%" height="15" fill="rgb(243,107,38)" fg:x="17162" fg:w="2"/><text x="92.7426%" y="399.50"></text></g><g><title>Espresso`Espresso::net::is_blob_dynamic (2 samples, 0.01%)</title><rect x="92.4926%" y="373" width="0.0108%" height="15" fill="rgb(231,17,5)" fg:x="17162" fg:w="2"/><text x="92.7426%" y="383.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine evaluateInputs:bufferIndex:options:error:] (389 samples, 2.10%)</title><rect x="90.4177%" y="421" width="2.0965%" height="15" fill="rgb(209,25,54)" fg:x="16777" fg:w="389"/><text x="90.6677%" y="431.50">C..</text></g><g><title>CoreML`-[MLNeuralNetworkEngine predictionFromFeatures:options:error:] (451 samples, 2.43%)</title><rect x="90.0943%" y="565" width="2.4306%" height="15" fill="rgb(219,0,2)" fg:x="16717" fg:w="451"/><text x="90.3443%" y="575.50">Co..</text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (445 samples, 2.40%)</title><rect x="90.1267%" y="549" width="2.3983%" height="15" fill="rgb(246,9,5)" fg:x="16723" fg:w="445"/><text x="90.3767%" y="559.50">li..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (445 samples, 2.40%)</title><rect x="90.1267%" y="533" width="2.3983%" height="15" fill="rgb(226,159,4)" fg:x="16723" fg:w="445"/><text x="90.3767%" y="543.50">li..</text></g><g><title>CoreML`__62-[MLNeuralNetworkEngine predictionFromFeatures:options:error:]_block_invoke (445 samples, 2.40%)</title><rect x="90.1267%" y="517" width="2.3983%" height="15" fill="rgb(219,175,34)" fg:x="16723" fg:w="445"/><text x="90.3767%" y="527.50">Co..</text></g><g><title>CoreML`-[MLNeuralNetworkEngine evaluateInputs:options:error:] (438 samples, 2.36%)</title><rect x="90.1644%" y="501" width="2.3605%" height="15" fill="rgb(236,10,46)" fg:x="16730" fg:w="438"/><text x="90.4144%" y="511.50">Co..</text></g><g><title>CoreML`-[MLNeuralNetworkEngine evaluateInputs:options:verifyInputs:error:] (438 samples, 2.36%)</title><rect x="90.1644%" y="485" width="2.3605%" height="15" fill="rgb(240,211,16)" fg:x="16730" fg:w="438"/><text x="90.4144%" y="495.50">Co..</text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (392 samples, 2.11%)</title><rect x="90.4123%" y="469" width="2.1126%" height="15" fill="rgb(205,3,43)" fg:x="16776" fg:w="392"/><text x="90.6623%" y="479.50">l..</text></g><g><title>libdispatch.dylib`_dispatch_client_callout (392 samples, 2.11%)</title><rect x="90.4123%" y="453" width="2.1126%" height="15" fill="rgb(245,7,22)" fg:x="16776" fg:w="392"/><text x="90.6623%" y="463.50">l..</text></g><g><title>CoreML`__67-[MLNeuralNetworkEngine evaluateInputs:options:verifyInputs:error:]_block_invoke.201 (392 samples, 2.11%)</title><rect x="90.4123%" y="437" width="2.1126%" height="15" fill="rgb(239,132,32)" fg:x="16776" fg:w="392"/><text x="90.6623%" y="447.50">C..</text></g><g><title>libobjc.A.dylib`_objc_rootDealloc (2 samples, 0.01%)</title><rect x="92.5249%" y="565" width="0.0108%" height="15" fill="rgb(228,202,34)" fg:x="17168" fg:w="2"/><text x="92.7749%" y="575.50"></text></g><g><title>libobjc.A.dylib`objc_destructInstance (2 samples, 0.01%)</title><rect x="92.5249%" y="549" width="0.0108%" height="15" fill="rgb(254,200,22)" fg:x="17168" fg:w="2"/><text x="92.7749%" y="559.50"></text></g><g><title>libobjc.A.dylib`object_cxxDestructFromClass(objc_object*, objc_class*) (2 samples, 0.01%)</title><rect x="92.5249%" y="533" width="0.0108%" height="15" fill="rgb(219,10,39)" fg:x="17168" fg:w="2"/><text x="92.7749%" y="543.50"></text></g><g><title>CoreFoundation`-[__NSSetI dealloc] (2 samples, 0.01%)</title><rect x="92.5249%" y="517" width="0.0108%" height="15" fill="rgb(226,210,39)" fg:x="17168" fg:w="2"/><text x="92.7749%" y="527.50"></text></g><g><title>libonnxruntime.dylib`-[CoreMLExecution predict:outputs:] (455 samples, 2.45%)</title><rect x="90.0943%" y="581" width="2.4522%" height="15" fill="rgb(208,219,16)" fg:x="16717" fg:w="455"/><text x="90.3443%" y="591.50">li..</text></g><g><title>libonnxruntime.dylib`onnxruntime::coreml::Execution::Predict(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, onnxruntime::coreml::OnnxTensorData, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, onnxruntime::coreml::OnnxTensorData&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, onnxruntime::coreml::OnnxTensorData, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits (460 samples, 2.48%)</title><rect x="90.0835%" y="597" width="2.4791%" height="15" fill="rgb(216,158,51)" fg:x="16715" fg:w="460"/><text x="90.3335%" y="607.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="92.5465%" y="581" width="0.0162%" height="15" fill="rgb(233,14,44)" fg:x="17172" fg:w="3"/><text x="92.7965%" y="591.50"></text></g><g><title>libonnxruntime.dylib`std::__1::pair&lt;std::__1::__hash_map_iterator&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, onnxruntime::coreml::OnnxTensorData&gt;, void*&gt;*&gt;&gt;, bool&gt; std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, onnxruntime::coreml::OnnxTensorData, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, onnxruntime::coreml::OnnxTensorData&gt;&gt;&gt;::emplace&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, onnxruntime::coreml::OnnxTensorData&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="92.5680%" y="597" width="0.0108%" height="15" fill="rgb(237,97,39)" fg:x="17176" fg:w="2"/><text x="92.8180%" y="607.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::CoreMLExecutionProvider::Compile(std::__1::vector&lt;onnxruntime::IExecutionProvider::FusedNodeAndGraph, std::__1::allocator&lt;onnxruntime::IExecutionProvider::FusedNodeAndGraph&gt;&gt; const&amp;, std::__1::vector&lt;onnxruntime::NodeComputeInfo, std::__1::allocator&lt;onnxruntime::NodeComputeInfo&gt;&gt;&amp;)::$_6, std::__1::allocator&lt;onnxruntime::CoreMLExecutionProvider::Compile(std::__1::vector&lt;onnxruntime::IExecutionProvider::FusedNodeAndGraph, std::__1::allocator&lt;onnxruntime::IExecutionProvider::FusedNodeAndGraph&gt;&gt; const&amp;, std::__1::vector&lt;onnxruntime::NodeComputeInfo, std::__1::allocator&lt;onnxruntime::NodeComputeInfo&gt;&gt;&amp;)::$_6&gt;, onnxruntime::common::Status (void*, OrtApi const*, OrtKernelContext*)&gt;::operator() (520 samples, 2.80%)</title><rect x="89.7871%" y="613" width="2.8025%" height="15" fill="rgb(218,198,43)" fg:x="16660" fg:w="520"/><text x="90.0371%" y="623.50">li..</text></g><g><title>libonnxruntime.dylib`onnxruntime::FunctionKernel::Compute (523 samples, 2.82%)</title><rect x="89.7871%" y="629" width="2.8186%" height="15" fill="rgb(231,104,20)" fg:x="16660" fg:w="523"/><text x="90.0371%" y="639.50">li..</text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.01%)</title><rect x="92.5950%" y="613" width="0.0108%" height="15" fill="rgb(254,36,13)" fg:x="17181" fg:w="2"/><text x="92.8450%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (7 samples, 0.04%)</title><rect x="92.6058%" y="517" width="0.0377%" height="15" fill="rgb(248,14,50)" fg:x="17183" fg:w="7"/><text x="92.8558%" y="527.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (7 samples, 0.04%)</title><rect x="92.6058%" y="501" width="0.0377%" height="15" fill="rgb(217,107,29)" fg:x="17183" fg:w="7"/><text x="92.8558%" y="511.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (6 samples, 0.03%)</title><rect x="92.6112%" y="485" width="0.0323%" height="15" fill="rgb(251,169,33)" fg:x="17184" fg:w="6"/><text x="92.8612%" y="495.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void (long)&gt; const&amp;)::$_2&gt;, void (long, long)&gt;::operator() (6 samples, 0.03%)</title><rect x="92.6112%" y="469" width="0.0323%" height="15" fill="rgb(217,108,32)" fg:x="17184" fg:w="6"/><text x="92.8612%" y="479.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&gt;(onnxruntime::concurrency::ThreadPool*, long, MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&amp;&amp;, long)::&apos;lambda&apos;(long), std::__1::allocator&lt;void onnxruntime::concurrency::ThreadPool::TryBatchParallelFor&lt;MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*)::$_0&gt;(onnxruntime::concurrency::ThreadPool*, long, MlasPool (6 samples, 0.03%)</title><rect x="92.6112%" y="453" width="0.0323%" height="15" fill="rgb(219,66,42)" fg:x="17184" fg:w="6"/><text x="92.8612%" y="463.50"></text></g><g><title>libonnxruntime.dylib`void MlasPool2DVectorKernel&lt;MLAS_MAXIMUM_POOLING&gt;(MLAS_POOL_WORK_BLOCK const*, unsigned long, float const*, float*) (6 samples, 0.03%)</title><rect x="92.6112%" y="437" width="0.0323%" height="15" fill="rgb(206,180,7)" fg:x="17184" fg:w="6"/><text x="92.8612%" y="447.50"></text></g><g><title>libonnxruntime.dylib`MlasPool(MLAS_POOLING_KIND, unsigned long, long long const*, long long const*, long long const*, long long const*, long long const*, float const*, float*, onnxruntime::concurrency::ThreadPool*) (8 samples, 0.04%)</title><rect x="92.6058%" y="565" width="0.0431%" height="15" fill="rgb(208,226,31)" fg:x="17183" fg:w="8"/><text x="92.8558%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::SimpleParallelFor(long, std::__1::function&lt;void  (8 samples, 0.04%)</title><rect x="92.6058%" y="549" width="0.0431%" height="15" fill="rgb(218,26,49)" fg:x="17183" fg:w="8"/><text x="92.8558%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (8 samples, 0.04%)</title><rect x="92.6058%" y="533" width="0.0431%" height="15" fill="rgb(233,197,48)" fg:x="17183" fg:w="8"/><text x="92.8558%" y="543.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::MaxPoolV8::Compute (9 samples, 0.05%)</title><rect x="92.6058%" y="629" width="0.0485%" height="15" fill="rgb(252,181,51)" fg:x="17183" fg:w="9"/><text x="92.8558%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::common::Status onnxruntime::utils::MLTypeCallDispatcher&lt;float, double, signed char, unsigned char&gt;::InvokeRetWithUnsupportedPolicyAndLeadingTemplateArgs&lt;onnxruntime::common::Status, onnxruntime::MaxPoolV8::ComputeHelper, onnxruntime::utils::mltype_dispatcher_internal::UnsupportedTypeDefaultPolicy&lt;onnxruntime::common::Status&gt;, onnxruntime::TypeList&lt;&gt;, onnxruntime::MaxPoolV8 const*, onnxruntime::OpKernelContext*&amp;&gt; (9 samples, 0.05%)</title><rect x="92.6058%" y="613" width="0.0485%" height="15" fill="rgb(253,90,19)" fg:x="17183" fg:w="9"/><text x="92.8558%" y="623.50"></text></g><g><title>libonnxruntime.dylib`int onnxruntime::utils::mltype_dispatcher_internal::CallableDispatchableRetHelper&lt;onnxruntime::common::Status, onnxruntime::utils::mltype_dispatcher_internal::UnsupportedTypeDefaultPolicy&lt;onnxruntime::common::Status&gt;&gt;::Invoke&lt;float, onnxruntime::MaxPoolV8::ComputeHelper&lt;float&gt;, onnxruntime::MaxPoolV8 const*, onnxruntime::OpKernelContext*&amp;&gt;(onnxruntime::MaxPoolV8::ComputeHelper (9 samples, 0.05%)</title><rect x="92.6058%" y="597" width="0.0485%" height="15" fill="rgb(215,171,30)" fg:x="17183" fg:w="9"/><text x="92.8558%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PoolBase::Compute (9 samples, 0.05%)</title><rect x="92.6058%" y="581" width="0.0485%" height="15" fill="rgb(214,222,9)" fg:x="17183" fg:w="9"/><text x="92.8558%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContextInternal::OpKernelContextInternal (5 samples, 0.03%)</title><rect x="92.6597%" y="629" width="0.0269%" height="15" fill="rgb(223,3,22)" fg:x="17193" fg:w="5"/><text x="92.9097%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContext::OpKernelContext (4 samples, 0.02%)</title><rect x="92.6650%" y="613" width="0.0216%" height="15" fill="rgb(225,196,46)" fg:x="17194" fg:w="4"/><text x="92.9150%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelInfo::node (2 samples, 0.01%)</title><rect x="92.6866%" y="629" width="0.0108%" height="15" fill="rgb(209,110,37)" fg:x="17198" fg:w="2"/><text x="92.9366%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::BroadcastIterator::Init (2 samples, 0.01%)</title><rect x="92.7189%" y="565" width="0.0108%" height="15" fill="rgb(249,89,12)" fg:x="17204" fg:w="2"/><text x="92.9689%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InputBroadcaster::InputBroadcaster (5 samples, 0.03%)</title><rect x="92.7082%" y="597" width="0.0269%" height="15" fill="rgb(226,27,33)" fg:x="17202" fg:w="5"/><text x="92.9582%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Broadcaster::Broadcaster(gsl::span&lt;long long const, 18446744073709551615ul&gt;, gsl::span (4 samples, 0.02%)</title><rect x="92.7136%" y="581" width="0.0216%" height="15" fill="rgb(213,82,22)" fg:x="17203" fg:w="4"/><text x="92.9636%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::AllocateMLValueTensorPreAllocateBuffer (2 samples, 0.01%)</title><rect x="92.7405%" y="533" width="0.0108%" height="15" fill="rgb(248,140,0)" fg:x="17208" fg:w="2"/><text x="92.9905%" y="543.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContext::Output (4 samples, 0.02%)</title><rect x="92.7351%" y="597" width="0.0216%" height="15" fill="rgb(228,106,3)" fg:x="17207" fg:w="4"/><text x="92.9851%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::OpKernelContext::OutputMLValue (4 samples, 0.02%)</title><rect x="92.7351%" y="581" width="0.0216%" height="15" fill="rgb(209,23,37)" fg:x="17207" fg:w="4"/><text x="92.9851%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::IExecutionFrame::GetOrCreateNodeOutputMLValue (4 samples, 0.02%)</title><rect x="92.7351%" y="565" width="0.0216%" height="15" fill="rgb(241,93,50)" fg:x="17207" fg:w="4"/><text x="92.9851%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::AllocateAsPerAllocationPlan (4 samples, 0.02%)</title><rect x="92.7351%" y="549" width="0.0216%" height="15" fill="rgb(253,46,43)" fg:x="17207" fg:w="4"/><text x="92.9851%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Tensor const* onnxruntime::OpKernelContext::Input&lt;onnxruntime::Tensor&gt; (3 samples, 0.02%)</title><rect x="92.7621%" y="597" width="0.0162%" height="15" fill="rgb(226,206,43)" fg:x="17212" fg:w="3"/><text x="93.0121%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Tensor const&amp; OrtValue::Get&lt;onnxruntime::Tensor&gt; (2 samples, 0.01%)</title><rect x="92.7674%" y="581" width="0.0108%" height="15" fill="rgb(217,54,7)" fg:x="17213" fg:w="2"/><text x="93.0174%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::EndParallelSectionInternal(onnxruntime::concurrency::ThreadPoolTempl (12 samples, 0.06%)</title><rect x="92.7890%" y="533" width="0.0647%" height="15" fill="rgb(223,5,52)" fg:x="17217" fg:w="12"/><text x="93.0390%" y="543.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPoolTempl&lt;onnxruntime::Env&gt;::RunInParallel(std::__1::function&lt;void  (69 samples, 0.37%)</title><rect x="92.7890%" y="549" width="0.3719%" height="15" fill="rgb(206,52,46)" fg:x="17217" fg:w="69"/><text x="93.0390%" y="559.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0, std::__1::allocator&lt;onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void (long, long)&gt; const&amp;)::$_0&gt;, void (unsigned int)&gt;::operator() (56 samples, 0.30%)</title><rect x="92.8591%" y="533" width="0.3018%" height="15" fill="rgb(253,136,11)" fg:x="17230" fg:w="56"/><text x="93.1091%" y="543.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253&gt;, void (long, long)&gt;::operator() (53 samples, 0.29%)</title><rect x="92.8752%" y="517" width="0.2856%" height="15" fill="rgb(208,106,33)" fg:x="17233" fg:w="53"/><text x="93.1252%" y="527.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PRelu&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::$_241::__invoke (53 samples, 0.29%)</title><rect x="92.8752%" y="501" width="0.2856%" height="15" fill="rgb(206,54,4)" fg:x="17233" fg:w="53"/><text x="93.1252%" y="511.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelForFixedBlockSizeScheduling(long, long, std::__1::function&lt;void  (71 samples, 0.38%)</title><rect x="92.7836%" y="581" width="0.3826%" height="15" fill="rgb(213,3,15)" fg:x="17216" fg:w="71"/><text x="93.0336%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::RunInParallel(std::__1::function&lt;void  (71 samples, 0.38%)</title><rect x="92.7836%" y="565" width="0.3826%" height="15" fill="rgb(252,211,39)" fg:x="17216" fg:w="71"/><text x="93.0336%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::BroadcastIterator::AdvanceBy (4 samples, 0.02%)</title><rect x="93.1663%" y="565" width="0.0216%" height="15" fill="rgb(223,6,36)" fg:x="17287" fg:w="4"/><text x="93.4163%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PRelu&lt;float&gt;::Compute(onnxruntime::OpKernelContext*) const::$_241::__invoke (67 samples, 0.36%)</title><rect x="93.1986%" y="565" width="0.3611%" height="15" fill="rgb(252,169,45)" fg:x="17293" fg:w="67"/><text x="93.4486%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PRelu&lt;float&gt;::Compute (164 samples, 0.88%)</title><rect x="92.6974%" y="629" width="0.8839%" height="15" fill="rgb(212,48,26)" fg:x="17200" fg:w="164"/><text x="92.9474%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::UntypedBroadcastTwo (163 samples, 0.88%)</title><rect x="92.7028%" y="613" width="0.8785%" height="15" fill="rgb(251,102,48)" fg:x="17201" fg:w="163"/><text x="92.9528%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::concurrency::ThreadPool::ParallelFor(long, onnxruntime::TensorOpCost const&amp;, std::__1::function&lt;void  (148 samples, 0.80%)</title><rect x="92.7836%" y="597" width="0.7976%" height="15" fill="rgb(243,208,16)" fg:x="17216" fg:w="148"/><text x="93.0336%" y="607.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253, std::__1::allocator&lt;onnxruntime::UntypedBroadcastTwo(onnxruntime::OpKernelContext&amp;, onnxruntime::ProcessBroadcastSpanFuncs const&amp;, double, void*)::$_253&gt;, void (long, long)&gt;::operator() (77 samples, 0.41%)</title><rect x="93.1663%" y="581" width="0.4150%" height="15" fill="rgb(219,96,24)" fg:x="17287" fg:w="77"/><text x="93.4163%" y="591.50"></text></g><g><title>libonnxruntime.dylib`void onnxruntime::BroadcastLooper&lt;onnxruntime::BroadcastHelper&gt; (4 samples, 0.02%)</title><rect x="93.5597%" y="565" width="0.0216%" height="15" fill="rgb(219,33,29)" fg:x="17360" fg:w="4"/><text x="93.8097%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InputBroadcaster::AdvanceBy (2 samples, 0.01%)</title><rect x="93.5705%" y="549" width="0.0108%" height="15" fill="rgb(223,176,5)" fg:x="17362" fg:w="2"/><text x="93.8205%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Pad::Compute (5 samples, 0.03%)</title><rect x="93.5812%" y="629" width="0.0269%" height="15" fill="rgb(228,140,14)" fg:x="17364" fg:w="5"/><text x="93.8312%" y="639.50"></text></g><g><title>libonnxruntime.dylib`MlasTranspose(unsigned int const*, unsigned int*, unsigned long, unsigned long) (15 samples, 0.08%)</title><rect x="93.6136%" y="613" width="0.0808%" height="15" fill="rgb(217,179,31)" fg:x="17370" fg:w="15"/><text x="93.8636%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Transpose::Compute (16 samples, 0.09%)</title><rect x="93.6136%" y="629" width="0.0862%" height="15" fill="rgb(230,9,30)" fg:x="17370" fg:w="16"/><text x="93.8636%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecuteKernel (2,265 samples, 12.21%)</title><rect x="81.9240%" y="645" width="12.2070%" height="15" fill="rgb(230,136,20)" fg:x="15201" fg:w="2265"/><text x="82.1740%" y="655.50">libonnxruntime.dyl..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (80 samples, 0.43%)</title><rect x="93.6998%" y="629" width="0.4312%" height="15" fill="rgb(215,210,22)" fg:x="17386" fg:w="80"/><text x="93.9498%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::RunSince (2,267 samples, 12.22%)</title><rect x="81.9240%" y="677" width="12.2177%" height="15" fill="rgb(218,43,5)" fg:x="15201" fg:w="2267"/><text x="82.1740%" y="687.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::LaunchKernelStep::Execute (2,267 samples, 12.22%)</title><rect x="81.9240%" y="661" width="12.2177%" height="15" fill="rgb(216,11,5)" fg:x="15201" fg:w="2267"/><text x="82.1740%" y="671.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::IExecutionFrame::Init(gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::unordered_map&lt;int, OrtValue, std::__1::hash&lt;int&gt;, std::__1::equal_to&lt;int&gt;, std::__1::allocator&lt;std::__1::pair&lt;int const, OrtValue&gt;&gt;&gt; const&amp;, std::__1::function&lt;bool (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)&gt; const&amp;, gsl::span (5 samples, 0.03%)</title><rect x="94.1417%" y="629" width="0.0269%" height="15" fill="rgb(209,82,29)" fg:x="17468" fg:w="5"/><text x="94.3917%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::ExecutionFrame(gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (6 samples, 0.03%)</title><rect x="94.1417%" y="645" width="0.0323%" height="15" fill="rgb(244,115,12)" fg:x="17468" fg:w="6"/><text x="94.3917%" y="655.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::StreamExecutionContext::StreamExecutionContext(onnxruntime::SessionState const&amp;, int, gsl::span&lt;unsigned long const, 18446744073709551615ul&gt;, unsigned long, onnxruntime::DeviceStreamCollection const*, gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;int const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (7 samples, 0.04%)</title><rect x="94.1417%" y="677" width="0.0377%" height="15" fill="rgb(222,82,18)" fg:x="17468" fg:w="7"/><text x="94.3917%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::StreamExecutionContext::StreamExecutionContext(onnxruntime::SessionState const&amp;, int, gsl::span&lt;unsigned long const, 18446744073709551615ul&gt;, unsigned long, onnxruntime::DeviceStreamCollection const*, gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;int const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (7 samples, 0.04%)</title><rect x="94.1417%" y="661" width="0.0377%" height="15" fill="rgb(249,227,8)" fg:x="17468" fg:w="7"/><text x="94.3917%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecutionFrame::~ExecutionFrame (4 samples, 0.02%)</title><rect x="94.1795%" y="661" width="0.0216%" height="15" fill="rgb(253,141,45)" fg:x="17475" fg:w="4"/><text x="94.4295%" y="671.50"></text></g><g><title>libonnxruntime.dylib`absl::lts_20220623::inlined_vector_internal::Storage&lt;OrtValue, 2ul, std::__1::allocator&lt;OrtValue&gt;&gt;::DestroyContents (4 samples, 0.02%)</title><rect x="94.1795%" y="645" width="0.0216%" height="15" fill="rgb(234,184,4)" fg:x="17475" fg:w="4"/><text x="94.4295%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.02%)</title><rect x="94.1849%" y="629" width="0.0162%" height="15" fill="rgb(218,194,23)" fg:x="17476" fg:w="3"/><text x="94.4349%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::Run(OrtRunOptions const&amp;, gsl::span&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;*, std::__1::vector&lt;OrtDevice, std::__1::allocator (2,287 samples, 12.33%)</title><rect x="81.8863%" y="757" width="12.3255%" height="15" fill="rgb(235,66,41)" fg:x="15194" fg:w="2287"/><text x="82.1363%" y="767.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::utils::ExecuteGraph(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator (2,284 samples, 12.31%)</title><rect x="81.9025%" y="741" width="12.3094%" height="15" fill="rgb(245,217,1)" fg:x="15197" fg:w="2284"/><text x="82.1525%" y="751.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::utils::ExecuteGraph(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator (2,284 samples, 12.31%)</title><rect x="81.9025%" y="725" width="12.3094%" height="15" fill="rgb(229,91,1)" fg:x="15197" fg:w="2284"/><text x="82.1525%" y="735.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::utils::ExecuteGraphImpl(onnxruntime::SessionState const&amp;, onnxruntime::FeedsFetchesManager const&amp;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (2,283 samples, 12.30%)</title><rect x="81.9078%" y="709" width="12.3040%" height="15" fill="rgb(207,101,30)" fg:x="15198" fg:w="2283"/><text x="82.1578%" y="719.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::ExecuteThePlan(onnxruntime::SessionState const&amp;, gsl::span&lt;int const, 18446744073709551615ul&gt;, gsl::span&lt;OrtValue const, 18446744073709551615ul&gt;, gsl::span&lt;int const, 18446744073709551615ul&gt;, std::__1::vector&lt;OrtValue, std::__1::allocator&lt;OrtValue&gt;&gt;&amp;, std::__1::unordered_map&lt;unsigned long, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::TensorShape const&amp;, OrtDevice const&amp;, OrtValue&amp;, bool&amp;)&gt;, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;std::__1::pair&lt;unsigned long const, std::__1::function&lt;onnxruntime::common::Status  (2,282 samples, 12.30%)</title><rect x="81.9132%" y="693" width="12.2986%" height="15" fill="rgb(223,82,49)" fg:x="15199" fg:w="2282"/><text x="82.1632%" y="703.50">libonnxruntime.dyl..</text></g><g><title>libonnxruntime.dylib`onnxruntime::StreamExecutionContext::~StreamExecutionContext (6 samples, 0.03%)</title><rect x="94.1795%" y="677" width="0.0323%" height="15" fill="rgb(218,167,17)" fg:x="17475" fg:w="6"/><text x="94.4295%" y="687.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.01%)</title><rect x="94.2010%" y="661" width="0.0108%" height="15" fill="rgb(208,103,14)" fg:x="17479" fg:w="2"/><text x="94.4510%" y="671.50"></text></g><g><title>libonnxruntime.dylib`OrtApis::Run (2,290 samples, 12.34%)</title><rect x="81.8755%" y="773" width="12.3417%" height="15" fill="rgb(238,20,8)" fg:x="15192" fg:w="2290"/><text x="82.1255%" y="783.50">libonnxruntime.dyl..</text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;ort::value::Value&gt; (4 samples, 0.02%)</title><rect x="94.2172%" y="773" width="0.0216%" height="15" fill="rgb(218,80,54)" fg:x="17482" fg:w="4"/><text x="94.4672%" y="783.50"></text></g><g><title>rust-eyetracking`core::ptr::drop_in_place&lt;ort::value::DynArrayRef&gt; (4 samples, 0.02%)</title><rect x="94.2172%" y="757" width="0.0216%" height="15" fill="rgb(240,144,17)" fg:x="17482" fg:w="4"/><text x="94.4672%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.02%)</title><rect x="94.2172%" y="741" width="0.0216%" height="15" fill="rgb(245,27,50)" fg:x="17482" fg:w="4"/><text x="94.4672%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="94.2226%" y="725" width="0.0162%" height="15" fill="rgb(251,51,7)" fg:x="17483" fg:w="3"/><text x="94.4726%" y="735.50"></text></g><g><title>rust-eyetracking`ort::session::Session::run (2,295 samples, 12.37%)</title><rect x="81.8755%" y="789" width="12.3686%" height="15" fill="rgb(245,217,29)" fg:x="15192" fg:w="2295"/><text x="82.1255%" y="799.50">rust-eyetracking`o..</text></g><g><title>libonnxruntime.dylib`google::protobuf::MessageLite::ParseFromArray (4 samples, 0.02%)</title><rect x="94.2495%" y="693" width="0.0216%" height="15" fill="rgb(221,176,29)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="703.50"></text></g><g><title>libonnxruntime.dylib`onnx::ModelProto::_InternalParse (4 samples, 0.02%)</title><rect x="94.2495%" y="677" width="0.0216%" height="15" fill="rgb(212,180,24)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="687.50"></text></g><g><title>libonnxruntime.dylib`google::protobuf::internal::ParseContext::ParseMessage (4 samples, 0.02%)</title><rect x="94.2495%" y="661" width="0.0216%" height="15" fill="rgb(254,24,2)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnx::GraphProto::_InternalParse (4 samples, 0.02%)</title><rect x="94.2495%" y="645" width="0.0216%" height="15" fill="rgb(230,100,2)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="655.50"></text></g><g><title>libonnxruntime.dylib`google::protobuf::internal::ParseContext::ParseMessage (4 samples, 0.02%)</title><rect x="94.2495%" y="629" width="0.0216%" height="15" fill="rgb(219,142,25)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnx::TensorProto::_InternalParse (4 samples, 0.02%)</title><rect x="94.2495%" y="613" width="0.0216%" height="15" fill="rgb(240,73,43)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="623.50"></text></g><g><title>libonnxruntime.dylib`google::protobuf::internal::InlineGreedyStringParser(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.02%)</title><rect x="94.2495%" y="597" width="0.0216%" height="15" fill="rgb(214,114,15)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="607.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (4 samples, 0.02%)</title><rect x="94.2495%" y="581" width="0.0216%" height="15" fill="rgb(207,130,4)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="94.2495%" y="565" width="0.0216%" height="15" fill="rgb(221,25,40)" fg:x="17488" fg:w="4"/><text x="94.4995%" y="575.50"></text></g><g><title>libonnxruntime.dylib`(anonymous namespace)::CreateSessionAndLoadModel(OrtSessionOptions const*, OrtEnv const*, char const*, void const*, unsigned long, std::__1::unique_ptr&lt;onnxruntime::InferenceSession, std::__1::default_delete (7 samples, 0.04%)</title><rect x="94.2441%" y="757" width="0.0377%" height="15" fill="rgb(241,184,7)" fg:x="17487" fg:w="7"/><text x="94.4941%" y="767.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::Load (7 samples, 0.04%)</title><rect x="94.2441%" y="741" width="0.0377%" height="15" fill="rgb(235,159,4)" fg:x="17487" fg:w="7"/><text x="94.4941%" y="751.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::LoadWithLoader(std::__1::function&lt;onnxruntime::common::Status (std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;)&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.04%)</title><rect x="94.2441%" y="725" width="0.0377%" height="15" fill="rgb(214,87,48)" fg:x="17487" fg:w="7"/><text x="94.4941%" y="735.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::InferenceSession::Load(void const*, int)::$_4, std::__1::allocator&lt;onnxruntime::InferenceSession::Load(void const*, int)::$_4&gt;, onnxruntime::common::Status (std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;)&gt;::operator()(std::__1::shared_ptr (6 samples, 0.03%)</title><rect x="94.2495%" y="709" width="0.0323%" height="15" fill="rgb(246,198,24)" fg:x="17488" fg:w="6"/><text x="94.4995%" y="719.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Model::Load(onnx::ModelProto&amp;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;onnxruntime::Model&gt;&amp;, std::__1::list&lt;std::__1::shared_ptr&lt;onnxruntime::IOnnxRuntimeOpSchemaCollection&gt;, std::__1::allocator&lt;std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.2711%" y="693" width="0.0108%" height="15" fill="rgb(209,66,40)" fg:x="17492" fg:w="2"/><text x="94.5211%" y="703.50"></text></g><g><title>CoreML`+[MLNeuralNetworkV1Container containerFromCompiledArchive:modelVersionInfo:compilerVersionInfo:configuration:error:] (2 samples, 0.01%)</title><rect x="94.2873%" y="485" width="0.0108%" height="15" fill="rgb(233,147,39)" fg:x="17495" fg:w="2"/><text x="94.5373%" y="495.50"></text></g><g><title>Espresso`Espresso::load_network_layers_post_dispatch(std::__1::shared_ptr&lt;Espresso::net&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::cpu_context_transfer_algo_t&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::net_info_ir_t&gt; const&amp;, bool, Espresso::network_shape const&amp;, Espresso::compute_path, bool, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.2980%" y="341" width="0.0108%" height="15" fill="rgb(231,145,52)" fg:x="17497" fg:w="2"/><text x="94.5480%" y="351.50"></text></g><g><title>Espresso`Espresso::get_net_info_ir(std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, Espresso::network_shape const&amp;, Espresso::compute_path const&amp;, Espresso::platform const&amp;, Espresso::compute_path const&amp;, std::__1::shared_ptr&lt;Espresso::cpu_context_transfer_algo_t&gt;&amp;, std::__1::shared_ptr&lt;Espresso::net_info_ir_t&gt;&amp;, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3088%" y="325" width="0.0108%" height="15" fill="rgb(206,20,26)" fg:x="17499" fg:w="2"/><text x="94.5588%" y="335.50"></text></g><g><title>Espresso`Espresso::cpu_context_transfer_algo_t::create_net_info_ir(std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, Espresso::network_shape const&amp;, Espresso::compute_path, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3088%" y="309" width="0.0108%" height="15" fill="rgb(238,220,4)" fg:x="17499" fg:w="2"/><text x="94.5588%" y="319.50"></text></g><g><title>Espresso`Espresso::cpu_context_transfer_algo_t::assemble_input_output_blob_topology(std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt;&amp;, Espresso::network_shape const&amp;, Espresso::compute_path, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3088%" y="293" width="0.0108%" height="15" fill="rgb(252,195,42)" fg:x="17499" fg:w="2"/><text x="94.5588%" y="303.50"></text></g><g><title>Espresso`Espresso::MPSEngine::context::~context (2 samples, 0.01%)</title><rect x="94.3196%" y="277" width="0.0108%" height="15" fill="rgb(209,10,6)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="287.50"></text></g><g><title>Espresso`std::__1::__shared_weak_count::__release_shared[abi:v15006] (2 samples, 0.01%)</title><rect x="94.3196%" y="261" width="0.0108%" height="15" fill="rgb(229,3,52)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="271.50"></text></g><g><title>Espresso`Espresso::context_metal::~context_metal (2 samples, 0.01%)</title><rect x="94.3196%" y="245" width="0.0108%" height="15" fill="rgb(253,49,37)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="255.50"></text></g><g><title>AGXMetalG14X`-[AGXG14XFamilyCommandQueue dealloc] (2 samples, 0.01%)</title><rect x="94.3196%" y="229" width="0.0108%" height="15" fill="rgb(240,103,49)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="239.50"></text></g><g><title>IOGPU`-[IOGPUMetalCommandQueue dealloc] (2 samples, 0.01%)</title><rect x="94.3196%" y="213" width="0.0108%" height="15" fill="rgb(250,182,30)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="223.50"></text></g><g><title>CoreFoundation`_CFRelease (2 samples, 0.01%)</title><rect x="94.3196%" y="197" width="0.0108%" height="15" fill="rgb(248,8,30)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="207.50"></text></g><g><title>IOGPU`ioGPUCommandQueueFinalize (2 samples, 0.01%)</title><rect x="94.3196%" y="181" width="0.0108%" height="15" fill="rgb(237,120,30)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="191.50"></text></g><g><title>IOKit`IOConnectCallMethod (2 samples, 0.01%)</title><rect x="94.3196%" y="165" width="0.0108%" height="15" fill="rgb(221,146,34)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="175.50"></text></g><g><title>IOKit`io_connect_method (2 samples, 0.01%)</title><rect x="94.3196%" y="149" width="0.0108%" height="15" fill="rgb(242,55,13)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (2 samples, 0.01%)</title><rect x="94.3196%" y="133" width="0.0108%" height="15" fill="rgb(242,112,31)" fg:x="17501" fg:w="2"/><text x="94.5696%" y="143.50"></text></g><g><title>Espresso`std::__1::__shared_weak_count::__release_shared[abi:v15006] (4 samples, 0.02%)</title><rect x="94.3196%" y="325" width="0.0216%" height="15" fill="rgb(249,192,27)" fg:x="17501" fg:w="4"/><text x="94.5696%" y="335.50"></text></g><g><title>Espresso`std::__1::__shared_ptr_emplace&lt;Espresso::cpu_context_transfer_algo_t, std::__1::allocator&lt;Espresso::cpu_context_transfer_algo_t&gt;&gt;::__on_zero_shared (4 samples, 0.02%)</title><rect x="94.3196%" y="309" width="0.0216%" height="15" fill="rgb(208,204,44)" fg:x="17501" fg:w="4"/><text x="94.5696%" y="319.50"></text></g><g><title>Espresso`std::__1::__shared_weak_count::__release_shared[abi:v15006] (4 samples, 0.02%)</title><rect x="94.3196%" y="293" width="0.0216%" height="15" fill="rgb(208,93,54)" fg:x="17501" fg:w="4"/><text x="94.5696%" y="303.50"></text></g><g><title>Espresso`Espresso::cpu_context_transfer_algo_t::check_all_kernels_availability_on_context(std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt;&amp;, Espresso::compute_path, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3519%" y="277" width="0.0108%" height="15" fill="rgb(242,1,31)" fg:x="17507" fg:w="2"/><text x="94.6019%" y="287.50"></text></g><g><title>Espresso`is_kernel_available_on_engine(unsigned long, std::__1::shared_ptr&lt;Espresso::base_kernel&gt;, Espresso::kernel_info_t const&amp;, std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, Espresso::compute_path, std::__1::shared_ptr&lt;Espresso::net_info_ir_t&gt;, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3519%" y="261" width="0.0108%" height="15" fill="rgb(241,83,25)" fg:x="17507" fg:w="2"/><text x="94.6019%" y="271.50"></text></g><g><title>Espresso`Espresso::load_network_layers_internal(std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt; const&amp;, Espresso::network_shape const&amp;, std::__1::basic_istream&lt;char, std::__1::char_traits&lt;char&gt;&gt;*, Espresso::compute_path, bool, std::__1::shared_ptr (14 samples, 0.08%)</title><rect x="94.2980%" y="357" width="0.0755%" height="15" fill="rgb(205,169,50)" fg:x="17497" fg:w="14"/><text x="94.5480%" y="367.50"></text></g><g><title>Espresso`Espresso::run_dispatch_v2(std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, Espresso::network_shape const&amp;, Espresso::compute_path const&amp;, std::__1::basic_istream&lt;char, std::__1::char_traits (12 samples, 0.06%)</title><rect x="94.3088%" y="341" width="0.0647%" height="15" fill="rgb(239,186,37)" fg:x="17499" fg:w="12"/><text x="94.5588%" y="351.50"></text></g><g><title>Espresso`try_dispatch(std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, Espresso::network_shape const&amp;, Espresso::compute_path const&amp;, std::__1::basic_istream&lt;char, std::__1::char_traits (6 samples, 0.03%)</title><rect x="94.3411%" y="325" width="0.0323%" height="15" fill="rgb(205,221,10)" fg:x="17505" fg:w="6"/><text x="94.5911%" y="335.50"></text></g><g><title>Espresso`Espresso::get_net_info_ir(std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, Espresso::network_shape const&amp;, Espresso::compute_path const&amp;, Espresso::platform const&amp;, Espresso::compute_path const&amp;, std::__1::shared_ptr&lt;Espresso::cpu_context_transfer_algo_t&gt;&amp;, std::__1::shared_ptr&lt;Espresso::net_info_ir_t&gt;&amp;, std::__1::shared_ptr (5 samples, 0.03%)</title><rect x="94.3465%" y="309" width="0.0269%" height="15" fill="rgb(218,196,15)" fg:x="17506" fg:w="5"/><text x="94.5965%" y="319.50"></text></g><g><title>Espresso`Espresso::cpu_context_transfer_algo_t::create_net_info_ir(std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, Espresso::network_shape const&amp;, Espresso::compute_path, std::__1::shared_ptr (5 samples, 0.03%)</title><rect x="94.3465%" y="293" width="0.0269%" height="15" fill="rgb(218,196,35)" fg:x="17506" fg:w="5"/><text x="94.5965%" y="303.50"></text></g><g><title>Espresso`Espresso::cpu_context_transfer_algo_t::is_kernel_registered_on_engine(std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::net_info_ir_t&gt;&amp;, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3627%" y="277" width="0.0108%" height="15" fill="rgb(233,63,24)" fg:x="17509" fg:w="2"/><text x="94.6127%" y="287.50"></text></g><g><title>Espresso`Espresso::create_kernel_for_engine(Espresso::kernel_info_t const&amp;, std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt;, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3627%" y="261" width="0.0108%" height="15" fill="rgb(225,8,4)" fg:x="17509" fg:w="2"/><text x="94.6127%" y="271.50"></text></g><g><title>Espresso`Espresso::SerDes::layer_io&lt;Espresso::generic_convolution_kernel&gt;::read(Espresso::SerDes::generic_serdes_object&amp;, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.3627%" y="245" width="0.0108%" height="15" fill="rgb(234,105,35)" fg:x="17509" fg:w="2"/><text x="94.6127%" y="255.50"></text></g><g><title>Espresso`void Espresso::SerDes::params_io&lt;Espresso::convolution_uniforms&gt; (2 samples, 0.01%)</title><rect x="94.3627%" y="229" width="0.0108%" height="15" fill="rgb(236,21,32)" fg:x="17509" fg:w="2"/><text x="94.6127%" y="239.50"></text></g><g><title>Espresso`Espresso::load_and_shape_network(std::__1::shared_ptr&lt;Espresso::SerDes::generic_serdes_object&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr&lt;Espresso::abstract_context&gt; const&amp;, Espresso::network_shape const&amp;, Espresso::compute_path, std::__1::shared_ptr&lt;Espresso::blob_storage_abstract&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (16 samples, 0.09%)</title><rect x="94.2980%" y="373" width="0.0862%" height="15" fill="rgb(228,109,6)" fg:x="17497" fg:w="16"/><text x="94.5480%" y="383.50"></text></g><g><title>Espresso`Espresso::shape_network_recursive (2 samples, 0.01%)</title><rect x="94.3735%" y="357" width="0.0108%" height="15" fill="rgb(229,215,31)" fg:x="17511" fg:w="2"/><text x="94.6235%" y="367.50"></text></g><g><title>Espresso`Espresso::ANECompilerEngine::context::network_transform_pre_allocation (2 samples, 0.01%)</title><rect x="94.3735%" y="341" width="0.0108%" height="15" fill="rgb(221,52,54)" fg:x="17511" fg:w="2"/><text x="94.6235%" y="351.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine _addNetworkToPlan:error:] (17 samples, 0.09%)</title><rect x="94.2980%" y="453" width="0.0916%" height="15" fill="rgb(252,129,43)" fg:x="17497" fg:w="17"/><text x="94.5480%" y="463.50"></text></g><g><title>Espresso`espresso_plan_add_network (17 samples, 0.09%)</title><rect x="94.2980%" y="437" width="0.0916%" height="15" fill="rgb(248,183,27)" fg:x="17497" fg:w="17"/><text x="94.5480%" y="447.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::add_network (17 samples, 0.09%)</title><rect x="94.2980%" y="421" width="0.0916%" height="15" fill="rgb(250,0,22)" fg:x="17497" fg:w="17"/><text x="94.5480%" y="431.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::add_network(char const*, espresso_storage_type_t, std::__1::shared_ptr (17 samples, 0.09%)</title><rect x="94.2980%" y="405" width="0.0916%" height="15" fill="rgb(213,166,10)" fg:x="17497" fg:w="17"/><text x="94.5480%" y="415.50"></text></g><g><title>Espresso`Espresso::load_network(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (17 samples, 0.09%)</title><rect x="94.2980%" y="389" width="0.0916%" height="15" fill="rgb(207,163,36)" fg:x="17497" fg:w="17"/><text x="94.5480%" y="399.50"></text></g><g><title>CoreVideo`CVPixelFormatDescriptionCreateWithPixelFormatType (2 samples, 0.01%)</title><rect x="94.4004%" y="293" width="0.0108%" height="15" fill="rgb(208,122,22)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="303.50"></text></g><g><title>CoreVideo`CVPixelFormatDescriptionGetDescriptionWithPixelFormatType (2 samples, 0.01%)</title><rect x="94.4004%" y="277" width="0.0108%" height="15" fill="rgb(207,104,49)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (2 samples, 0.01%)</title><rect x="94.4004%" y="261" width="0.0108%" height="15" fill="rgb(248,211,50)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (2 samples, 0.01%)</title><rect x="94.4004%" y="245" width="0.0108%" height="15" fill="rgb(217,13,45)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (2 samples, 0.01%)</title><rect x="94.4004%" y="229" width="0.0108%" height="15" fill="rgb(211,216,49)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="239.50"></text></g><g><title>CoreVideo`_pixelFormatDictionaryInit() (2 samples, 0.01%)</title><rect x="94.4004%" y="213" width="0.0108%" height="15" fill="rgb(221,58,53)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="223.50"></text></g><g><title>CoreVideo`registerCompressedTiledFormat(unsigned int, unsigned int, __CFString const*, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long const*, CVInt32Point const*, unsigned char const**, unsigned char const*, CVPixelFormatCompressionTypeAndFootprint const*, CVPixelFormatTiledAddressFormatType const*, CVInt32Point const*, unsigned int, __CFDictionary*, __CFArray*) (2 samples, 0.01%)</title><rect x="94.4004%" y="197" width="0.0108%" height="15" fill="rgb(220,112,41)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="207.50"></text></g><g><title>CoreVideo`_registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(__CFDictionary const*, unsigned int, __CFDictionary*, __CFArray*) (2 samples, 0.01%)</title><rect x="94.4004%" y="181" width="0.0108%" height="15" fill="rgb(236,38,28)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="191.50"></text></g><g><title>CoreFoundation`CFArrayContainsValue (2 samples, 0.01%)</title><rect x="94.4004%" y="165" width="0.0108%" height="15" fill="rgb(227,195,22)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="175.50"></text></g><g><title>CoreFoundation`CFEqual (2 samples, 0.01%)</title><rect x="94.4004%" y="149" width="0.0108%" height="15" fill="rgb(214,55,33)" fg:x="17516" fg:w="2"/><text x="94.6504%" y="159.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine _setupContextAndPlanWithConfiguration:usingCPU:reshapeWithContainer:error:] (22 samples, 0.12%)</title><rect x="94.2980%" y="469" width="0.1186%" height="15" fill="rgb(248,80,13)" fg:x="17497" fg:w="22"/><text x="94.5480%" y="479.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine rebuildPlan:error:] (5 samples, 0.03%)</title><rect x="94.3897%" y="453" width="0.0269%" height="15" fill="rgb(238,52,6)" fg:x="17514" fg:w="5"/><text x="94.6397%" y="463.50"></text></g><g><title>Espresso`espresso_plan_build (5 samples, 0.03%)</title><rect x="94.3897%" y="437" width="0.0269%" height="15" fill="rgb(224,198,47)" fg:x="17514" fg:w="5"/><text x="94.6397%" y="447.50"></text></g><g><title>Espresso`espresso_plan_build_with_options (5 samples, 0.03%)</title><rect x="94.3897%" y="421" width="0.0269%" height="15" fill="rgb(233,171,20)" fg:x="17514" fg:w="5"/><text x="94.6397%" y="431.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::prepare (5 samples, 0.03%)</title><rect x="94.3897%" y="405" width="0.0269%" height="15" fill="rgb(241,30,25)" fg:x="17514" fg:w="5"/><text x="94.6397%" y="415.50"></text></g><g><title>Espresso`EspressoLight::espresso_plan::prepare_compiler_if_needed (4 samples, 0.02%)</title><rect x="94.3950%" y="389" width="0.0216%" height="15" fill="rgb(207,171,38)" fg:x="17515" fg:w="4"/><text x="94.6450%" y="399.50"></text></g><g><title>Espresso`Espresso::abstract_context::compute_batch_sync(void (std::__1::shared_ptr (3 samples, 0.02%)</title><rect x="94.4004%" y="373" width="0.0162%" height="15" fill="rgb(234,70,1)" fg:x="17516" fg:w="3"/><text x="94.6504%" y="383.50"></text></g><g><title>Espresso`Espresso::net::__build(std::__1::shared_ptr (3 samples, 0.02%)</title><rect x="94.4004%" y="357" width="0.0162%" height="15" fill="rgb(232,178,18)" fg:x="17516" fg:w="3"/><text x="94.6504%" y="367.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::build(std::__1::shared_ptr (3 samples, 0.02%)</title><rect x="94.4004%" y="341" width="0.0162%" height="15" fill="rgb(241,78,40)" fg:x="17516" fg:w="3"/><text x="94.6504%" y="351.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::force_allocate_blobs (3 samples, 0.02%)</title><rect x="94.4004%" y="325" width="0.0162%" height="15" fill="rgb(222,35,25)" fg:x="17516" fg:w="3"/><text x="94.6504%" y="335.50"></text></g><g><title>Espresso`Espresso::ANERuntimeEngine::compiler::force_allocate_blobs()::$_0::operator()(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (3 samples, 0.02%)</title><rect x="94.4004%" y="309" width="0.0162%" height="15" fill="rgb(207,92,16)" fg:x="17516" fg:w="3"/><text x="94.6504%" y="319.50"></text></g><g><title>Espresso`espresso_context_destroy (2 samples, 0.01%)</title><rect x="94.4166%" y="453" width="0.0108%" height="15" fill="rgb(216,59,51)" fg:x="17519" fg:w="2"/><text x="94.6666%" y="463.50"></text></g><g><title>Espresso`std::__1::unique_ptr&lt;EspressoLight::espresso_context::priv_t, std::__1::default_delete&lt;EspressoLight::espresso_context::priv_t&gt;&gt;::reset[abi:v15006] (2 samples, 0.01%)</title><rect x="94.4166%" y="437" width="0.0108%" height="15" fill="rgb(213,80,28)" fg:x="17519" fg:w="2"/><text x="94.6666%" y="447.50"></text></g><g><title>Espresso`std::__1::__shared_weak_count::__release_shared[abi:v15006] (2 samples, 0.01%)</title><rect x="94.4166%" y="421" width="0.0108%" height="15" fill="rgb(220,93,7)" fg:x="17519" fg:w="2"/><text x="94.6666%" y="431.50"></text></g><g><title>Espresso`EspressoLight::espresso_context::espresso_context (2 samples, 0.01%)</title><rect x="94.4274%" y="437" width="0.0108%" height="15" fill="rgb(225,24,44)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="447.50"></text></g><g><title>Espresso`Espresso::select_metal_device (2 samples, 0.01%)</title><rect x="94.4274%" y="421" width="0.0108%" height="15" fill="rgb(243,74,40)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="431.50"></text></g><g><title>MetalPerformanceShaders`MPSGetPreferredDevice (2 samples, 0.01%)</title><rect x="94.4274%" y="405" width="0.0108%" height="15" fill="rgb(228,39,7)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="415.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (2 samples, 0.01%)</title><rect x="94.4274%" y="389" width="0.0108%" height="15" fill="rgb(227,79,8)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="399.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="94.4274%" y="373" width="0.0108%" height="15" fill="rgb(236,58,11)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="383.50"></text></g><g><title>MetalPerformanceShaders`0x00000001a9f7f9bc (2 samples, 0.01%)</title><rect x="94.4274%" y="357" width="0.0108%" height="15" fill="rgb(249,63,35)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="367.50"></text></g><g><title>Metal`MTLCopyAllDevices (2 samples, 0.01%)</title><rect x="94.4274%" y="341" width="0.0108%" height="15" fill="rgb(252,114,16)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="351.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (2 samples, 0.01%)</title><rect x="94.4274%" y="325" width="0.0108%" height="15" fill="rgb(254,151,24)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="335.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (2 samples, 0.01%)</title><rect x="94.4274%" y="309" width="0.0108%" height="15" fill="rgb(253,54,39)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="319.50"></text></g><g><title>Metal`invocation function for block in MTLDeviceArrayInitialize() (2 samples, 0.01%)</title><rect x="94.4274%" y="293" width="0.0108%" height="15" fill="rgb(243,25,45)" fg:x="17521" fg:w="2"/><text x="94.6774%" y="303.50"></text></g><g><title>CoreML`+[MLModel modelWithContentsOfURL:configuration:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="629" width="0.1563%" height="15" fill="rgb(234,134,9)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="639.50"></text></g><g><title>CoreML`-[MLModelAsset modelWithError:] (29 samples, 0.16%)</title><rect x="94.2873%" y="613" width="0.1563%" height="15" fill="rgb(227,166,31)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="623.50"></text></g><g><title>CoreML`-[MLModelAsset load:] (29 samples, 0.16%)</title><rect x="94.2873%" y="597" width="0.1563%" height="15" fill="rgb(245,143,41)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="607.50"></text></g><g><title>CoreML`+[MLLoader loadModelFromAssetAtURL:configuration:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="581" width="0.1563%" height="15" fill="rgb(238,181,32)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="591.50"></text></g><g><title>CoreML`+[MLLoader loadModelFromAssetAtURL:configuration:loaderEvent:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="565" width="0.1563%" height="15" fill="rgb(224,113,18)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="575.50"></text></g><g><title>CoreML`+[MLLoader loadModelFromArchive:configuration:loaderEvent:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="549" width="0.1563%" height="15" fill="rgb(240,229,28)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="559.50"></text></g><g><title>CoreML`+[MLLoader loadModelFromArchive:configuration:loaderEvent:useUpdatableModelLoaders:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="533" width="0.1563%" height="15" fill="rgb(250,185,3)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="543.50"></text></g><g><title>CoreML`+[MLLoader loadModelWithClass:fromArchive:modelVersionInfo:compilerVersionInfo:configuration:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="517" width="0.1563%" height="15" fill="rgb(212,59,25)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="527.50"></text></g><g><title>CoreML`+[MLNeuralNetworkEngine loadModelFromCompiledArchive:modelVersionInfo:compilerVersionInfo:configuration:error:] (29 samples, 0.16%)</title><rect x="94.2873%" y="501" width="0.1563%" height="15" fill="rgb(221,87,20)" fg:x="17495" fg:w="29"/><text x="94.5373%" y="511.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine initWithContainer:configuration:error:] (27 samples, 0.15%)</title><rect x="94.2980%" y="485" width="0.1455%" height="15" fill="rgb(213,74,28)" fg:x="17497" fg:w="27"/><text x="94.5480%" y="495.50"></text></g><g><title>CoreML`-[MLNeuralNetworkEngine collectParametersFromContainer:configuration:error:] (5 samples, 0.03%)</title><rect x="94.4166%" y="469" width="0.0269%" height="15" fill="rgb(224,132,34)" fg:x="17519" fg:w="5"/><text x="94.6666%" y="479.50"></text></g><g><title>Espresso`espresso_create_context (3 samples, 0.02%)</title><rect x="94.4274%" y="453" width="0.0162%" height="15" fill="rgb(222,101,24)" fg:x="17521" fg:w="3"/><text x="94.6774%" y="463.50"></text></g><g><title>CoreML`BuildFromShapes(Espresso::sequential_builder&amp;, std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.4543%" y="501" width="0.0108%" height="15" fill="rgb(254,142,4)" fg:x="17526" fg:w="2"/><text x="94.7043%" y="511.50"></text></g><g><title>CoreML`std::__1::__function::__func&lt;BuildFromShapes(Espresso::sequential_builder&amp;, std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, Espresso::layer_shape&gt;&gt;&gt; const&amp;, bool, NSError* __strong&amp;, bool*)::$_0, std::__1::allocator&lt;BuildFromShapes(Espresso::sequential_builder&amp;, std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, Espresso::layer_shape&gt;&gt;&gt; const&amp;, bool, NSError* __strong&amp;, bool*)::$_0&gt;, std::__1::shared_ptr (2 samples, 0.01%)</title><rect x="94.4543%" y="485" width="0.0108%" height="15" fill="rgb(230,229,49)" fg:x="17526" fg:w="2"/><text x="94.7043%" y="495.50"></text></g><g><title>Espresso`Espresso::sequential_builder::build_from_shapes(std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.4543%" y="469" width="0.0108%" height="15" fill="rgb(238,70,47)" fg:x="17526" fg:w="2"/><text x="94.7043%" y="479.50"></text></g><g><title>Espresso`Espresso::sequential_builder::build_from_shapes(std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.4543%" y="453" width="0.0108%" height="15" fill="rgb(231,160,17)" fg:x="17526" fg:w="2"/><text x="94.7043%" y="463.50"></text></g><g><title>Espresso`Espresso::shape_network_recursive (2 samples, 0.01%)</title><rect x="94.4543%" y="437" width="0.0108%" height="15" fill="rgb(218,68,53)" fg:x="17526" fg:w="2"/><text x="94.7043%" y="447.50"></text></g><g><title>Espresso`Espresso::serialize_network(std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.4759%" y="437" width="0.0108%" height="15" fill="rgb(236,111,10)" fg:x="17530" fg:w="2"/><text x="94.7259%" y="447.50"></text></g><g><title>Espresso`Espresso::dump_network_layers(std::__1::shared_ptr&lt;Espresso::net&gt;, int, Espresso::dump_network_layers_blobs_state&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.4759%" y="421" width="0.0108%" height="15" fill="rgb(224,34,41)" fg:x="17530" fg:w="2"/><text x="94.7259%" y="431.50"></text></g><g><title>CoreML`CoreML::NNCompiler::Backend::NeuralNetwork::EspressoNetBackend::WriteNetwork(std::__1::shared_ptr (4 samples, 0.02%)</title><rect x="94.4705%" y="501" width="0.0216%" height="15" fill="rgb(241,118,19)" fg:x="17529" fg:w="4"/><text x="94.7205%" y="511.50"></text></g><g><title>Espresso`Espresso::dump_network(std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.02%)</title><rect x="94.4705%" y="485" width="0.0216%" height="15" fill="rgb(238,129,25)" fg:x="17529" fg:w="4"/><text x="94.7205%" y="495.50"></text></g><g><title>Espresso`Espresso::dump_network(std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.02%)</title><rect x="94.4705%" y="469" width="0.0216%" height="15" fill="rgb(238,22,31)" fg:x="17529" fg:w="4"/><text x="94.7205%" y="479.50"></text></g><g><title>Espresso`Espresso::dump_network_internal(std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.02%)</title><rect x="94.4705%" y="453" width="0.0216%" height="15" fill="rgb(222,174,48)" fg:x="17529" fg:w="4"/><text x="94.7205%" y="463.50"></text></g><g><title>Espresso`Espresso::net::_tag_inputs_and_outputs (2 samples, 0.01%)</title><rect x="94.5028%" y="405" width="0.0108%" height="15" fill="rgb(206,152,40)" fg:x="17535" fg:w="2"/><text x="94.7528%" y="415.50"></text></g><g><title>Espresso`Espresso::fuse_biases(std::__1::shared_ptr (3 samples, 0.02%)</title><rect x="94.5028%" y="485" width="0.0162%" height="15" fill="rgb(218,99,54)" fg:x="17535" fg:w="3"/><text x="94.7528%" y="495.50"></text></g><g><title>Espresso`Espresso::optimize_network(std::__1::shared_ptr&lt;Espresso::abstract_context&gt;, Espresso::compute_path, std::__1::shared_ptr&lt;Espresso::net&gt;, std::__1::vector&lt;std::__1::shared_ptr&lt;Espresso::graph_optimization_rule&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;Espresso::graph_optimization_rule&gt;&gt;&gt; (std::__1::shared_ptr (3 samples, 0.02%)</title><rect x="94.5028%" y="469" width="0.0162%" height="15" fill="rgb(220,174,26)" fg:x="17535" fg:w="3"/><text x="94.7528%" y="479.50"></text></g><g><title>Espresso`Espresso::sequential_builder::build_from_shapes(std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.02%)</title><rect x="94.5028%" y="453" width="0.0162%" height="15" fill="rgb(245,116,9)" fg:x="17535" fg:w="3"/><text x="94.7528%" y="463.50"></text></g><g><title>Espresso`Espresso::sequential_builder::build_from_shapes(std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, Espresso::layer_shape, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.02%)</title><rect x="94.5028%" y="437" width="0.0162%" height="15" fill="rgb(209,72,35)" fg:x="17535" fg:w="3"/><text x="94.7528%" y="447.50"></text></g><g><title>Espresso`Espresso::shape_network_recursive (3 samples, 0.02%)</title><rect x="94.5028%" y="421" width="0.0162%" height="15" fill="rgb(226,126,21)" fg:x="17535" fg:w="3"/><text x="94.7528%" y="431.50"></text></g><g><title>CoreML`+[MLCompiler compileSpecification:toArchive:options:compilerEvent:error:] (15 samples, 0.08%)</title><rect x="94.4489%" y="549" width="0.0808%" height="15" fill="rgb(227,192,1)" fg:x="17525" fg:w="15"/><text x="94.6989%" y="559.50"></text></g><g><title>CoreML`+[MLNeuralNetworkCompiler compileSpecification:toArchive:options:error:] (15 samples, 0.08%)</title><rect x="94.4489%" y="533" width="0.0808%" height="15" fill="rgb(237,180,29)" fg:x="17525" fg:w="15"/><text x="94.6989%" y="543.50"></text></g><g><title>CoreML`CoreML::NNCompiler::Backend::NeuralNetwork::NeuralNetworkEspressoNetBackend::Compile (14 samples, 0.08%)</title><rect x="94.4543%" y="517" width="0.0755%" height="15" fill="rgb(230,197,35)" fg:x="17526" fg:w="14"/><text x="94.7043%" y="527.50"></text></g><g><title>Espresso`Espresso::auto_optimize(std::__1::shared_ptr (6 samples, 0.03%)</title><rect x="94.4974%" y="501" width="0.0323%" height="15" fill="rgb(246,193,31)" fg:x="17534" fg:w="6"/><text x="94.7474%" y="511.50"></text></g><g><title>CoreML`+[MLCompiler compileModelAtURL:toURL:options:error:] (18 samples, 0.10%)</title><rect x="94.4435%" y="581" width="0.0970%" height="15" fill="rgb(241,36,4)" fg:x="17524" fg:w="18"/><text x="94.6935%" y="591.50"></text></g><g><title>CoreML`+[MLCompiler _compileSpecificationAtURL:toURL:compiledModelName:overridingModelDescription:options:error:] (18 samples, 0.10%)</title><rect x="94.4435%" y="565" width="0.0970%" height="15" fill="rgb(241,130,17)" fg:x="17524" fg:w="18"/><text x="94.6935%" y="575.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::coreml::Execution::LoadModel (49 samples, 0.26%)</title><rect x="94.2873%" y="661" width="0.2641%" height="15" fill="rgb(206,137,32)" fg:x="17495" fg:w="49"/><text x="94.5373%" y="671.50"></text></g><g><title>libonnxruntime.dylib`-[CoreMLExecution loadModel] (49 samples, 0.26%)</title><rect x="94.2873%" y="645" width="0.2641%" height="15" fill="rgb(237,228,51)" fg:x="17495" fg:w="49"/><text x="94.5373%" y="655.50"></text></g><g><title>CoreML`+[MLModel(MLModelCompilation) compileModelAtURL:error:] (20 samples, 0.11%)</title><rect x="94.4435%" y="629" width="0.1078%" height="15" fill="rgb(243,6,42)" fg:x="17524" fg:w="20"/><text x="94.6935%" y="639.50"></text></g><g><title>CoreML`+[MLModel(MLModelCompilation) _compileModelAtURL:options:error:] (20 samples, 0.11%)</title><rect x="94.4435%" y="613" width="0.1078%" height="15" fill="rgb(251,74,28)" fg:x="17524" fg:w="20"/><text x="94.6935%" y="623.50"></text></g><g><title>CoreML`+[MLModel(MLModelCompilation) compileModelWithoutAutoreleaseAtURL:options:error:] (20 samples, 0.11%)</title><rect x="94.4435%" y="597" width="0.1078%" height="15" fill="rgb(218,20,49)" fg:x="17524" fg:w="20"/><text x="94.6935%" y="607.50"></text></g><g><title>libonnxruntime.dylib`CoreML::Specification::Model::_InternalSerialize (2 samples, 0.01%)</title><rect x="94.5513%" y="597" width="0.0108%" height="15" fill="rgb(238,28,14)" fg:x="17544" fg:w="2"/><text x="94.8013%" y="607.50"></text></g><g><title>libonnxruntime.dylib`CoreML::Specification::NeuralNetwork::_InternalSerialize (2 samples, 0.01%)</title><rect x="94.5513%" y="581" width="0.0108%" height="15" fill="rgb(229,40,46)" fg:x="17544" fg:w="2"/><text x="94.8013%" y="591.50"></text></g><g><title>libonnxruntime.dylib`CoreML::Specification::NeuralNetworkLayer::_InternalSerialize (2 samples, 0.01%)</title><rect x="94.5513%" y="565" width="0.0108%" height="15" fill="rgb(244,195,20)" fg:x="17544" fg:w="2"/><text x="94.8013%" y="575.50"></text></g><g><title>libonnxruntime.dylib`google::protobuf::MessageLite::SerializeToOstream(std::__1::basic_ostream&lt;char, std::__1::char_traits (3 samples, 0.02%)</title><rect x="94.5513%" y="629" width="0.0162%" height="15" fill="rgb(253,56,35)" fg:x="17544" fg:w="3"/><text x="94.8013%" y="639.50"></text></g><g><title>libonnxruntime.dylib`google::protobuf::MessageLite::SerializePartialToZeroCopyStream (3 samples, 0.02%)</title><rect x="94.5513%" y="613" width="0.0162%" height="15" fill="rgb(210,149,44)" fg:x="17544" fg:w="3"/><text x="94.8013%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::CoreMLExecutionProvider::Compile(std::__1::vector&lt;onnxruntime::IExecutionProvider::FusedNodeAndGraph, std::__1::allocator&lt;onnxruntime::IExecutionProvider::FusedNodeAndGraph&gt;&gt; const&amp;, std::__1::vector&lt;onnxruntime::NodeComputeInfo, std::__1::allocator (54 samples, 0.29%)</title><rect x="94.2873%" y="677" width="0.2910%" height="15" fill="rgb(240,135,12)" fg:x="17495" fg:w="54"/><text x="94.5373%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::coreml::ModelBuilder::Compile(std::__1::unique_ptr&lt;onnxruntime::coreml::Model, std::__1::default_delete&lt;onnxruntime::coreml::Model&gt;&gt;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.03%)</title><rect x="94.5513%" y="661" width="0.0269%" height="15" fill="rgb(251,24,50)" fg:x="17544" fg:w="5"/><text x="94.8013%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::coreml::ModelBuilder::SaveCoreMLModel(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.03%)</title><rect x="94.5513%" y="645" width="0.0269%" height="15" fill="rgb(243,200,47)" fg:x="17544" fg:w="5"/><text x="94.8013%" y="655.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::coreml::ModelBuilder::Initialize (2 samples, 0.01%)</title><rect x="94.5675%" y="629" width="0.0108%" height="15" fill="rgb(224,166,26)" fg:x="17547" fg:w="2"/><text x="94.8175%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::GetCapabilityForEP(onnxruntime:: (2 samples, 0.01%)</title><rect x="94.5783%" y="677" width="0.0108%" height="15" fill="rgb(233,0,47)" fg:x="17549" fg:w="2"/><text x="94.8283%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::GetCapabilityForEP(onnxruntime::(anonymous namespace)::GetCapabilityForEPParams const&amp;)::$_1::operator() (2 samples, 0.01%)</title><rect x="94.5783%" y="661" width="0.0108%" height="15" fill="rgb(253,80,5)" fg:x="17549" fg:w="2"/><text x="94.8283%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::GraphPartitioner::Partition(onnxruntime::Graph&amp;, onnxruntime::FuncManager&amp;, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::Graph&amp;, bool&amp;, onnxruntime::IExecutionProvider&amp;, std::__1::function&lt;void (onnxruntime::Graph const&amp;)&gt; const&amp;)&gt; const&amp;, onnxruntime::GraphPartitioner::Mode, std::__1::function&lt;void  (57 samples, 0.31%)</title><rect x="94.2873%" y="709" width="0.3072%" height="15" fill="rgb(214,133,25)" fg:x="17495" fg:w="57"/><text x="94.5373%" y="719.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::PartitionOnnxFormatModelImpl(onnxruntime::Graph&amp;, onnxruntime::FuncManager&amp;, onnxruntime::KernelRegistryManager&amp;, onnxruntime::KernelRegistry&amp;, onnxruntime::IExecutionProvider&amp;, onnxruntime::GraphPartitioner::Mode, int&amp;, std::__1::function&lt;onnxruntime::common::Status (onnxruntime::Graph&amp;, bool&amp;, onnxruntime::IExecutionProvider&amp;, std::__1::function&lt;void (onnxruntime::Graph const&amp;)&gt; const&amp;)&gt; const&amp;, std::__1::function&lt;void  (57 samples, 0.31%)</title><rect x="94.2873%" y="693" width="0.3072%" height="15" fill="rgb(209,27,14)" fg:x="17495" fg:w="57"/><text x="94.5373%" y="703.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::CommonSubexpressionElimination::ApplyImpl (4 samples, 0.02%)</title><rect x="94.6052%" y="677" width="0.0216%" height="15" fill="rgb(219,102,51)" fg:x="17554" fg:w="4"/><text x="94.8552%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::ConstantSharing::ApplyImpl (2 samples, 0.01%)</title><rect x="94.6268%" y="677" width="0.0108%" height="15" fill="rgb(237,18,16)" fg:x="17558" fg:w="2"/><text x="94.8768%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Graph::PopulateNodeArgToProducerConsumerLookupsFromNodes (2 samples, 0.01%)</title><rect x="94.6430%" y="645" width="0.0108%" height="15" fill="rgb(241,85,17)" fg:x="17561" fg:w="2"/><text x="94.8930%" y="655.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Node::ForEachDef(std::__1::function&lt;void  (2 samples, 0.01%)</title><rect x="94.6430%" y="629" width="0.0108%" height="15" fill="rgb(236,90,42)" fg:x="17561" fg:w="2"/><text x="94.8930%" y="639.50"></text></g><g><title>libonnxruntime.dylib`std::__1::__function::__func&lt;onnxruntime::Graph::PopulateNodeArgToProducerConsumerLookupsFromNodes()::$_23, std::__1::allocator&lt;onnxruntime::Graph::PopulateNodeArgToProducerConsumerLookupsFromNodes()::$_23&gt;, void (onnxruntime::NodeArg const&amp;, bool)&gt;::operator() (2 samples, 0.01%)</title><rect x="94.6430%" y="613" width="0.0108%" height="15" fill="rgb(249,57,21)" fg:x="17561" fg:w="2"/><text x="94.8930%" y="623.50"></text></g><g><title>libonnxruntime.dylib`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::unordered_set&lt;unsigned long, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;unsigned long&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::unordered_set&lt;unsigned long, std::__1::hash&lt;unsigned long&gt;, std::__1::equal_to&lt;unsigned long&gt;, std::__1::allocator&lt;unsigned long&gt;&gt;&gt;&gt;&gt;::operator[](std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.6430%" y="597" width="0.0108%" height="15" fill="rgb(243,12,36)" fg:x="17561" fg:w="2"/><text x="94.8930%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Graph::BuildConnections(std::__1::unordered_set&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.02%)</title><rect x="94.6430%" y="661" width="0.0162%" height="15" fill="rgb(253,128,47)" fg:x="17561" fg:w="3"/><text x="94.8930%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnx::OpSchema::FormalParameter::FormalParameter (2 samples, 0.01%)</title><rect x="94.6753%" y="613" width="0.0108%" height="15" fill="rgb(207,33,20)" fg:x="17567" fg:w="2"/><text x="94.9253%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnx::TypeProto::clear_value (2 samples, 0.01%)</title><rect x="94.6915%" y="597" width="0.0108%" height="15" fill="rgb(233,215,35)" fg:x="17570" fg:w="2"/><text x="94.9415%" y="607.50"></text></g><g><title>libonnxruntime.dylib`onnx::TypeProto_Tensor::~TypeProto_Tensor (2 samples, 0.01%)</title><rect x="94.6915%" y="581" width="0.0108%" height="15" fill="rgb(249,188,52)" fg:x="17570" fg:w="2"/><text x="94.9415%" y="591.50"></text></g><g><title>libonnxruntime.dylib`onnx::TensorShapeProto::~TensorShapeProto (2 samples, 0.01%)</title><rect x="94.6915%" y="565" width="0.0108%" height="15" fill="rgb(225,12,32)" fg:x="17570" fg:w="2"/><text x="94.9415%" y="575.50"></text></g><g><title>libonnxruntime.dylib`google::protobuf::internal::RepeatedPtrFieldBase::DestroyProtos (2 samples, 0.01%)</title><rect x="94.6915%" y="549" width="0.0108%" height="15" fill="rgb(247,98,14)" fg:x="17570" fg:w="2"/><text x="94.9415%" y="559.50"></text></g><g><title>libonnxruntime.dylib`onnx::TypeProto::~TypeProto (3 samples, 0.02%)</title><rect x="94.6915%" y="613" width="0.0162%" height="15" fill="rgb(247,219,48)" fg:x="17570" fg:w="3"/><text x="94.9415%" y="623.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Graph::InferAndVerifyTypeMatch (8 samples, 0.04%)</title><rect x="94.6699%" y="629" width="0.0431%" height="15" fill="rgb(253,60,48)" fg:x="17566" fg:w="8"/><text x="94.9199%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Graph::Resolve (15 samples, 0.08%)</title><rect x="94.6430%" y="677" width="0.0808%" height="15" fill="rgb(245,15,52)" fg:x="17561" fg:w="15"/><text x="94.8930%" y="687.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Graph::PerformTypeAndShapeInferencing (11 samples, 0.06%)</title><rect x="94.6645%" y="661" width="0.0593%" height="15" fill="rgb(220,133,28)" fg:x="17565" fg:w="11"/><text x="94.9145%" y="671.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Graph::VerifyNodeAndOpMatch (10 samples, 0.05%)</title><rect x="94.6699%" y="645" width="0.0539%" height="15" fill="rgb(217,180,4)" fg:x="17566" fg:w="10"/><text x="94.9199%" y="655.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::Node::ToProto (2 samples, 0.01%)</title><rect x="94.7130%" y="629" width="0.0108%" height="15" fill="rgb(251,24,1)" fg:x="17574" fg:w="2"/><text x="94.9630%" y="639.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::TransformGraph (84 samples, 0.45%)</title><rect x="94.2873%" y="725" width="0.4527%" height="15" fill="rgb(212,185,49)" fg:x="17495" fg:w="84"/><text x="94.5373%" y="735.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::GraphTransformerManager::ApplyTransformers (26 samples, 0.14%)</title><rect x="94.5998%" y="709" width="0.1401%" height="15" fill="rgb(215,175,22)" fg:x="17553" fg:w="26"/><text x="94.8498%" y="719.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::GraphTransformer::Apply (25 samples, 0.13%)</title><rect x="94.6052%" y="693" width="0.1347%" height="15" fill="rgb(250,205,14)" fg:x="17554" fg:w="25"/><text x="94.8552%" y="703.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::KernelRegistryManager::RegisterKernels (2 samples, 0.01%)</title><rect x="94.7400%" y="725" width="0.0108%" height="15" fill="rgb(225,211,22)" fg:x="17579" fg:w="2"/><text x="94.9900%" y="735.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::CPUExecutionProvider::GetKernelRegistry (2 samples, 0.01%)</title><rect x="94.7400%" y="709" width="0.0108%" height="15" fill="rgb(251,179,42)" fg:x="17579" fg:w="2"/><text x="94.9900%" y="719.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::RegisterCPUKernels (2 samples, 0.01%)</title><rect x="94.7400%" y="693" width="0.0108%" height="15" fill="rgb(208,216,51)" fg:x="17579" fg:w="2"/><text x="94.9900%" y="703.50"></text></g><g><title>rust-eyetracking`ort::session::SessionBuilder::with_model_from_memory (96 samples, 0.52%)</title><rect x="94.2441%" y="789" width="0.5174%" height="15" fill="rgb(235,36,11)" fg:x="17487" fg:w="96"/><text x="94.4941%" y="799.50"></text></g><g><title>libonnxruntime.dylib`OrtApis::CreateSessionFromArray (96 samples, 0.52%)</title><rect x="94.2441%" y="773" width="0.5174%" height="15" fill="rgb(213,189,28)" fg:x="17487" fg:w="96"/><text x="94.4941%" y="783.50"></text></g><g><title>libonnxruntime.dylib`(anonymous namespace)::InitializeSession(OrtSessionOptions const*, std::__1::unique_ptr&lt;onnxruntime::InferenceSession, std::__1::default_delete (89 samples, 0.48%)</title><rect x="94.2819%" y="757" width="0.4797%" height="15" fill="rgb(227,203,42)" fg:x="17494" fg:w="89"/><text x="94.5319%" y="767.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::InferenceSession::Initialize (89 samples, 0.48%)</title><rect x="94.2819%" y="741" width="0.4797%" height="15" fill="rgb(244,72,36)" fg:x="17494" fg:w="89"/><text x="94.5319%" y="751.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::SessionState::FinalizeSessionState(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.7507%" y="725" width="0.0108%" height="15" fill="rgb(213,53,17)" fg:x="17581" fg:w="2"/><text x="95.0007%" y="735.50"></text></g><g><title>libonnxruntime.dylib`onnxruntime::SessionState::FinalizeSessionStateImpl(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, onnxruntime::KernelRegistryManager const&amp;, onnxruntime::Node const*, onnxruntime::SessionOptions const&amp;, bool, onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, unsigned long, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, unsigned long&gt;&gt;&gt;&amp;, onnxruntime::InlinedHashMap&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, OrtDevice, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.01%)</title><rect x="94.7507%" y="709" width="0.0108%" height="15" fill="rgb(207,167,3)" fg:x="17581" fg:w="2"/><text x="95.0007%" y="719.50"></text></g><g><title>rust-eyetracking`ort::value::Value::from_array (21 samples, 0.11%)</title><rect x="94.7615%" y="789" width="0.1132%" height="15" fill="rgb(216,98,30)" fg:x="17583" fg:w="21"/><text x="95.0115%" y="799.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.11%)</title><rect x="94.7669%" y="773" width="0.1078%" height="15" fill="rgb(236,123,15)" fg:x="17584" fg:w="20"/><text x="95.0169%" y="783.50"></text></g><g><title>rust-eyetracking`ort::value::Value::try_extract (2 samples, 0.01%)</title><rect x="94.8747%" y="789" width="0.0108%" height="15" fill="rgb(248,81,50)" fg:x="17604" fg:w="2"/><text x="95.1247%" y="799.50"></text></g><g><title>rust-eyetracking`rust_eyetracking::convert_lum_image_buffer_to_rgb (488 samples, 2.63%)</title><rect x="94.8855%" y="789" width="2.6300%" height="15" fill="rgb(214,120,4)" fg:x="17606" fg:w="488"/><text x="95.1355%" y="799.50">ru..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (81 samples, 0.44%)</title><rect x="97.0790%" y="773" width="0.4365%" height="15" fill="rgb(208,179,34)" fg:x="18013" fg:w="81"/><text x="97.3290%" y="783.50"></text></g><g><title>libsystem_platform.dylib`__bzero (81 samples, 0.44%)</title><rect x="97.0790%" y="757" width="0.4365%" height="15" fill="rgb(227,140,7)" fg:x="18013" fg:w="81"/><text x="97.3290%" y="767.50"></text></g><g><title>rust-eyetracking`rust_eyetracking::convert_nv12_to_grayscale (354 samples, 1.91%)</title><rect x="97.5155%" y="789" width="1.9078%" height="15" fill="rgb(214,22,6)" fg:x="18094" fg:w="354"/><text x="97.7655%" y="799.50">r..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (37 samples, 0.20%)</title><rect x="99.2239%" y="773" width="0.1994%" height="15" fill="rgb(207,137,27)" fg:x="18411" fg:w="37"/><text x="99.4739%" y="783.50"></text></g><g><title>libsystem_platform.dylib`__bzero (37 samples, 0.20%)</title><rect x="99.2239%" y="757" width="0.1994%" height="15" fill="rgb(210,8,46)" fg:x="18411" fg:w="37"/><text x="99.4739%" y="767.50"></text></g><g><title>rust-eyetracking`rust_eyetracking::decode_boxes (9 samples, 0.05%)</title><rect x="99.4233%" y="789" width="0.0485%" height="15" fill="rgb(240,16,54)" fg:x="18448" fg:w="9"/><text x="99.6733%" y="799.50"></text></g><g><title>rust-eyetracking`ndarray::impl_constructors::_&lt;impl ndarray::ArrayBase&lt;S,D&gt;&gt;::zeros (4 samples, 0.02%)</title><rect x="99.4503%" y="773" width="0.0216%" height="15" fill="rgb(211,209,29)" fg:x="18453" fg:w="4"/><text x="99.7003%" y="783.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.02%)</title><rect x="99.4503%" y="757" width="0.0216%" height="15" fill="rgb(226,228,24)" fg:x="18453" fg:w="4"/><text x="99.7003%" y="767.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.02%)</title><rect x="99.4503%" y="741" width="0.0216%" height="15" fill="rgb(222,84,9)" fg:x="18453" fg:w="4"/><text x="99.7003%" y="751.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (72 samples, 0.39%)</title><rect x="99.4826%" y="757" width="0.3880%" height="15" fill="rgb(234,203,30)" fg:x="18459" fg:w="72"/><text x="99.7326%" y="767.50"></text></g><g><title>rust-eyetracking`show_image::features::image::_&lt;impl core::convert::From&lt;image::buffer_::ImageBuffer&lt;P,Container&gt;&gt; for show_image::image::Image&gt;::from (89 samples, 0.48%)</title><rect x="99.4826%" y="773" width="0.4797%" height="15" fill="rgb(238,109,14)" fg:x="18459" fg:w="89"/><text x="99.7326%" y="783.50"></text></g><g><title>rust-eyetracking`show_image::features::image::into_bytes (17 samples, 0.09%)</title><rect x="99.8707%" y="757" width="0.0916%" height="15" fill="rgb(233,206,34)" fg:x="18531" fg:w="17"/><text x="100.1207%" y="767.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (17 samples, 0.09%)</title><rect x="99.8707%" y="741" width="0.0916%" height="15" fill="rgb(220,167,47)" fg:x="18531" fg:w="17"/><text x="100.1207%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.09%)</title><rect x="99.8707%" y="725" width="0.0916%" height="15" fill="rgb(238,105,10)" fg:x="18531" fg:w="17"/><text x="100.1207%" y="735.50"></text></g><g><title>rust-eyetracking`show_image::backend::proxy::WindowProxy::set_image (91 samples, 0.49%)</title><rect x="99.4826%" y="789" width="0.4904%" height="15" fill="rgb(213,227,17)" fg:x="18459" fg:w="91"/><text x="99.7326%" y="799.50"></text></g><g><title>rust-eyetracking`show_image::oneshot::Receiver&lt;T&gt;::recv (2 samples, 0.01%)</title><rect x="99.9623%" y="773" width="0.0108%" height="15" fill="rgb(217,132,38)" fg:x="18548" fg:w="2"/><text x="100.2123%" y="783.50"></text></g><g><title>rust-eyetracking`std::sync::condvar::Condvar::wait (2 samples, 0.01%)</title><rect x="99.9623%" y="757" width="0.0108%" height="15" fill="rgb(242,146,4)" fg:x="18548" fg:w="2"/><text x="100.2123%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.01%)</title><rect x="99.9623%" y="741" width="0.0108%" height="15" fill="rgb(212,61,9)" fg:x="18548" fg:w="2"/><text x="100.2123%" y="751.50"></text></g><g><title>all (18,555 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(247,126,22)" fg:x="0" fg:w="18555"/><text x="0.2500%" y="911.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (17,675 samples, 95.26%)</title><rect x="4.7427%" y="885" width="95.2573%" height="15" fill="rgb(220,196,2)" fg:x="880" fg:w="17675"/><text x="4.9927%" y="895.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (17,675 samples, 95.26%)</title><rect x="4.7427%" y="869" width="95.2573%" height="15" fill="rgb(208,46,4)" fg:x="880" fg:w="17675"/><text x="4.9927%" y="879.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust-eyetracking`std::sys::unix::thread::Thread::new::thread_start (6,227 samples, 33.56%)</title><rect x="66.4403%" y="853" width="33.5597%" height="15" fill="rgb(252,104,46)" fg:x="12328" fg:w="6227"/><text x="66.6903%" y="863.50">rust-eyetracking`std::sys::unix::thread::Thread::new::..</text></g><g><title>rust-eyetracking`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,227 samples, 33.56%)</title><rect x="66.4403%" y="837" width="33.5597%" height="15" fill="rgb(237,152,48)" fg:x="12328" fg:w="6227"/><text x="66.6903%" y="847.50">rust-eyetracking`core::ops::function::FnOnce::call_onc..</text></g><g><title>rust-eyetracking`std::sys_common::backtrace::__rust_begin_short_backtrace (6,227 samples, 33.56%)</title><rect x="66.4403%" y="821" width="33.5597%" height="15" fill="rgb(221,59,37)" fg:x="12328" fg:w="6227"/><text x="66.6903%" y="831.50">rust-eyetracking`std::sys_common::backtrace::__rust_be..</text></g><g><title>rust-eyetracking`rust_eyetracking::main::main (6,107 samples, 32.91%)</title><rect x="67.0870%" y="805" width="32.9130%" height="15" fill="rgb(209,202,51)" fg:x="12448" fg:w="6107"/><text x="67.3370%" y="815.50">rust-eyetracking`rust_eyetracking::main::main</text></g><g><title>rust-eyetracking`std::io::stdio::_print (5 samples, 0.03%)</title><rect x="99.9731%" y="789" width="0.0269%" height="15" fill="rgb(228,81,30)" fg:x="18550" fg:w="5"/><text x="100.2231%" y="799.50"></text></g><g><title>rust-eyetracking`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5 samples, 0.03%)</title><rect x="99.9731%" y="773" width="0.0269%" height="15" fill="rgb(227,42,39)" fg:x="18550" fg:w="5"/><text x="100.2231%" y="783.50"></text></g><g><title>rust-eyetracking`core::fmt::write (5 samples, 0.03%)</title><rect x="99.9731%" y="757" width="0.0269%" height="15" fill="rgb(221,26,2)" fg:x="18550" fg:w="5"/><text x="100.2231%" y="767.50"></text></g><g><title>rust-eyetracking`&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.03%)</title><rect x="99.9731%" y="741" width="0.0269%" height="15" fill="rgb(254,61,31)" fg:x="18550" fg:w="5"/><text x="100.2231%" y="751.50"></text></g><g><title>rust-eyetracking`&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5 samples, 0.03%)</title><rect x="99.9731%" y="725" width="0.0269%" height="15" fill="rgb(222,173,38)" fg:x="18550" fg:w="5"/><text x="100.2231%" y="735.50"></text></g><g><title>libsystem_kernel.dylib`write (5 samples, 0.03%)</title><rect x="99.9731%" y="709" width="0.0269%" height="15" fill="rgb(218,50,12)" fg:x="18550" fg:w="5"/><text x="100.2231%" y="719.50"></text></g></svg></svg>